/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: RealtimeApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class RealtimeApp {
  static loadFile(id: string, initializer: any): RealtimeApp.RealtimeDocument;
  static loadService(): void;
}

declare namespace RealtimeApp {

  export interface AnyCollaborativeObject {

    deleteMode: string;
    index: number;
    length: number;
    size: number;
    text: string;

    addEventListener(type: string, listener: any): void;
    append(text: string): void;
    asArray(): any[];
    clear(): void;
    delete(key: string): RealtimeApp.AnyCollaborativeObject;
    get(index: number): RealtimeApp.AnyCollaborativeObject;
    get(key: string): RealtimeApp.AnyCollaborativeObject;
    getText(): string;
    has(key: string): boolean;
    id(): string;
    indexOf(object: RealtimeApp.AnyCollaborativeObject, optComparatorFn: any): number;
    insert(index: number, object: RealtimeApp.AnyCollaborativeObject): void;
    insertAll(index: number, objects: RealtimeApp.AnyCollaborativeObject[]): void;
    insertString(index: number, text: string): void;
    isEmpty(): boolean;
    items(): RealtimeApp.AnyCollaborativeObject[];
    keys(): string[];
    lastIndexOf(object: RealtimeApp.AnyCollaborativeObject, optComparatorFn: any): number;
    move(index: number, destinationIndex: number): void;
    moveToList(index: number, destination: RealtimeApp.CollaborativeList, destinationIndex: number): void;
    push(object: RealtimeApp.AnyCollaborativeObject): number;
    pushAll(objects: RealtimeApp.AnyCollaborativeObject[]): void;
    referencedObject(): RealtimeApp.CollaborativeObject;
    registerReference(index: number, deleteMode: string): RealtimeApp.IndexReference;
    remove(index: number): void;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    removeRange(startIndex: number, endIndex: number): void;
    removeValue(value: RealtimeApp.AnyCollaborativeObject): boolean;
    replaceRance(index: number, objects: RealtimeApp.AnyCollaborativeObject[]): void;
    set(index: number, object: RealtimeApp.AnyCollaborativeObject): void;
    set(key: string, value: RealtimeApp.AnyCollaborativeObject): RealtimeApp.AnyCollaborativeObject;
    setText(text: string): void;
    toString(): string;
    type(): string;
    values(): RealtimeApp.AnyCollaborativeObject[];

  }


  export interface CollaborativeList {

    length: number;

    addEventListener(type: string, listener: any): void;
    asArray(): any[];
    clear(): void;
    get(index: number): RealtimeApp.AnyCollaborativeObject;
    id(): string;
    indexOf(object: RealtimeApp.AnyCollaborativeObject, optComparatorFn: any): number;
    insert(index: number, object: RealtimeApp.AnyCollaborativeObject): void;
    insertAll(index: number, objects: RealtimeApp.AnyCollaborativeObject[]): void;
    lastIndexOf(object: RealtimeApp.AnyCollaborativeObject, optComparatorFn: any): number;
    move(index: number, destinationIndex: number): void;
    moveToList(index: number, destination: RealtimeApp.CollaborativeList, destinationIndex: number): void;
    push(object: RealtimeApp.AnyCollaborativeObject): number;
    pushAll(objects: RealtimeApp.AnyCollaborativeObject[]): void;
    registerReference(index: number, deleteMode: string): RealtimeApp.IndexReference;
    remove(index: number): void;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    removeRange(startIndex: number, endIndex: number): void;
    removeValue(value: RealtimeApp.AnyCollaborativeObject): boolean;
    replaceRance(index: number, objects: RealtimeApp.AnyCollaborativeObject[]): void;
    set(index: number, object: RealtimeApp.AnyCollaborativeObject): void;
    toString(): string;
    type(): string;

  }


  export interface CollaborativeMap {

    size: number;

    addEventListener(type: string, listener: any): void;
    clear(): void;
    delete(key: string): RealtimeApp.AnyCollaborativeObject;
    get(key: string): RealtimeApp.AnyCollaborativeObject;
    has(key: string): boolean;
    id(): string;
    isEmpty(): boolean;
    items(): RealtimeApp.AnyCollaborativeObject[];
    keys(): string[];
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    set(key: string, value: RealtimeApp.AnyCollaborativeObject): RealtimeApp.AnyCollaborativeObject;
    toString(): string;
    type(): string;
    values(): RealtimeApp.AnyCollaborativeObject[];

  }


  export interface CollaborativeObject {

    addEventListener(type: string, listener: any): void;
    id(): string;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    toString(): string;
    type(): string;

  }


  export interface CollaborativeString {

    length: number;
    text: string;

    addEventListener(type: string, listener: any): void;
    append(text: string): void;
    getText(): string;
    id(): string;
    insertString(index: number, text: string): void;
    registerReference(index: number, deleteMode: string): RealtimeApp.IndexReference;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    removeRange(startIndex: number, endIndex: number): void;
    setText(text: string): void;
    toString(): string;
    type(): string;

  }


  export interface EventTarget {

    addEventListener(type: string, listener: any): void;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;

  }


  export interface IndexReference {

    deleteMode: string;
    index: number;

    addEventListener(type: string, listener: any): void;
    id(): string;
    referencedObject(): RealtimeApp.CollaborativeObject;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    toString(): string;
    type(): string;

  }


  export interface RealtimeCollaborator {

    color: string;
    displayName: string;
    isAnonymous: boolean;
    isMe: boolean;
    permissionId: string;
    photoUrl: string;
    sessionId: string;
    userId: string;

  }


  export interface RealtimeDocument {

    isClosed: boolean;
    isInGoogleDrive: boolean;
    saveDelay: number;

    addEventListener(type: string, listener: any): void;
    close(): void;
    getCollaborators(): RealtimeApp.RealtimeCollaborator[];
    getModel(): RealtimeApp.RealtimeModel;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    saveAs(fileId: string): void;

  }


  export interface RealtimeModel {

    bytesUsed: number;
    canRedo: boolean;
    canUndo: boolean;

    addEventListener(type: string, listener: any): void;
    beginCompoundOperation(name: string, isUndoable: boolean): void;
    create(type: string): RealtimeApp.AnyCollaborativeObject;
    createList(): RealtimeApp.CollaborativeList;
    createMap(): RealtimeApp.CollaborativeMap;
    createString(): RealtimeApp.CollaborativeString;
    endCompoundOperation(): void;
    getRoot(): RealtimeApp.CollaborativeMap;
    isReadOnly(): boolean;
    redo(): void;
    removeAllEventListeners(): void;
    removeEventListener(type: string, listener: any): void;
    serverRevision(): number;
    toJson(optAppId: string, optRevision: number): string;
    undo(): void;

  }


}