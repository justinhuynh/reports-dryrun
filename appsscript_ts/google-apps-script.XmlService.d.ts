/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: XmlService.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class XmlService {
  static createCdata(text: string): XmlService.Cdata;
  static createComment(text: string): XmlService.Comment;
  static createDocType(elementName: string): XmlService.DocType;
  static createDocType(elementName: string, systemId: string): XmlService.DocType;
  static createDocType(elementName: string, publicId: string, systemId: string): XmlService.DocType;
  static createDocument(): XmlService.Document;
  static createDocument(rootElement: XmlService.Element): XmlService.Document;
  static createElement(name: string): XmlService.Element;
  static createElement(name: string, namespace: XmlService.Namespace): XmlService.Element;
  static createText(text: string): XmlService.Text;
  static getCompactFormat(): XmlService.Format;
  static getNamespace(uri: string): XmlService.Namespace;
  static getNamespace(prefix: string, uri: string): XmlService.Namespace;
  static getNoNamespace(): XmlService.Namespace;
  static getPrettyFormat(): XmlService.Format;
  static getRawFormat(): XmlService.Format;
  static getXmlNamespace(): XmlService.Namespace;
  static parse(xml: string): XmlService.Document;
}

declare namespace XmlService {

  export interface Attribute {

    getName(): string;
    getNamespace(): XmlService.Namespace;
    getValue(): string;
    setName(name: string): XmlService.Attribute;
    setNamespace(namespace: XmlService.Namespace): XmlService.Attribute;
    setValue(value: string): XmlService.Attribute;

  }


  export interface Cdata {

    append(text: string): XmlService.Text;
    detach(): XmlService.Content;
    getParentElement(): XmlService.Element;
    getText(): string;
    getValue(): string;
    setText(text: string): XmlService.Text;

  }


  export interface Comment {

    detach(): XmlService.Content;
    getParentElement(): XmlService.Element;
    getText(): string;
    getValue(): string;
    setText(text: string): XmlService.Comment;

  }


  export interface Content {

    asCdata(): XmlService.Cdata;
    asComment(): XmlService.Comment;
    asDocType(): XmlService.DocType;
    asElement(): XmlService.Element;
    asEntityRef(): XmlService.EntityRef;
    asProcessingInstruction(): XmlService.ProcessingInstruction;
    asText(): XmlService.Text;
    detach(): XmlService.Content;
    getParentElement(): XmlService.Element;
    getType(): XmlService.ContentType;
    getValue(): string;

  }


  export enum ContentType {

    CDATA,
    COMMENT,
    DOCTYPE,
    ELEMENT,
    ENTITYREF,
    PROCESSINGINSTRUCTION,
    TEXT

  }


  export interface DocType {

    detach(): XmlService.Content;
    getElementName(): string;
    getInternalSubset(): string;
    getParentElement(): XmlService.Element;
    getPublicId(): string;
    getSystemId(): string;
    getValue(): string;
    setElementName(name: string): XmlService.DocType;
    setInternalSubset(data: string): XmlService.DocType;
    setPublicId(id: string): XmlService.DocType;
    setSystemId(id: string): XmlService.DocType;

  }


  export interface Document {

    addContent(index: number, content: XmlService.Content): XmlService.Document;
    addContent(content: XmlService.Content): XmlService.Document;
    cloneContent(): XmlService.Content[];
    detachRootElement(): XmlService.Element;
    getAllContent(): XmlService.Content[];
    getContent(index: number): XmlService.Content;
    getContentSize(): number;
    getDescendants(): XmlService.Content[];
    getDocType(): XmlService.DocType;
    getRootElement(): XmlService.Element;
    hasRootElement(): boolean;
    removeContent(): XmlService.Content[];
    removeContent(index: number): XmlService.Content;
    removeContent(content: XmlService.Content): boolean;
    setDocType(docType: XmlService.DocType): XmlService.Document;
    setRootElement(element: XmlService.Element): XmlService.Document;

  }


  export interface Element {

    addContent(index: number, content: XmlService.Content): XmlService.Element;
    addContent(content: XmlService.Content): XmlService.Element;
    cloneContent(): XmlService.Content[];
    detach(): XmlService.Content;
    getAllContent(): XmlService.Content[];
    getAttribute(name: string): XmlService.Attribute;
    getAttribute(name: string, namespace: XmlService.Namespace): XmlService.Attribute;
    getAttributes(): XmlService.Attribute[];
    getChild(name: string): XmlService.Element;
    getChild(name: string, namespace: XmlService.Namespace): XmlService.Element;
    getChildText(name: string): string;
    getChildText(name: string, namespace: XmlService.Namespace): string;
    getChildren(): XmlService.Element[];
    getChildren(name: string): XmlService.Element[];
    getChildren(name: string, namespace: XmlService.Namespace): XmlService.Element[];
    getContent(index: number): XmlService.Content;
    getContentSize(): number;
    getDescendants(): XmlService.Content[];
    getDocument(): XmlService.Document;
    getName(): string;
    getNamespace(): XmlService.Namespace;
    getNamespace(prefix: string): XmlService.Namespace;
    getParentElement(): XmlService.Element;
    getQualifiedName(): string;
    getText(): string;
    getValue(): string;
    isAncestorOf(other: XmlService.Element): boolean;
    isRootElement(): boolean;
    removeAttribute(attributeName: string): boolean;
    removeAttribute(attributeName: string, namespace: XmlService.Namespace): boolean;
    removeAttribute(attribute: XmlService.Attribute): boolean;
    removeContent(): XmlService.Content[];
    removeContent(index: number): XmlService.Content;
    removeContent(content: XmlService.Content): boolean;
    setAttribute(name: string, value: string): XmlService.Element;
    setAttribute(name: string, value: string, namespace: XmlService.Namespace): XmlService.Element;
    setAttribute(attribute: XmlService.Attribute): XmlService.Element;
    setName(name: string): XmlService.Element;
    setNamespace(namespace: XmlService.Namespace): XmlService.Element;
    setText(text: string): XmlService.Element;

  }


  export interface EntityRef {

    detach(): XmlService.Content;
    getName(): string;
    getParentElement(): XmlService.Element;
    getPublicId(): string;
    getSystemId(): string;
    getValue(): string;
    setName(name: string): XmlService.EntityRef;
    setPublicId(id: string): XmlService.EntityRef;
    setSystemId(id: string): XmlService.EntityRef;

  }


  export interface Format {

    format(document: XmlService.Document): string;
    format(element: XmlService.Element): string;
    setEncoding(encoding: string): XmlService.Format;
    setIndent(indent: string): XmlService.Format;
    setLineSeparator(separator: string): XmlService.Format;
    setOmitDeclaration(omitDeclaration: boolean): XmlService.Format;
    setOmitEncoding(omitEncoding: boolean): XmlService.Format;

  }


  export interface Namespace {

    getPrefix(): string;
    getURI(): string;

  }


  export interface ProcessingInstruction {

    detach(): XmlService.Content;
    getData(): string;
    getParentElement(): XmlService.Element;
    getTarget(): string;
    getValue(): string;

  }


  export interface Text {

    append(text: string): XmlService.Text;
    detach(): XmlService.Content;
    getParentElement(): XmlService.Element;
    getText(): string;
    getValue(): string;
    setText(text: string): XmlService.Text;

  }


}