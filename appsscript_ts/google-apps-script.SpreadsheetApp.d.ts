/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: SpreadsheetApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class SpreadsheetApp {
  static create(name: string): SpreadsheetApp.Spreadsheet;
  static create(name: string, rows: number, columns: number): SpreadsheetApp.Spreadsheet;
  static flush(): void;
  static getActive(): SpreadsheetApp.Spreadsheet;
  static getActiveRange(): SpreadsheetApp.Range;
  static getActiveSheet(): SpreadsheetApp.Sheet;
  static getActiveSpreadsheet(): SpreadsheetApp.Spreadsheet;
  static getUi(): CommonModule.Ui;
  static newDataValidation(): SpreadsheetApp.DataValidationBuilder;
  static open(file: DriveApp.File): SpreadsheetApp.Spreadsheet;
  static openById(id: string): SpreadsheetApp.Spreadsheet;
  static openByUrl(url: string): SpreadsheetApp.Spreadsheet;
  static setActiveRange(range: SpreadsheetApp.Range): SpreadsheetApp.Range;
  static setActiveSheet(sheet: SpreadsheetApp.Sheet): SpreadsheetApp.Sheet;
  static setActiveSpreadsheet(newActiveSpreadsheet: SpreadsheetApp.Spreadsheet): void;
}

declare namespace SpreadsheetApp {

  export enum BorderStyle {

    DASHED,
    DOTTED,
    SOLID

  }


  export interface ContainerInfo {

    getAnchorColumn(): number;
    getAnchorRow(): number;
    getOffsetX(): number;
    getOffsetY(): number;

  }


  export interface DataValidation {

    copy(): SpreadsheetApp.DataValidationBuilder;
    getAllowInvalid(): boolean;
    getCriteriaType(): SpreadsheetApp.DataValidationCriteria;
    getCriteriaValues(): any[];
    getHelpText(): string;

  }


  export interface DataValidationBuilder {

    build(): SpreadsheetApp.DataValidation;
    copy(): SpreadsheetApp.DataValidationBuilder;
    getAllowInvalid(): boolean;
    getCriteriaType(): SpreadsheetApp.DataValidationCriteria;
    getCriteriaValues(): any[];
    getHelpText(): string;
    requireDate(): SpreadsheetApp.DataValidationBuilder;
    requireDateAfter(date: Date): SpreadsheetApp.DataValidationBuilder;
    requireDateBefore(date: Date): SpreadsheetApp.DataValidationBuilder;
    requireDateBetween(start: Date, end: Date): SpreadsheetApp.DataValidationBuilder;
    requireDateEqualTo(date: Date): SpreadsheetApp.DataValidationBuilder;
    requireDateNotBetween(start: Date, end: Date): SpreadsheetApp.DataValidationBuilder;
    requireDateOnOrAfter(date: Date): SpreadsheetApp.DataValidationBuilder;
    requireDateOnOrBefore(date: Date): SpreadsheetApp.DataValidationBuilder;
    requireFormulaSatisfied(formula: string): SpreadsheetApp.DataValidationBuilder;
    requireNumberBetween(start: number, end: number): SpreadsheetApp.DataValidationBuilder;
    requireNumberEqualTo(number: number): SpreadsheetApp.DataValidationBuilder;
    requireNumberGreaterThan(number: number): SpreadsheetApp.DataValidationBuilder;
    requireNumberGreaterThanOrEqualTo(number: number): SpreadsheetApp.DataValidationBuilder;
    requireNumberLessThan(number: number): SpreadsheetApp.DataValidationBuilder;
    requireNumberLessThanOrEqualTo(number: number): SpreadsheetApp.DataValidationBuilder;
    requireNumberNotBetween(start: number, end: number): SpreadsheetApp.DataValidationBuilder;
    requireNumberNotEqualTo(number: number): SpreadsheetApp.DataValidationBuilder;
    requireTextContains(text: string): SpreadsheetApp.DataValidationBuilder;
    requireTextDoesNotContain(text: string): SpreadsheetApp.DataValidationBuilder;
    requireTextEqualTo(text: string): SpreadsheetApp.DataValidationBuilder;
    requireTextIsEmail(): SpreadsheetApp.DataValidationBuilder;
    requireTextIsUrl(): SpreadsheetApp.DataValidationBuilder;
    requireValueInList(values: string[]): SpreadsheetApp.DataValidationBuilder;
    requireValueInList(values: string[], showDropdown: boolean): SpreadsheetApp.DataValidationBuilder;
    requireValueInRange(range: SpreadsheetApp.Range): SpreadsheetApp.DataValidationBuilder;
    requireValueInRange(range: SpreadsheetApp.Range, showDropdown: boolean): SpreadsheetApp.DataValidationBuilder;
    setAllowInvalid(allowInvalidData: boolean): SpreadsheetApp.DataValidationBuilder;
    setHelpText(helpText: string): SpreadsheetApp.DataValidationBuilder;
    withCriteria(criteria: SpreadsheetApp.DataValidationCriteria, args: any[]): SpreadsheetApp.DataValidationBuilder;

  }


  export enum DataValidationCriteria {

    CUSTOM_FORMULA,
    DATE_AFTER,
    DATE_BEFORE,
    DATE_BETWEEN,
    DATE_EQUAL_TO,
    DATE_IS_VALID_DATE,
    DATE_NOT_BETWEEN,
    DATE_ON_OR_AFTER,
    DATE_ON_OR_BEFORE,
    NUMBER_BETWEEN,
    NUMBER_EQUAL_TO,
    NUMBER_GREATER_THAN,
    NUMBER_GREATER_THAN_OR_EQUAL_TO,
    NUMBER_LESS_THAN,
    NUMBER_LESS_THAN_OR_EQUAL_TO,
    NUMBER_NOT_BETWEEN,
    NUMBER_NOT_EQUAL_TO,
    TEXT_CONTAINS,
    TEXT_DOES_NOT_CONTAIN,
    TEXT_EQUAL_TO,
    TEXT_IS_VALID_EMAIL,
    TEXT_IS_VALID_URL,
    VALUE_IN_LIST,
    VALUE_IN_RANGE

  }


  export interface EmbeddedAreaChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    reverseCategories(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setBackgroundColor(cssValue: string): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setColors(cssValues: string[]): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setLegendPosition(position: Charts.Position): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPointStyle(style: Charts.PointStyle): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    setRange(start: number, end: number): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setStacked(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setTitle(chartTitle: string): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setXAxisTitle(title: string): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setYAxisTitle(title: string): SpreadsheetApp.EmbeddedAreaChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedAreaChartBuilder;
    useLogScale(): SpreadsheetApp.EmbeddedAreaChartBuilder;

  }


  export interface EmbeddedBarChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    reverseCategories(): SpreadsheetApp.EmbeddedBarChartBuilder;
    reverseDirection(): SpreadsheetApp.EmbeddedBarChartBuilder;
    setBackgroundColor(cssValue: string): SpreadsheetApp.EmbeddedBarChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setColors(cssValues: string[]): SpreadsheetApp.EmbeddedBarChartBuilder;
    setLegendPosition(position: Charts.Position): SpreadsheetApp.EmbeddedBarChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedBarChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    setRange(start: number, end: number): SpreadsheetApp.EmbeddedBarChartBuilder;
    setStacked(): SpreadsheetApp.EmbeddedBarChartBuilder;
    setTitle(chartTitle: string): SpreadsheetApp.EmbeddedBarChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedBarChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedBarChartBuilder;
    setXAxisTitle(title: string): SpreadsheetApp.EmbeddedBarChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedBarChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedBarChartBuilder;
    setYAxisTitle(title: string): SpreadsheetApp.EmbeddedBarChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedBarChartBuilder;
    useLogScale(): SpreadsheetApp.EmbeddedBarChartBuilder;

  }


  export interface EmbeddedChart {

    getAs(contentType: string): CommonModule.Blob;
    getBlob(): CommonModule.Blob;
    getContainerInfo(): SpreadsheetApp.ContainerInfo;
    getId(): string;
    getOptions(): Charts.ChartOptions;
    getRanges(): SpreadsheetApp.Range[];
    getType(): string;
    modify(): SpreadsheetApp.EmbeddedChartBuilder;
    setId(id: string): Charts.Chart;

  }


  export interface EmbeddedChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    asComboChart(): SpreadsheetApp.EmbeddedComboChartBuilder;
    asHistogramChart(): SpreadsheetApp.EmbeddedHistogramChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): SpreadsheetApp.EmbeddedChartBuilder;

  }


  export interface EmbeddedColumnChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    reverseCategories(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setBackgroundColor(cssValue: string): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setColors(cssValues: string[]): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setLegendPosition(position: Charts.Position): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    setRange(start: number, end: number): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setStacked(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setTitle(chartTitle: string): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setXAxisTitle(title: string): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setYAxisTitle(title: string): SpreadsheetApp.EmbeddedColumnChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedColumnChartBuilder;
    useLogScale(): SpreadsheetApp.EmbeddedColumnChartBuilder;

  }


  export interface EmbeddedLineChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    reverseCategories(): SpreadsheetApp.EmbeddedLineChartBuilder;
    setBackgroundColor(cssValue: string): SpreadsheetApp.EmbeddedLineChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setColors(cssValues: string[]): SpreadsheetApp.EmbeddedLineChartBuilder;
    setCurveStyle(style: Charts.CurveStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    setLegendPosition(position: Charts.Position): SpreadsheetApp.EmbeddedLineChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPointStyle(style: Charts.PointStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    setRange(start: number, end: number): SpreadsheetApp.EmbeddedLineChartBuilder;
    setTitle(chartTitle: string): SpreadsheetApp.EmbeddedLineChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    setXAxisTitle(title: string): SpreadsheetApp.EmbeddedLineChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    setYAxisTitle(title: string): SpreadsheetApp.EmbeddedLineChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedLineChartBuilder;
    useLogScale(): SpreadsheetApp.EmbeddedLineChartBuilder;

  }


  export interface EmbeddedPieChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    reverseCategories(): SpreadsheetApp.EmbeddedPieChartBuilder;
    set3D(): SpreadsheetApp.EmbeddedPieChartBuilder;
    setBackgroundColor(cssValue: string): SpreadsheetApp.EmbeddedPieChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setColors(cssValues: string[]): SpreadsheetApp.EmbeddedPieChartBuilder;
    setLegendPosition(position: Charts.Position): SpreadsheetApp.EmbeddedPieChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedPieChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    setTitle(chartTitle: string): SpreadsheetApp.EmbeddedPieChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedPieChartBuilder;

  }


  export interface EmbeddedScatterChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    setBackgroundColor(cssValue: string): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setColors(cssValues: string[]): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setLegendPosition(position: Charts.Position): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPointStyle(style: Charts.PointStyle): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    setTitle(chartTitle: string): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setXAxisLogScale(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setXAxisRange(start: number, end: number): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setXAxisTitle(title: string): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setYAxisLogScale(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setYAxisRange(start: number, end: number): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setYAxisTitle(title: string): SpreadsheetApp.EmbeddedScatterChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): SpreadsheetApp.EmbeddedScatterChartBuilder;

  }


  export interface EmbeddedTableChartBuilder {

    addRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    asAreaChart(): SpreadsheetApp.EmbeddedAreaChartBuilder;
    asBarChart(): SpreadsheetApp.EmbeddedBarChartBuilder;
    asColumnChart(): SpreadsheetApp.EmbeddedColumnChartBuilder;
    asLineChart(): SpreadsheetApp.EmbeddedLineChartBuilder;
    asPieChart(): SpreadsheetApp.EmbeddedPieChartBuilder;
    asScatterChart(): SpreadsheetApp.EmbeddedScatterChartBuilder;
    asTableChart(): SpreadsheetApp.EmbeddedTableChartBuilder;
    build(): SpreadsheetApp.EmbeddedChart;
    enablePaging(enablePaging: boolean): SpreadsheetApp.EmbeddedTableChartBuilder;
    enablePaging(pageSize: number): SpreadsheetApp.EmbeddedTableChartBuilder;
    enablePaging(pageSize: number, startPage: number): SpreadsheetApp.EmbeddedTableChartBuilder;
    enableRtlTable(rtlEnabled: boolean): SpreadsheetApp.EmbeddedTableChartBuilder;
    enableSorting(enableSorting: boolean): SpreadsheetApp.EmbeddedTableChartBuilder;
    getChartType(): Charts.ChartType;
    getContainer(): SpreadsheetApp.ContainerInfo;
    getRanges(): SpreadsheetApp.Range[];
    removeRange(range: SpreadsheetApp.Range): SpreadsheetApp.EmbeddedChartBuilder;
    setChartType(type: Charts.ChartType): SpreadsheetApp.EmbeddedChartBuilder;
    setFirstRowNumber(number: number): SpreadsheetApp.EmbeddedTableChartBuilder;
    setInitialSortingAscending(column: number): SpreadsheetApp.EmbeddedTableChartBuilder;
    setInitialSortingDescending(column: number): SpreadsheetApp.EmbeddedTableChartBuilder;
    setOption(option: string, value: any): SpreadsheetApp.EmbeddedChartBuilder;
    setPosition(anchorRowPos: number, anchorColPos: number, offsetX: number, offsetY: number): SpreadsheetApp.EmbeddedChartBuilder;
    showRowNumberColumn(showRowNumber: boolean): SpreadsheetApp.EmbeddedTableChartBuilder;
    useAlternatingRowStyle(alternate: boolean): SpreadsheetApp.EmbeddedTableChartBuilder;

  }


  export interface NamedRange {

    getName(): string;
    getRange(): SpreadsheetApp.Range;
    remove(): void;
    setName(name: string): SpreadsheetApp.NamedRange;
    setRange(range: SpreadsheetApp.Range): SpreadsheetApp.NamedRange;

  }


  export interface PageProtection {

    addUser(email: string): void;
    getUsers(): string[];
    isProtected(): boolean;
    removeUser(user: string): void;
    setProtected(protection: boolean): void;

  }


  export interface Protection {

    addEditor(emailAddress: string): SpreadsheetApp.Protection;
    addEditor(user: CommonModule.User): SpreadsheetApp.Protection;
    addEditors(emailAddresses: string[]): SpreadsheetApp.Protection;
    canDomainEdit(): boolean;
    canEdit(): boolean;
    getDescription(): string;
    getEditors(): CommonModule.User[];
    getProtectionType(): SpreadsheetApp.ProtectionType;
    getRange(): SpreadsheetApp.Range;
    getRangeName(): string;
    getUnprotectedRanges(): SpreadsheetApp.Range[];
    isWarningOnly(): boolean;
    remove(): void;
    removeEditor(emailAddress: string): SpreadsheetApp.Protection;
    removeEditor(user: CommonModule.User): SpreadsheetApp.Protection;
    removeEditors(emailAddresses: string[]): SpreadsheetApp.Protection;
    setDescription(description: string): SpreadsheetApp.Protection;
    setDomainEdit(editable: boolean): SpreadsheetApp.Protection;
    setNamedRange(namedRange: SpreadsheetApp.NamedRange): SpreadsheetApp.Protection;
    setRange(range: SpreadsheetApp.Range): SpreadsheetApp.Protection;
    setRangeName(rangeName: string): SpreadsheetApp.Protection;
    setUnprotectedRanges(ranges: SpreadsheetApp.Range[]): SpreadsheetApp.Protection;
    setWarningOnly(warningOnly: boolean): SpreadsheetApp.Protection;

  }


  export enum ProtectionType {

    RANGE,
    SHEET

  }


  export interface Range {

    activate(): SpreadsheetApp.Range;
    breakApart(): SpreadsheetApp.Range;
    canEdit(): boolean;
    clear(): SpreadsheetApp.Range;
    clear(options: any): SpreadsheetApp.Range;
    clearContent(): SpreadsheetApp.Range;
    clearDataValidations(): SpreadsheetApp.Range;
    clearFormat(): SpreadsheetApp.Range;
    clearNote(): SpreadsheetApp.Range;
    copyFormatToRange(gridId: number, column: number, columnEnd: number, row: number, rowEnd: number): void;
    copyFormatToRange(sheet: SpreadsheetApp.Sheet, column: number, columnEnd: number, row: number, rowEnd: number): void;
    copyTo(destination: SpreadsheetApp.Range): void;
    copyTo(destination: SpreadsheetApp.Range, options: any): void;
    copyValuesToRange(gridId: number, column: number, columnEnd: number, row: number, rowEnd: number): void;
    copyValuesToRange(sheet: SpreadsheetApp.Sheet, column: number, columnEnd: number, row: number, rowEnd: number): void;
    getA1Notation(): string;
    getBackground(): string;
    getBackgrounds(): string[][];
    getCell(row: number, column: number): SpreadsheetApp.Range;
    getColumn(): number;
    getDataSourceUrl(): string;
    getDataTable(): CommonModule.DataTable;
    getDataTable(firstRowIsHeader: boolean): CommonModule.DataTable;
    getDataValidation(): SpreadsheetApp.DataValidation;
    getDataValidations(): SpreadsheetApp.DataValidation[][];
    getDisplayValue(): string;
    getDisplayValues(): string[][];
    getFontColor(): string;
    getFontColors(): string[][];
    getFontFamilies(): string[][];
    getFontFamily(): string;
    getFontLine(): string;
    getFontLines(): string[][];
    getFontSize(): number;
    getFontSizes(): number[][];
    getFontStyle(): string;
    getFontStyles(): string[][];
    getFontWeight(): string;
    getFontWeights(): string[][];
    getFormula(): string;
    getFormulaR1C1(): string;
    getFormulas(): string[][];
    getFormulasR1C1(): string[][];
    getGridId(): number;
    getHeight(): number;
    getHorizontalAlignment(): string;
    getHorizontalAlignments(): string[][];
    getLastColumn(): number;
    getLastRow(): number;
    getNote(): string;
    getNotes(): string[][];
    getNumColumns(): number;
    getNumRows(): number;
    getNumberFormat(): string;
    getNumberFormats(): string[][];
    getRow(): number;
    getRowIndex(): number;
    getSheet(): SpreadsheetApp.Sheet;
    getValue(): any;
    getValues(): Object[][];
    getVerticalAlignment(): string;
    getVerticalAlignments(): string[][];
    getWidth(): number;
    getWrap(): boolean;
    getWraps(): boolean[][];
    isBlank(): boolean;
    isEndColumnBounded(): boolean;
    isEndRowBounded(): boolean;
    isStartColumnBounded(): boolean;
    isStartRowBounded(): boolean;
    merge(): SpreadsheetApp.Range;
    mergeAcross(): SpreadsheetApp.Range;
    mergeVertically(): SpreadsheetApp.Range;
    moveTo(target: SpreadsheetApp.Range): void;
    offset(rowOffset: number, columnOffset: number): SpreadsheetApp.Range;
    offset(rowOffset: number, columnOffset: number, numRows: number): SpreadsheetApp.Range;
    offset(rowOffset: number, columnOffset: number, numRows: number, numColumns: number): SpreadsheetApp.Range;
    protect(): SpreadsheetApp.Protection;
    setBackground(color: string): SpreadsheetApp.Range;
    setBackgroundRGB(red: number, green: number, blue: number): SpreadsheetApp.Range;
    setBackgrounds(color: string[][]): SpreadsheetApp.Range;
    setBorder(top: boolean, left: boolean, bottom: boolean, right: boolean, vertical: boolean, horizontal: boolean): SpreadsheetApp.Range;
    setBorder(top: boolean, left: boolean, bottom: boolean, right: boolean, vertical: boolean, horizontal: boolean, color: string, style: SpreadsheetApp.BorderStyle): SpreadsheetApp.Range;
    setDataValidation(rule: SpreadsheetApp.DataValidation): SpreadsheetApp.Range;
    setDataValidations(rules: SpreadsheetApp.DataValidation[][]): SpreadsheetApp.Range;
    setFontColor(color: string): SpreadsheetApp.Range;
    setFontColors(colors: Object[][]): SpreadsheetApp.Range;
    setFontFamilies(fontFamilies: Object[][]): SpreadsheetApp.Range;
    setFontFamily(fontFamily: string): SpreadsheetApp.Range;
    setFontLine(fontLine: string): SpreadsheetApp.Range;
    setFontLines(fontLines: Object[][]): SpreadsheetApp.Range;
    setFontSize(size: number): SpreadsheetApp.Range;
    setFontSizes(sizes: Object[][]): SpreadsheetApp.Range;
    setFontStyle(fontStyle: string): SpreadsheetApp.Range;
    setFontStyles(fontStyles: Object[][]): SpreadsheetApp.Range;
    setFontWeight(fontWeight: string): SpreadsheetApp.Range;
    setFontWeights(fontWeights: Object[][]): SpreadsheetApp.Range;
    setFormula(formula: string): SpreadsheetApp.Range;
    setFormulaR1C1(formula: string): SpreadsheetApp.Range;
    setFormulas(formulas: string[][]): SpreadsheetApp.Range;
    setFormulasR1C1(formulas: string[][]): SpreadsheetApp.Range;
    setHorizontalAlignment(alignment: string): SpreadsheetApp.Range;
    setHorizontalAlignments(alignments: Object[][]): SpreadsheetApp.Range;
    setNote(note: string): SpreadsheetApp.Range;
    setNotes(notes: Object[][]): SpreadsheetApp.Range;
    setNumberFormat(numberFormat: string): SpreadsheetApp.Range;
    setNumberFormats(numberFormats: Object[][]): SpreadsheetApp.Range;
    setValue(value: any): SpreadsheetApp.Range;
    setValues(values: Object[][]): SpreadsheetApp.Range;
    setVerticalAlignment(alignment: string): SpreadsheetApp.Range;
    setVerticalAlignments(alignments: Object[][]): SpreadsheetApp.Range;
    setWrap(isWrapEnabled: boolean): SpreadsheetApp.Range;
    setWraps(isWrapEnabled: Object[][]): SpreadsheetApp.Range;
    sort(sortSpecObj: any): SpreadsheetApp.Range;

  }


  export interface Sheet {

    activate(): SpreadsheetApp.Sheet;
    appendRow(rowContents: any[]): SpreadsheetApp.Sheet;
    autoResizeColumn(columnPosition: number): SpreadsheetApp.Sheet;
    clear(): SpreadsheetApp.Sheet;
    clear(options: any): SpreadsheetApp.Sheet;
    clearContents(): SpreadsheetApp.Sheet;
    clearFormats(): SpreadsheetApp.Sheet;
    clearNotes(): SpreadsheetApp.Sheet;
    copyTo(spreadsheet: SpreadsheetApp.Spreadsheet): SpreadsheetApp.Sheet;
    deleteColumn(columnPosition: number): SpreadsheetApp.Sheet;
    deleteColumns(columnPosition: number, howMany: number): void;
    deleteRow(rowPosition: number): SpreadsheetApp.Sheet;
    deleteRows(rowPosition: number, howMany: number): void;
    getActiveCell(): SpreadsheetApp.Range;
    getActiveRange(): SpreadsheetApp.Range;
    getCharts(): SpreadsheetApp.EmbeddedChart[];
    getColumnWidth(columnPosition: number): number;
    getDataRange(): SpreadsheetApp.Range;
    getFrozenColumns(): number;
    getFrozenRows(): number;
    getIndex(): number;
    getLastColumn(): number;
    getLastRow(): number;
    getMaxColumns(): number;
    getMaxRows(): number;
    getName(): string;
    getNamedRanges(): SpreadsheetApp.NamedRange[];
    getParent(): SpreadsheetApp.Spreadsheet;
    getProtections(type: SpreadsheetApp.ProtectionType): SpreadsheetApp.Protection[];
    getRange(row: number, column: number): SpreadsheetApp.Range;
    getRange(row: number, column: number, numRows: number): SpreadsheetApp.Range;
    getRange(row: number, column: number, numRows: number, numColumns: number): SpreadsheetApp.Range;
    getRange(a1Notation: string): SpreadsheetApp.Range;
    getRowHeight(rowPosition: number): number;
    getSheetId(): number;
    getSheetName(): string;
    getSheetProtection(): SpreadsheetApp.PageProtection;
    getSheetValues(startRow: number, startColumn: number, numRows: number, numColumns: number): Object[][];
    getTabColor(): string;
    hideColumn(column: SpreadsheetApp.Range): void;
    hideColumns(columnIndex: number): void;
    hideColumns(columnIndex: number, numColumns: number): void;
    hideRow(row: SpreadsheetApp.Range): void;
    hideRows(rowIndex: number): void;
    hideRows(rowIndex: number, numRows: number): void;
    hideSheet(): SpreadsheetApp.Sheet;
    insertChart(chart: SpreadsheetApp.EmbeddedChart): void;
    insertColumnAfter(afterPosition: number): SpreadsheetApp.Sheet;
    insertColumnBefore(beforePosition: number): SpreadsheetApp.Sheet;
    insertColumns(columnIndex: number): void;
    insertColumns(columnIndex: number, numColumns: number): void;
    insertColumnsAfter(afterPosition: number, howMany: number): SpreadsheetApp.Sheet;
    insertColumnsBefore(beforePosition: number, howMany: number): SpreadsheetApp.Sheet;
    insertImage(blob: CommonModule.Blob, column: number, row: number): void;
    insertImage(blob: CommonModule.Blob, column: number, row: number, offsetX: number, offsetY: number): void;
    insertImage(url: string, column: number, row: number): void;
    insertImage(url: string, column: number, row: number, offsetX: number, offsetY: number): void;
    insertRowAfter(afterPosition: number): SpreadsheetApp.Sheet;
    insertRowBefore(beforePosition: number): SpreadsheetApp.Sheet;
    insertRows(rowIndex: number): void;
    insertRows(rowIndex: number, numRows: number): void;
    insertRowsAfter(afterPosition: number, howMany: number): SpreadsheetApp.Sheet;
    insertRowsBefore(beforePosition: number, howMany: number): SpreadsheetApp.Sheet;
    isSheetHidden(): boolean;
    newChart(): SpreadsheetApp.EmbeddedChartBuilder;
    protect(): SpreadsheetApp.Protection;
    removeChart(chart: SpreadsheetApp.EmbeddedChart): void;
    setActiveRange(range: SpreadsheetApp.Range): SpreadsheetApp.Range;
    setActiveSelection(range: SpreadsheetApp.Range): SpreadsheetApp.Range;
    setActiveSelection(a1Notation: string): SpreadsheetApp.Range;
    setColumnWidth(columnPosition: number, width: number): SpreadsheetApp.Sheet;
    setFrozenColumns(columns: number): void;
    setFrozenRows(rows: number): void;
    setName(name: string): SpreadsheetApp.Sheet;
    setRowHeight(rowPosition: number, height: number): SpreadsheetApp.Sheet;
    setSheetProtection(permissions: SpreadsheetApp.PageProtection): void;
    setTabColor(color: string): SpreadsheetApp.Sheet;
    showColumns(columnIndex: number): void;
    showColumns(columnIndex: number, numColumns: number): void;
    showRows(rowIndex: number): void;
    showRows(rowIndex: number, numRows: number): void;
    showSheet(): SpreadsheetApp.Sheet;
    sort(columnPosition: number): SpreadsheetApp.Sheet;
    sort(columnPosition: number, ascending: boolean): SpreadsheetApp.Sheet;
    unhideColumn(column: SpreadsheetApp.Range): void;
    unhideRow(row: SpreadsheetApp.Range): void;
    updateChart(chart: SpreadsheetApp.EmbeddedChart): void;

  }


  export interface Spreadsheet {

    addEditor(emailAddress: string): SpreadsheetApp.Spreadsheet;
    addEditor(user: CommonModule.User): SpreadsheetApp.Spreadsheet;
    addEditors(emailAddresses: string[]): SpreadsheetApp.Spreadsheet;
    addMenu(name: string, subMenus: any[]): void;
    addViewer(emailAddress: string): SpreadsheetApp.Spreadsheet;
    addViewer(user: CommonModule.User): SpreadsheetApp.Spreadsheet;
    addViewers(emailAddresses: string[]): SpreadsheetApp.Spreadsheet;
    appendRow(rowContents: any[]): SpreadsheetApp.Sheet;
    autoResizeColumn(columnPosition: number): SpreadsheetApp.Sheet;
    copy(name: string): SpreadsheetApp.Spreadsheet;
    deleteActiveSheet(): SpreadsheetApp.Sheet;
    deleteColumn(columnPosition: number): SpreadsheetApp.Sheet;
    deleteColumns(columnPosition: number, howMany: number): void;
    deleteRow(rowPosition: number): SpreadsheetApp.Sheet;
    deleteRows(rowPosition: number, howMany: number): void;
    deleteSheet(sheet: SpreadsheetApp.Sheet): void;
    duplicateActiveSheet(): SpreadsheetApp.Sheet;
    getActiveCell(): SpreadsheetApp.Range;
    getActiveRange(): SpreadsheetApp.Range;
    getActiveSheet(): SpreadsheetApp.Sheet;
    getAs(contentType: string): CommonModule.Blob;
    getBlob(): CommonModule.Blob;
    getColumnWidth(columnPosition: number): number;
    getDataRange(): SpreadsheetApp.Range;
    getEditors(): CommonModule.User[];
    getFormUrl(): string;
    getFrozenColumns(): number;
    getFrozenRows(): number;
    getId(): string;
    getLastColumn(): number;
    getLastRow(): number;
    getName(): string;
    getNamedRanges(): SpreadsheetApp.NamedRange[];
    getNumSheets(): number;
    getOwner(): CommonModule.User;
    getProtections(type: SpreadsheetApp.ProtectionType): SpreadsheetApp.Protection[];
    getRange(a1Notation: string): SpreadsheetApp.Range;
    getRangeByName(name: string): SpreadsheetApp.Range;
    getRowHeight(rowPosition: number): number;
    getSheetByName(name: string): SpreadsheetApp.Sheet;
    getSheetId(): number;
    getSheetName(): string;
    getSheetProtection(): SpreadsheetApp.PageProtection;
    getSheetValues(startRow: number, startColumn: number, numRows: number, numColumns: number): Object[][];
    getSheets(): SpreadsheetApp.Sheet[];
    getSpreadsheetLocale(): string;
    getSpreadsheetTimeZone(): string;
    getUrl(): string;
    getViewers(): CommonModule.User[];
    hideColumn(column: SpreadsheetApp.Range): void;
    hideRow(row: SpreadsheetApp.Range): void;
    insertColumnAfter(afterPosition: number): SpreadsheetApp.Sheet;
    insertColumnBefore(beforePosition: number): SpreadsheetApp.Sheet;
    insertColumnsAfter(afterPosition: number, howMany: number): SpreadsheetApp.Sheet;
    insertColumnsBefore(beforePosition: number, howMany: number): SpreadsheetApp.Sheet;
    insertImage(blob: CommonModule.Blob, column: number, row: number): void;
    insertImage(blob: CommonModule.Blob, column: number, row: number, offsetX: number, offsetY: number): void;
    insertImage(url: string, column: number, row: number): void;
    insertImage(url: string, column: number, row: number, offsetX: number, offsetY: number): void;
    insertRowAfter(afterPosition: number): SpreadsheetApp.Sheet;
    insertRowBefore(beforePosition: number): SpreadsheetApp.Sheet;
    insertRowsAfter(afterPosition: number, howMany: number): SpreadsheetApp.Sheet;
    insertRowsBefore(beforePosition: number, howMany: number): SpreadsheetApp.Sheet;
    insertSheet(): SpreadsheetApp.Sheet;
    insertSheet(sheetIndex: number): SpreadsheetApp.Sheet;
    insertSheet(sheetIndex: number, options: any): SpreadsheetApp.Sheet;
    insertSheet(options: any): SpreadsheetApp.Sheet;
    insertSheet(sheetName: string): SpreadsheetApp.Sheet;
    insertSheet(sheetName: string, sheetIndex: number): SpreadsheetApp.Sheet;
    insertSheet(sheetName: string, sheetIndex: number, options: any): SpreadsheetApp.Sheet;
    insertSheet(sheetName: string, options: any): SpreadsheetApp.Sheet;
    isAnonymousView(): boolean;
    isAnonymousWrite(): boolean;
    moveActiveSheet(pos: number): void;
    removeEditor(emailAddress: string): SpreadsheetApp.Spreadsheet;
    removeEditor(user: CommonModule.User): SpreadsheetApp.Spreadsheet;
    removeMenu(name: string): void;
    removeNamedRange(name: string): void;
    removeViewer(emailAddress: string): SpreadsheetApp.Spreadsheet;
    removeViewer(user: CommonModule.User): SpreadsheetApp.Spreadsheet;
    rename(newName: string): void;
    renameActiveSheet(newName: string): void;
    setActiveRange(range: SpreadsheetApp.Range): SpreadsheetApp.Range;
    setActiveSelection(range: SpreadsheetApp.Range): SpreadsheetApp.Range;
    setActiveSelection(a1Notation: string): SpreadsheetApp.Range;
    setActiveSheet(sheet: SpreadsheetApp.Sheet): SpreadsheetApp.Sheet;
    setAnonymousAccess(anonymousReadAllowed: boolean, anonymousWriteAllowed: boolean): void;
    setColumnWidth(columnPosition: number, width: number): SpreadsheetApp.Sheet;
    setFrozenColumns(columns: number): void;
    setFrozenRows(rows: number): void;
    setNamedRange(name: string, range: SpreadsheetApp.Range): void;
    setRowHeight(rowPosition: number, height: number): SpreadsheetApp.Sheet;
    setSheetProtection(permissions: SpreadsheetApp.PageProtection): void;
    setSpreadsheetLocale(locale: string): void;
    setSpreadsheetTimeZone(timezone: string): void;
    show(userInterface: any): void;
    sort(columnPosition: number): SpreadsheetApp.Sheet;
    sort(columnPosition: number, ascending: boolean): SpreadsheetApp.Sheet;
    toast(msg: string): void;
    toast(msg: string, title: string): void;
    toast(msg: string, title: string, timeoutSeconds: number): void;
    unhideColumn(column: SpreadsheetApp.Range): void;
    unhideRow(row: SpreadsheetApp.Range): void;
    updateMenu(name: string, subMenus: any[]): void;

  }


  export interface EmbeddedComboChartBuilder {

    reverseCategories(): SpreadsheetApp.EmbeddedComboChartBuilder;
    setStacked(): SpreadsheetApp.EmbeddedComboChartBuilder;

  }


  export interface EmbeddedHistogramChartBuilder {

    reverseCategories(): SpreadsheetApp.EmbeddedHistogramChartBuilder;
    setStacked(): SpreadsheetApp.EmbeddedHistogramChartBuilder;

  }


}