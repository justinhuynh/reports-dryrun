/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: SitesApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class SitesApp {
  static copySite(domain: string, name: string, title: string, summary: string, site: SitesApp.Site): SitesApp.Site;
  static createSite(domain: string, name: string, title: string, summary: string): SitesApp.Site;
  static getActivePage(): SitesApp.Page;
  static getActiveSite(): SitesApp.Site;
  static getAllSites(domain: string): SitesApp.Site[];
  static getAllSites(domain: string, start: number, max: number): SitesApp.Site[];
  static getPageByUrl(url: string): SitesApp.Page;
  static getSite(name: string): SitesApp.Site;
  static getSite(domain: string, name: string): SitesApp.Site;
  static getSiteByUrl(url: string): SitesApp.Site;
  static getSites(): SitesApp.Site[];
  static getSites(start: number, max: number): SitesApp.Site[];
  static getSites(domain: string): SitesApp.Site[];
  static getSites(domain: string, start: number, max: number): SitesApp.Site[];
}

declare namespace SitesApp {

  export interface Attachment {

    deleteAttachment(): void;
    getAs(contentType: string): CommonModule.Blob;
    getAttachmentType(): SitesApp.AttachmentType;
    getBlob(): CommonModule.Blob;
    getContentType(): string;
    getDatePublished(): Date;
    getDescription(): string;
    getLastUpdated(): Date;
    getParent(): SitesApp.Page;
    getTitle(): string;
    getUrl(): string;
    setContentType(contentType: string): SitesApp.Attachment;
    setDescription(description: string): SitesApp.Attachment;
    setFrom(blob: CommonModule.BlobSource): SitesApp.Attachment;
    setParent(parent: SitesApp.Page): SitesApp.Attachment;
    setTitle(title: string): SitesApp.Attachment;
    setUrl(url: string): SitesApp.Attachment;

  }


  export enum AttachmentType {

    HOSTED,
    WEB

  }


  export interface Column {

    deleteColumn(): void;
    getName(): string;
    getParent(): SitesApp.Page;
    setName(name: string): SitesApp.Column;

  }


  export interface Comment {

    deleteComment(): void;
    getAuthorEmail(): string;
    getAuthorName(): string;
    getContent(): string;
    getDatePublished(): Date;
    getLastUpdated(): Date;
    getParent(): SitesApp.Page;
    setContent(content: string): SitesApp.Comment;
    setParent(parent: SitesApp.Page): SitesApp.Comment;

  }


  export interface ListItem {

    deleteListItem(): void;
    getDatePublished(): Date;
    getLastUpdated(): Date;
    getParent(): SitesApp.Page;
    getValueByIndex(index: number): string;
    getValueByName(name: string): string;
    setParent(parent: SitesApp.Page): SitesApp.ListItem;
    setValueByIndex(index: number, value: string): SitesApp.ListItem;
    setValueByName(name: string, value: string): SitesApp.ListItem;

  }


  export interface Page {

    addColumn(name: string): SitesApp.Column;
    addComment(content: string): SitesApp.Comment;
    addHostedAttachment(blob: CommonModule.BlobSource): SitesApp.Attachment;
    addHostedAttachment(blob: CommonModule.BlobSource, description: string): SitesApp.Attachment;
    addListItem(values: string[]): SitesApp.ListItem;
    addWebAttachment(title: string, description: string, url: string): SitesApp.Attachment;
    createAnnouncement(title: string, html: string): SitesApp.Page;
    createAnnouncement(title: string, html: string, asDraft: boolean): SitesApp.Page;
    createAnnouncementsPage(title: string, name: string, html: string): SitesApp.Page;
    createFileCabinetPage(title: string, name: string, html: string): SitesApp.Page;
    createListPage(title: string, name: string, html: string, columnNames: string[]): SitesApp.Page;
    createPageFromTemplate(title: string, name: string, template: SitesApp.Page): SitesApp.Page;
    createWebPage(title: string, name: string, html: string): SitesApp.Page;
    deletePage(): void;
    getAllDescendants(): SitesApp.Page[];
    getAllDescendants(options: any): SitesApp.Page[];
    getAnnouncements(): SitesApp.Page[];
    getAnnouncements(optOptions: any): SitesApp.Page[];
    getAttachments(): SitesApp.Attachment[];
    getAttachments(optOptions: any): SitesApp.Attachment[];
    getAuthors(): string[];
    getChildByName(name: string): SitesApp.Page;
    getChildren(): SitesApp.Page[];
    getChildren(options: any): SitesApp.Page[];
    getColumns(): SitesApp.Column[];
    getComments(): SitesApp.Comment[];
    getComments(optOptions: any): SitesApp.Comment[];
    getDatePublished(): Date;
    getHtmlContent(): string;
    getIsDraft(): boolean;
    getLastEdited(): Date;
    getLastUpdated(): Date;
    getListItems(): SitesApp.ListItem[];
    getListItems(optOptions: any): SitesApp.ListItem[];
    getName(): string;
    getPageName(): string;
    getPageType(): SitesApp.PageType;
    getParent(): SitesApp.Page;
    getSelfLink(): string;
    getTextContent(): string;
    getTitle(): string;
    getUrl(): string;
    isDeleted(): boolean;
    isTemplate(): boolean;
    publishAsTemplate(name: string): SitesApp.Page;
    search(query: string): SitesApp.Page[];
    search(query: string, options: any): SitesApp.Page[];
    setHtmlContent(html: string): SitesApp.Page;
    setIsDraft(draft: boolean): SitesApp.Page;
    setName(name: string): SitesApp.Page;
    setParent(parent: SitesApp.Page): SitesApp.Page;
    setTitle(title: string): SitesApp.Page;

  }


  export enum PageType {

    ANNOUNCEMENT,
    ANNOUNCEMENTS_PAGE,
    FILE_CABINET_PAGE,
    LIST_PAGE,
    WEB_PAGE

  }


  export interface Site {

    addCollaborator(email: string): SitesApp.Site;
    addCollaborator(user: CommonModule.User): SitesApp.Site;
    addEditor(emailAddress: string): SitesApp.Site;
    addEditor(user: CommonModule.User): SitesApp.Site;
    addEditors(emailAddresses: string[]): SitesApp.Site;
    addOwner(email: string): SitesApp.Site;
    addOwner(user: CommonModule.User): SitesApp.Site;
    addViewer(emailAddress: string): SitesApp.Site;
    addViewer(user: CommonModule.User): SitesApp.Site;
    addViewers(emailAddresses: string[]): SitesApp.Site;
    createAnnouncement(title: string, html: string, parent: SitesApp.Page): SitesApp.Page;
    createAnnouncementsPage(title: string, name: string, html: string): SitesApp.Page;
    createComment(inReplyTo: string, html: string, parent: SitesApp.Page): SitesApp.Comment;
    createFileCabinetPage(title: string, name: string, html: string): SitesApp.Page;
    createListItem(html: string, columnNames: string[], values: string[], parent: SitesApp.Page): SitesApp.ListItem;
    createListPage(title: string, name: string, html: string, columnNames: string[]): SitesApp.Page;
    createPageFromTemplate(title: string, name: string, template: SitesApp.Page): SitesApp.Page;
    createWebAttachment(title: string, url: string, parent: SitesApp.Page): SitesApp.Attachment;
    createWebPage(title: string, name: string, html: string): SitesApp.Page;
    deleteSite(): void;
    getAllDescendants(): SitesApp.Page[];
    getAllDescendants(options: any): SitesApp.Page[];
    getAnnouncements(): SitesApp.Page[];
    getAnnouncementsPages(): SitesApp.Page[];
    getAttachments(): SitesApp.Attachment[];
    getChildByName(name: string): SitesApp.Page;
    getChildren(): SitesApp.Page[];
    getChildren(options: any): SitesApp.Page[];
    getCollaborators(): CommonModule.User[];
    getComments(): SitesApp.Comment[];
    getEditors(): CommonModule.User[];
    getFileCabinetPages(): SitesApp.Page[];
    getListItems(): SitesApp.ListItem[];
    getListPages(): SitesApp.Page[];
    getName(): string;
    getOwners(): CommonModule.User[];
    getSelfLink(): string;
    getSiteName(): string;
    getSummary(): string;
    getTemplates(): SitesApp.Page[];
    getTheme(): string;
    getTitle(): string;
    getUrl(): string;
    getViewers(): CommonModule.User[];
    getWebAttachments(): SitesApp.Attachment[];
    getWebPages(): SitesApp.Page[];
    removeCollaborator(email: string): SitesApp.Site;
    removeCollaborator(user: CommonModule.User): SitesApp.Site;
    removeEditor(emailAddress: string): SitesApp.Site;
    removeEditor(user: CommonModule.User): SitesApp.Site;
    removeOwner(email: string): SitesApp.Site;
    removeOwner(user: CommonModule.User): SitesApp.Site;
    removeViewer(emailAddress: string): SitesApp.Site;
    removeViewer(user: CommonModule.User): SitesApp.Site;
    search(query: string): SitesApp.Page[];
    search(query: string, options: any): SitesApp.Page[];
    setSummary(summary: string): SitesApp.Site;
    setTheme(theme: string): SitesApp.Site;
    setTitle(title: string): SitesApp.Site;

  }


}