/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: Jdbc.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class Jdbc {
  static getCloudSqlConnection(url: string): Jdbc.JdbcConnection;
  static getCloudSqlConnection(url: string, info: any): Jdbc.JdbcConnection;
  static getCloudSqlConnection(url: string, userName: string, password: string): Jdbc.JdbcConnection;
  static getConnection(url: string): Jdbc.JdbcConnection;
  static getConnection(url: string, info: any): Jdbc.JdbcConnection;
  static getConnection(url: string, userName: string, password: string): Jdbc.JdbcConnection;
  static newDate(milliseconds: number): Jdbc.JdbcDate;
  static newTime(milliseconds: number): Jdbc.JdbcTime;
  static newTimestamp(milliseconds: number): Jdbc.JdbcTimestamp;
  static parseDate(date: string): Jdbc.JdbcDate;
  static parseTime(time: string): Jdbc.JdbcTime;
  static parseTimestamp(timestamp: string): Jdbc.JdbcTimestamp;
}

declare namespace Jdbc {

  export interface JdbcArray {

    free(): void;
    getArray(): any;
    getArray(index: number, count: number): any;
    getBaseType(): number;
    getBaseTypeName(): string;
    getResultSet(): Jdbc.JdbcResultSet;
    getResultSet(index: number, count: number): Jdbc.JdbcResultSet;

  }


  export interface JdbcBlob {

    free(): void;
    getAppsScriptBlob(): CommonModule.Blob;
    getAs(contentType: string): CommonModule.Blob;
    getBytes(position: number, length: number): number[];
    length(): number;
    position(pattern: number[], start: number): number;
    position(pattern: Jdbc.JdbcBlob, start: number): number;
    setBytes(position: number, blobSource: CommonModule.BlobSource): number;
    setBytes(position: number, blobSource: CommonModule.BlobSource, offset: number, length: number): number;
    setBytes(position: number, bytes: number[]): number;
    setBytes(position: number, bytes: number[], offset: number, length: number): number;
    truncate(length: number): void;

  }


  export interface JdbcCallableStatement {

    addBatch(): void;
    addBatch(sql: string): void;
    cancel(): void;
    clearBatch(): void;
    clearParameters(): void;
    clearWarnings(): void;
    close(): void;
    execute(): boolean;
    execute(sql: string): boolean;
    execute(sql: string, autoGeneratedKeys: number): boolean;
    execute(sql: string, columnIndexes: number[]): boolean;
    execute(sql: string, columnNames: string[]): boolean;
    executeBatch(): number[];
    executeQuery(): Jdbc.JdbcResultSet;
    executeQuery(sql: string): Jdbc.JdbcResultSet;
    executeUpdate(): number;
    executeUpdate(sql: string): number;
    executeUpdate(sql: string, autoGeneratedKeys: number): number;
    executeUpdate(sql: string, columnIndexes: number[]): number;
    executeUpdate(sql: string, columnNames: string[]): number;
    getArray(parameterIndex: number): Jdbc.JdbcArray;
    getArray(parameterName: string): Jdbc.JdbcArray;
    getBigDecimal(parameterIndex: number): any;
    getBigDecimal(parameterName: string): any;
    getBlob(parameterIndex: number): Jdbc.JdbcBlob;
    getBlob(parameterName: string): Jdbc.JdbcBlob;
    getBoolean(parameterIndex: number): boolean;
    getBoolean(parameterName: string): boolean;
    getByte(parameterIndex: number): number;
    getByte(parameterName: string): number;
    getBytes(parameterIndex: number): number[];
    getBytes(parameterName: string): number[];
    getClob(parameterIndex: number): Jdbc.JdbcClob;
    getClob(parameterName: string): Jdbc.JdbcClob;
    getConnection(): Jdbc.JdbcConnection;
    getDate(parameterIndex: number): Jdbc.JdbcDate;
    getDate(parameterIndex: number, timeZone: string): Jdbc.JdbcDate;
    getDate(parameterName: string): Jdbc.JdbcDate;
    getDate(parameterName: string, timeZone: string): Jdbc.JdbcDate;
    getDouble(parameterIndex: number): number;
    getDouble(parameterName: string): number;
    getFetchDirection(): number;
    getFetchSize(): number;
    getFloat(parameterIndex: number): number;
    getFloat(parameterName: string): number;
    getGeneratedKeys(): Jdbc.JdbcResultSet;
    getInt(parameterIndex: number): number;
    getInt(parameterName: string): number;
    getLong(parameterIndex: number): number;
    getLong(parameterName: string): number;
    getMaxFieldSize(): number;
    getMaxRows(): number;
    getMetaData(): Jdbc.JdbcResultSetMetaData;
    getMoreResults(): boolean;
    getMoreResults(current: number): boolean;
    getNClob(parameterIndex: number): Jdbc.JdbcClob;
    getNClob(parameterName: string): Jdbc.JdbcClob;
    getNString(parameterIndex: number): string;
    getNString(parameterName: string): string;
    getObject(parameterIndex: number): any;
    getObject(parameterName: string): any;
    getParameterMetaData(): Jdbc.JdbcParameterMetaData;
    getQueryTimeout(): number;
    getRef(parameterIndex: number): Jdbc.JdbcRef;
    getRef(parameterName: string): Jdbc.JdbcRef;
    getResultSet(): Jdbc.JdbcResultSet;
    getResultSetConcurrency(): number;
    getResultSetHoldability(): number;
    getResultSetType(): number;
    getRowId(parameterIndex: number): Jdbc.JdbcRowId;
    getRowId(parameterName: string): Jdbc.JdbcRowId;
    getSQLXML(parameterIndex: number): Jdbc.JdbcSQLXML;
    getSQLXML(parameterName: string): Jdbc.JdbcSQLXML;
    getShort(parameterIndex: number): number;
    getShort(parameterName: string): number;
    getString(parameterIndex: number): string;
    getString(parameterName: string): string;
    getTime(parameterIndex: number): Jdbc.JdbcTime;
    getTime(parameterIndex: number, timeZone: string): Jdbc.JdbcTime;
    getTime(parameterName: string): Jdbc.JdbcTime;
    getTime(parameterName: string, timeZone: string): Jdbc.JdbcTime;
    getTimestamp(parameterIndex: number): Jdbc.JdbcTimestamp;
    getTimestamp(parameterIndex: number, timeZone: string): Jdbc.JdbcTimestamp;
    getTimestamp(parameterName: string): Jdbc.JdbcTimestamp;
    getTimestamp(parameterName: string, timeZone: string): Jdbc.JdbcTimestamp;
    getURL(parameterIndex: number): string;
    getURL(parameterName: string): string;
    getUpdateCount(): number;
    getWarnings(): string[];
    isClosed(): boolean;
    isPoolable(): boolean;
    registerOutParameter(parameterIndex: number, sqlType: number): void;
    registerOutParameter(parameterIndex: number, sqlType: number, scale: number): void;
    registerOutParameter(parameterIndex: number, sqlType: number, typeName: string): void;
    registerOutParameter(parameterName: string, sqlType: number): void;
    registerOutParameter(parameterName: string, sqlType: number, scale: number): void;
    registerOutParameter(parameterName: string, sqlType: number, typeName: string): void;
    setArray(parameterIndex: number, x: Jdbc.JdbcArray): void;
    setBigDecimal(parameterIndex: number, x: any): void;
    setBigDecimal(parameterName: string, x: any): void;
    setBlob(parameterIndex: number, x: Jdbc.JdbcBlob): void;
    setBlob(parameterName: string, x: Jdbc.JdbcBlob): void;
    setBoolean(parameterIndex: number, x: boolean): void;
    setBoolean(parameterName: string, x: boolean): void;
    setByte(parameterIndex: number, x: number): void;
    setByte(parameterName: string, x: number): void;
    setBytes(parameterIndex: number, x: number[]): void;
    setBytes(parameterName: string, x: number[]): void;
    setClob(parameterIndex: number, x: Jdbc.JdbcClob): void;
    setClob(parameterName: string, x: Jdbc.JdbcClob): void;
    setCursorName(name: string): void;
    setDate(parameterIndex: number, x: Jdbc.JdbcDate): void;
    setDate(parameterIndex: number, x: Jdbc.JdbcDate, timeZone: string): void;
    setDate(parameterName: string, x: Jdbc.JdbcDate): void;
    setDate(parameterName: string, x: Jdbc.JdbcDate, timeZone: string): void;
    setDouble(parameterIndex: number, x: number): void;
    setDouble(parameterName: string, x: number): void;
    setEscapeProcessing(enable: boolean): void;
    setFetchDirection(direction: number): void;
    setFetchSize(rows: number): void;
    setFloat(parameterIndex: number, x: number): void;
    setFloat(parameterName: string, x: number): void;
    setInt(parameterIndex: number, x: number): void;
    setInt(parameterName: string, x: number): void;
    setLong(parameterIndex: number, x: number): void;
    setLong(parameterName: string, x: number): void;
    setMaxFieldSize(max: number): void;
    setMaxRows(max: number): void;
    setNClob(parameterIndex: number, x: Jdbc.JdbcClob): void;
    setNClob(parameterName: string, value: Jdbc.JdbcClob): void;
    setNString(parameterIndex: number, x: string): void;
    setNString(parameterName: string, value: string): void;
    setNull(parameterIndex: number, sqlType: number): void;
    setNull(parameterIndex: number, sqlType: number, typeName: string): void;
    setNull(parameterName: string, sqlType: number): void;
    setNull(parameterName: string, sqlType: number, typeName: string): void;
    setObject(index: number, x: any): void;
    setObject(parameterIndex: number, x: any, targetSqlType: number): void;
    setObject(parameterIndex: number, x: any, targetSqlType: number, scaleOrLength: number): void;
    setObject(parameterName: string, x: any): void;
    setObject(parameterName: string, x: any, targetSqlType: number): void;
    setObject(parameterName: string, x: any, targetSqlType: number, scale: number): void;
    setPoolable(poolable: boolean): void;
    setQueryTimeout(seconds: number): void;
    setRef(parameterIndex: number, x: Jdbc.JdbcRef): void;
    setRowId(parameterIndex: number, x: Jdbc.JdbcRowId): void;
    setRowId(parameterName: string, x: Jdbc.JdbcRowId): void;
    setSQLXML(parameterIndex: number, x: Jdbc.JdbcSQLXML): void;
    setSQLXML(parameterName: string, xmlObject: Jdbc.JdbcSQLXML): void;
    setShort(parameterIndex: number, x: number): void;
    setShort(parameterName: string, x: number): void;
    setString(parameterIndex: number, x: string): void;
    setString(parameterName: string, x: string): void;
    setTime(parameterIndex: number, x: Jdbc.JdbcTime): void;
    setTime(parameterIndex: number, x: Jdbc.JdbcTime, timeZone: string): void;
    setTime(parameterName: string, x: Jdbc.JdbcTime): void;
    setTime(parameterName: string, x: Jdbc.JdbcTime, timeZone: string): void;
    setTimestamp(parameterIndex: number, x: Jdbc.JdbcTimestamp): void;
    setTimestamp(parameterIndex: number, x: Jdbc.JdbcTimestamp, timeZone: string): void;
    setTimestamp(parameterName: string, x: Jdbc.JdbcTimestamp): void;
    setTimestamp(parameterName: string, x: Jdbc.JdbcTimestamp, timeZone: string): void;
    setURL(parameterIndex: number, x: string): void;
    setURL(parameterName: string, val: string): void;
    wasNull(): boolean;

  }


  export interface JdbcClob {

    free(): void;
    getAppsScriptBlob(): CommonModule.Blob;
    getAs(contentType: string): CommonModule.Blob;
    getSubString(position: number, length: number): string;
    length(): number;
    position(search: Jdbc.JdbcClob, start: number): number;
    position(search: string, start: number): number;
    setString(position: number, blobSource: CommonModule.BlobSource): number;
    setString(position: number, blobSource: CommonModule.BlobSource, offset: number, len: number): number;
    setString(position: number, value: string): number;
    setString(position: number, value: string, offset: number, len: number): number;
    truncate(length: number): void;

  }


  export interface JdbcConnection {

    TRANSACTION_NONE: number;
    TRANSACTION_READ_COMMITTED: number;
    TRANSACTION_READ_UNCOMMITTED: number;
    TRANSACTION_REPEATABLE_READ: number;
    TRANSACTION_SERIALIZABLE: number;

    clearWarnings(): void;
    close(): void;
    commit(): void;
    createArrayOf(typeName: string, elements: any[]): Jdbc.JdbcArray;
    createBlob(): Jdbc.JdbcBlob;
    createClob(): Jdbc.JdbcClob;
    createNClob(): Jdbc.JdbcClob;
    createSQLXML(): Jdbc.JdbcSQLXML;
    createStatement(): Jdbc.JdbcStatement;
    createStatement(resultSetType: number, resultSetConcurrency: number): Jdbc.JdbcStatement;
    createStatement(resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number): Jdbc.JdbcStatement;
    createStruct(typeName: string, attributes: any[]): Jdbc.JdbcStruct;
    getAutoCommit(): boolean;
    getCatalog(): string;
    getHoldability(): number;
    getMetaData(): Jdbc.JdbcDatabaseMetaData;
    getTransactionIsolation(): number;
    getWarnings(): string[];
    isClosed(): boolean;
    isReadOnly(): boolean;
    isValid(timeout: number): boolean;
    nativeSQL(sql: string): string;
    prepareCall(sql: string): Jdbc.JdbcCallableStatement;
    prepareCall(sql: string, resultSetType: number, resultSetConcurrency: number): Jdbc.JdbcCallableStatement;
    prepareCall(sql: string, resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number): Jdbc.JdbcCallableStatement;
    prepareStatement(sql: string): Jdbc.JdbcPreparedStatement;
    prepareStatement(sql: string, autoGeneratedKeys: number): Jdbc.JdbcPreparedStatement;
    prepareStatement(sql: string, resultSetType: number, resultSetConcurrency: number): Jdbc.JdbcPreparedStatement;
    prepareStatement(sql: string, resultSetType: number, resultSetConcurrency: number, resultSetHoldability: number): Jdbc.JdbcPreparedStatement;
    prepareStatementByIndex(sql: string, indices: number[]): Jdbc.JdbcPreparedStatement;
    prepareStatementByName(sql: string, columnNames: string[]): Jdbc.JdbcPreparedStatement;
    releaseSavepoint(savepoint: Jdbc.JdbcSavepoint): void;
    rollback(): void;
    rollback(savepoint: Jdbc.JdbcSavepoint): void;
    setAutoCommit(autoCommit: boolean): void;
    setCatalog(catalog: string): void;
    setHoldability(holdability: number): void;
    setReadOnly(readOnly: boolean): void;
    setSavepoint(): Jdbc.JdbcSavepoint;
    setSavepoint(name: string): Jdbc.JdbcSavepoint;
    setTransactionIsolation(level: number): void;

  }


  export interface JdbcDatabaseMetaData {

    attributeNoNulls: number;
    attributeNullable: number;
    attributeNullableUnknown: number;
    bestRowNotPseudo: number;
    bestRowPseudo: number;
    bestRowSession: number;
    bestRowTemporary: number;
    bestRowTransaction: number;
    bestRowUnknown: number;
    columnNoNulls: number;
    columnNullable: number;
    columnNullableUnknown: number;
    functionColumnIn: number;
    functionColumnInOut: number;
    functionColumnOut: number;
    functionColumnResult: number;
    functionColumnUnknown: number;
    functionNoNulls: number;
    functionNoTable: number;
    functionNullable: number;
    functionNullableUnknown: number;
    functionResultUnknown: number;
    functionReturn: number;
    functionReturnsTable: number;
    importedKeyCascade: number;
    importedKeyInitiallyDeferred: number;
    importedKeyInitiallyImmediate: number;
    importedKeyNoAction: number;
    importedKeyNotDeferrable: number;
    importedKeyRestrict: number;
    importedKeySetDefault: number;
    importedKeySetNull: number;
    procedureColumnIn: number;
    procedureColumnInOut: number;
    procedureColumnOut: number;
    procedureColumnResult: number;
    procedureColumnReturn: number;
    procedureColumnUnknown: number;
    procedureNoNulls: number;
    procedureNullable: number;
    procedureNullableUnknown: number;
    sqlStateSQL: number;
    sqlStateSQL99: number;
    sqlStateXOpen: number;
    tableIndexClustered: number;
    tableIndexHashed: number;
    tableIndexOther: number;
    tableIndexStatistic: number;
    typeNoNulls: number;
    typeNullable: number;
    typeNullableUnknown: number;
    typePredBasic: number;
    typePredChar: number;
    typePredNone: number;
    typeSearchable: number;
    versionColumnNotPseudo: number;
    versionColumnPseudo: number;
    versionColumnUnknown: number;

    allProceduresAreCallable(): boolean;
    allTablesAreSelectable(): boolean;
    autoCommitFailureClosesAllResultSets(): boolean;
    dataDefinitionCausesTransactionCommit(): boolean;
    dataDefinitionIgnoredInTransactions(): boolean;
    deletesAreDetected(type: number): boolean;
    doesMaxRowSizeIncludeBlobs(): boolean;
    getAttributes(catalog: string, schemaPattern: string, typeNamePattern: string, attributeNamePattern: string): Jdbc.JdbcResultSet;
    getBestRowIdentifier(catalog: string, schema: string, table: string, scope: number, nullable: boolean): Jdbc.JdbcResultSet;
    getCatalogSeparator(): string;
    getCatalogTerm(): string;
    getCatalogs(): Jdbc.JdbcResultSet;
    getClientInfoProperties(): Jdbc.JdbcResultSet;
    getColumnPrivileges(catalog: string, schema: string, table: string, columnNamePattern: string): Jdbc.JdbcResultSet;
    getColumns(catalog: string, schemaPattern: string, tableNamePattern: string, columnNamePattern: string): Jdbc.JdbcResultSet;
    getConnection(): Jdbc.JdbcConnection;
    getCrossReference(parentCatalog: string, parentSchema: string, parentTable: string, foreignCatalog: string, foreignSchema: string, foreignTable: string): Jdbc.JdbcResultSet;
    getDatabaseMajorVersion(): number;
    getDatabaseMinorVersion(): number;
    getDatabaseProductName(): string;
    getDatabaseProductVersion(): string;
    getDefaultTransactionIsolation(): number;
    getDriverMajorVersion(): number;
    getDriverMinorVersion(): number;
    getDriverName(): string;
    getDriverVersion(): string;
    getExportedKeys(catalog: string, schema: string, table: string): Jdbc.JdbcResultSet;
    getExtraNameCharacters(): string;
    getFunctionColumns(catalog: string, schemaPattern: string, functionNamePattern: string, columnNamePattern: string): Jdbc.JdbcResultSet;
    getFunctions(catalog: string, schemaPattern: string, functionNamePattern: string): Jdbc.JdbcResultSet;
    getIdentifierQuoteString(): string;
    getImportedKeys(catalog: string, schema: string, table: string): Jdbc.JdbcResultSet;
    getIndexInfo(catalog: string, schema: string, table: string, unique: boolean, approximate: boolean): Jdbc.JdbcResultSet;
    getJDBCMajorVersion(): number;
    getJDBCMinorVersion(): number;
    getMaxBinaryLiteralLength(): number;
    getMaxCatalogNameLength(): number;
    getMaxCharLiteralLength(): number;
    getMaxColumnNameLength(): number;
    getMaxColumnsInGroupBy(): number;
    getMaxColumnsInIndex(): number;
    getMaxColumnsInOrderBy(): number;
    getMaxColumnsInSelect(): number;
    getMaxColumnsInTable(): number;
    getMaxConnections(): number;
    getMaxCursorNameLength(): number;
    getMaxIndexLength(): number;
    getMaxProcedureNameLength(): number;
    getMaxRowSize(): number;
    getMaxSchemaNameLength(): number;
    getMaxStatementLength(): number;
    getMaxStatements(): number;
    getMaxTableNameLength(): number;
    getMaxTablesInSelect(): number;
    getMaxUserNameLength(): number;
    getNumericFunctions(): string;
    getPrimaryKeys(catalog: string, schema: string, table: string): Jdbc.JdbcResultSet;
    getProcedureColumns(catalog: string, schemaPattern: string, procedureNamePattern: string, columnNamePattern: string): Jdbc.JdbcResultSet;
    getProcedureTerm(): string;
    getProcedures(catalog: string, schemaPattern: string, procedureNamePattern: string): Jdbc.JdbcResultSet;
    getResultSetHoldability(): number;
    getRowIdLifetime(): number;
    getSQLKeywords(): string;
    getSQLStateType(): number;
    getSchemaTerm(): string;
    getSchemas(): Jdbc.JdbcResultSet;
    getSchemas(catalog: string, schemaPattern: string): Jdbc.JdbcResultSet;
    getSearchStringEscape(): string;
    getStringFunctions(): string;
    getSuperTables(catalog: string, schemaPattern: string, tableNamePattern: string): Jdbc.JdbcResultSet;
    getSuperTypes(catalog: string, schemaPattern: string, typeNamePattern: string): Jdbc.JdbcResultSet;
    getSystemFunctions(): string;
    getTablePrivileges(catalog: string, schemaPattern: string, tableNamePattern: string): Jdbc.JdbcResultSet;
    getTableTypes(): Jdbc.JdbcResultSet;
    getTables(catalog: string, schemaPattern: string, tableNamePattern: string, types: string[]): Jdbc.JdbcResultSet;
    getTimeDateFunctions(): string;
    getTypeInfo(): Jdbc.JdbcResultSet;
    getUDTs(catalog: string, schemaPattern: string, typeNamePattern: string, types: number[]): Jdbc.JdbcResultSet;
    getURL(): string;
    getUserName(): string;
    getVersionColumns(catalog: string, schema: string, table: string): Jdbc.JdbcResultSet;
    insertsAreDetected(type: number): boolean;
    isCatalogAtStart(): boolean;
    isReadOnly(): boolean;
    locatorsUpdateCopy(): boolean;
    nullPlusNonNullIsNull(): boolean;
    nullsAreSortedAtEnd(): boolean;
    nullsAreSortedAtStart(): boolean;
    nullsAreSortedHigh(): boolean;
    nullsAreSortedLow(): boolean;
    othersDeletesAreVisible(type: number): boolean;
    othersInsertsAreVisible(type: number): boolean;
    othersUpdatesAreVisible(type: number): boolean;
    ownDeletesAreVisible(type: number): boolean;
    ownInsertsAreVisible(type: number): boolean;
    ownUpdatesAreVisible(type: number): boolean;
    storesLowerCaseIdentifiers(): boolean;
    storesLowerCaseQuotedIdentifiers(): boolean;
    storesMixedCaseIdentifiers(): boolean;
    storesMixedCaseQuotedIdentifiers(): boolean;
    storesUpperCaseIdentifiers(): boolean;
    storesUpperCaseQuotedIdentifiers(): boolean;
    supportsANSI92EntryLevelSQL(): boolean;
    supportsANSI92FullSQL(): boolean;
    supportsANSI92IntermediateSQL(): boolean;
    supportsAlterTableWithAddColumn(): boolean;
    supportsAlterTableWithDropColumn(): boolean;
    supportsBatchUpdates(): boolean;
    supportsCatalogsInDataManipulation(): boolean;
    supportsCatalogsInIndexDefinitions(): boolean;
    supportsCatalogsInPrivilegeDefinitions(): boolean;
    supportsCatalogsInProcedureCalls(): boolean;
    supportsCatalogsInTableDefinitions(): boolean;
    supportsColumnAliasing(): boolean;
    supportsConvert(): boolean;
    supportsConvert(fromType: number, toType: number): boolean;
    supportsCoreSQLGrammar(): boolean;
    supportsCorrelatedSubqueries(): boolean;
    supportsDataDefinitionAndDataManipulationTransactions(): boolean;
    supportsDataManipulationTransactionsOnly(): boolean;
    supportsDifferentTableCorrelationNames(): boolean;
    supportsExpressionsInOrderBy(): boolean;
    supportsExtendedSQLGrammar(): boolean;
    supportsFullOuterJoins(): boolean;
    supportsGetGeneratedKeys(): boolean;
    supportsGroupBy(): boolean;
    supportsGroupByBeyondSelect(): boolean;
    supportsGroupByUnrelated(): boolean;
    supportsIntegrityEnhancementFacility(): boolean;
    supportsLikeEscapeClause(): boolean;
    supportsLimitedOuterJoins(): boolean;
    supportsMinimumSQLGrammar(): boolean;
    supportsMixedCaseIdentifiers(): boolean;
    supportsMixedCaseQuotedIdentifiers(): boolean;
    supportsMultipleOpenResults(): boolean;
    supportsMultipleResultSets(): boolean;
    supportsMultipleTransactions(): boolean;
    supportsNamedParameters(): boolean;
    supportsNonNullableColumns(): boolean;
    supportsOpenCursorsAcrossCommit(): boolean;
    supportsOpenCursorsAcrossRollback(): boolean;
    supportsOpenStatementsAcrossCommit(): boolean;
    supportsOpenStatementsAcrossRollback(): boolean;
    supportsOrderByUnrelated(): boolean;
    supportsOuterJoins(): boolean;
    supportsPositionedDelete(): boolean;
    supportsPositionedUpdate(): boolean;
    supportsResultSetConcurrency(type: number, concurrency: number): boolean;
    supportsResultSetHoldability(holdability: number): boolean;
    supportsResultSetType(type: number): boolean;
    supportsSavepoints(): boolean;
    supportsSchemasInDataManipulation(): boolean;
    supportsSchemasInIndexDefinitions(): boolean;
    supportsSchemasInPrivilegeDefinitions(): boolean;
    supportsSchemasInProcedureCalls(): boolean;
    supportsSchemasInTableDefinitions(): boolean;
    supportsSelectForUpdate(): boolean;
    supportsStatementPooling(): boolean;
    supportsStoredFunctionsUsingCallSyntax(): boolean;
    supportsStoredProcedures(): boolean;
    supportsSubqueriesInComparisons(): boolean;
    supportsSubqueriesInExists(): boolean;
    supportsSubqueriesInIns(): boolean;
    supportsSubqueriesInQuantifieds(): boolean;
    supportsTableCorrelationNames(): boolean;
    supportsTransactionIsolationLevel(level: number): boolean;
    supportsTransactions(): boolean;
    supportsUnion(): boolean;
    supportsUnionAll(): boolean;
    updatesAreDetected(type: number): boolean;
    usesLocalFilePerTable(): boolean;
    usesLocalFiles(): boolean;

  }


  export interface JdbcDate {

    after(when: Jdbc.JdbcDate): boolean;
    before(when: Jdbc.JdbcDate): boolean;
    getDate(): number;
    getMonth(): number;
    getTime(): number;
    getYear(): number;
    setDate(date: number): void;
    setMonth(month: number): void;
    setTime(milliseconds: number): void;
    setYear(year: number): void;

  }


  export interface JdbcParameterMetaData {

    parameterModeIn: number;
    parameterModeInOut: number;
    parameterModeOut: number;
    parameterModeUnknown: number;
    parameterNoNulls: number;
    parameterNullable: number;
    parameterNullableUnknown: number;

    getParameterClassName(param: number): string;
    getParameterCount(): number;
    getParameterMode(param: number): number;
    getParameterType(param: number): number;
    getParameterTypeName(param: number): string;
    getPrecision(param: number): number;
    getScale(param: number): number;
    isNullable(param: number): number;
    isSigned(param: number): boolean;

  }


  export interface JdbcPreparedStatement {

    addBatch(): void;
    addBatch(sql: string): void;
    cancel(): void;
    clearBatch(): void;
    clearParameters(): void;
    clearWarnings(): void;
    close(): void;
    execute(): boolean;
    execute(sql: string): boolean;
    execute(sql: string, autoGeneratedKeys: number): boolean;
    execute(sql: string, columnIndexes: number[]): boolean;
    execute(sql: string, columnNames: string[]): boolean;
    executeBatch(): number[];
    executeQuery(): Jdbc.JdbcResultSet;
    executeQuery(sql: string): Jdbc.JdbcResultSet;
    executeUpdate(): number;
    executeUpdate(sql: string): number;
    executeUpdate(sql: string, autoGeneratedKeys: number): number;
    executeUpdate(sql: string, columnIndexes: number[]): number;
    executeUpdate(sql: string, columnNames: string[]): number;
    getConnection(): Jdbc.JdbcConnection;
    getFetchDirection(): number;
    getFetchSize(): number;
    getGeneratedKeys(): Jdbc.JdbcResultSet;
    getMaxFieldSize(): number;
    getMaxRows(): number;
    getMetaData(): Jdbc.JdbcResultSetMetaData;
    getMoreResults(): boolean;
    getMoreResults(current: number): boolean;
    getParameterMetaData(): Jdbc.JdbcParameterMetaData;
    getQueryTimeout(): number;
    getResultSet(): Jdbc.JdbcResultSet;
    getResultSetConcurrency(): number;
    getResultSetHoldability(): number;
    getResultSetType(): number;
    getUpdateCount(): number;
    getWarnings(): string[];
    isClosed(): boolean;
    isPoolable(): boolean;
    setArray(parameterIndex: number, x: Jdbc.JdbcArray): void;
    setBigDecimal(parameterIndex: number, x: any): void;
    setBlob(parameterIndex: number, x: Jdbc.JdbcBlob): void;
    setBoolean(parameterIndex: number, x: boolean): void;
    setByte(parameterIndex: number, x: number): void;
    setBytes(parameterIndex: number, x: number[]): void;
    setClob(parameterIndex: number, x: Jdbc.JdbcClob): void;
    setCursorName(name: string): void;
    setDate(parameterIndex: number, x: Jdbc.JdbcDate): void;
    setDate(parameterIndex: number, x: Jdbc.JdbcDate, timeZone: string): void;
    setDouble(parameterIndex: number, x: number): void;
    setEscapeProcessing(enable: boolean): void;
    setFetchDirection(direction: number): void;
    setFetchSize(rows: number): void;
    setFloat(parameterIndex: number, x: number): void;
    setInt(parameterIndex: number, x: number): void;
    setLong(parameterIndex: number, x: number): void;
    setMaxFieldSize(max: number): void;
    setMaxRows(max: number): void;
    setNClob(parameterIndex: number, x: Jdbc.JdbcClob): void;
    setNString(parameterIndex: number, x: string): void;
    setNull(parameterIndex: number, sqlType: number): void;
    setNull(parameterIndex: number, sqlType: number, typeName: string): void;
    setObject(index: number, x: any): void;
    setObject(parameterIndex: number, x: any, targetSqlType: number): void;
    setObject(parameterIndex: number, x: any, targetSqlType: number, scaleOrLength: number): void;
    setPoolable(poolable: boolean): void;
    setQueryTimeout(seconds: number): void;
    setRef(parameterIndex: number, x: Jdbc.JdbcRef): void;
    setRowId(parameterIndex: number, x: Jdbc.JdbcRowId): void;
    setSQLXML(parameterIndex: number, x: Jdbc.JdbcSQLXML): void;
    setShort(parameterIndex: number, x: number): void;
    setString(parameterIndex: number, x: string): void;
    setTime(parameterIndex: number, x: Jdbc.JdbcTime): void;
    setTime(parameterIndex: number, x: Jdbc.JdbcTime, timeZone: string): void;
    setTimestamp(parameterIndex: number, x: Jdbc.JdbcTimestamp): void;
    setTimestamp(parameterIndex: number, x: Jdbc.JdbcTimestamp, timeZone: string): void;
    setURL(parameterIndex: number, x: string): void;

  }


  export interface JdbcRef {

    getBaseTypeName(): string;
    getObject(): any;
    setObject(object: any): void;

  }


  export interface JdbcResultSet {

    CLOSE_CURSORS_AT_COMMIT: number;
    CONCUR_READ_ONLY: number;
    CONCUR_UPDATABLE: number;
    FETCH_FORWARD: number;
    FETCH_REVERSE: number;
    FETCH_UNKNOWN: number;
    HOLD_CURSORS_OVER_COMMIT: number;
    TYPE_FORWARD_ONLY: number;
    TYPE_SCROLL_INSENSITIVE: number;
    TYPE_SCROLL_SENSITIVE: number;

    absolute(row: number): boolean;
    afterLast(): void;
    beforeFirst(): void;
    cancelRowUpdates(): void;
    clearWarnings(): void;
    close(): void;
    deleteRow(): void;
    findColumn(columnLabel: string): number;
    first(): boolean;
    getArray(columnIndex: number): Jdbc.JdbcArray;
    getArray(columnLabel: string): Jdbc.JdbcArray;
    getBigDecimal(columnIndex: number): any;
    getBigDecimal(columnLabel: string): any;
    getBlob(columnIndex: number): Jdbc.JdbcBlob;
    getBlob(columnLabel: string): Jdbc.JdbcBlob;
    getBoolean(columnIndex: number): boolean;
    getBoolean(columnLabel: string): boolean;
    getByte(columnIndex: number): number;
    getByte(columnLabel: string): number;
    getBytes(columnIndex: number): number[];
    getBytes(columnLabel: string): number[];
    getClob(columnIndex: number): Jdbc.JdbcClob;
    getClob(columnLabel: string): Jdbc.JdbcClob;
    getConcurrency(): number;
    getCursorName(): string;
    getDate(columnIndex: number): Jdbc.JdbcDate;
    getDate(columnIndex: number, timeZone: string): Jdbc.JdbcDate;
    getDate(columnLabel: string): Jdbc.JdbcDate;
    getDate(columnLabel: string, timeZone: string): Jdbc.JdbcDate;
    getDouble(columnIndex: number): number;
    getDouble(columnLabel: string): number;
    getFetchDirection(): number;
    getFetchSize(): number;
    getFloat(columnIndex: number): number;
    getFloat(columnLabel: string): number;
    getHoldability(): number;
    getInt(columnIndex: number): number;
    getInt(columnLabel: string): number;
    getLong(columnIndex: number): number;
    getLong(columnLabel: string): number;
    getMetaData(): Jdbc.JdbcResultSetMetaData;
    getNClob(columnIndex: number): Jdbc.JdbcClob;
    getNClob(columnLabel: string): Jdbc.JdbcClob;
    getNString(columnIndex: number): string;
    getNString(columnLabel: string): string;
    getObject(columnIndex: number): any;
    getObject(columnLabel: string): any;
    getRef(columnIndex: number): Jdbc.JdbcRef;
    getRef(columnLabel: string): Jdbc.JdbcRef;
    getRow(): number;
    getRowId(columnIndex: number): Jdbc.JdbcRowId;
    getRowId(columnLabel: string): Jdbc.JdbcRowId;
    getSQLXML(columnIndex: number): Jdbc.JdbcSQLXML;
    getSQLXML(columnLabel: string): Jdbc.JdbcSQLXML;
    getShort(columnIndex: number): number;
    getShort(columnLabel: string): number;
    getStatement(): Jdbc.JdbcStatement;
    getString(columnIndex: number): string;
    getString(columnLabel: string): string;
    getTime(columnIndex: number): Jdbc.JdbcTime;
    getTime(columnIndex: number, timeZone: string): Jdbc.JdbcTime;
    getTime(columnLabel: string): Jdbc.JdbcTime;
    getTime(columnLabel: string, timeZone: string): Jdbc.JdbcTime;
    getTimestamp(columnIndex: number): Jdbc.JdbcTimestamp;
    getTimestamp(columnIndex: number, timeZone: string): Jdbc.JdbcTimestamp;
    getTimestamp(columnLabel: string): Jdbc.JdbcTimestamp;
    getTimestamp(columnLabel: string, timeZone: string): Jdbc.JdbcTimestamp;
    getType(): number;
    getURL(columnIndex: number): string;
    getURL(columnLabel: string): string;
    getWarnings(): string[];
    insertRow(): void;
    isAfterLast(): boolean;
    isBeforeFirst(): boolean;
    isClosed(): boolean;
    isFirst(): boolean;
    isLast(): boolean;
    last(): boolean;
    moveToCurrentRow(): void;
    moveToInsertRow(): void;
    next(): boolean;
    previous(): boolean;
    refreshRow(): void;
    relative(rows: number): boolean;
    rowDeleted(): boolean;
    rowInserted(): boolean;
    rowUpdated(): boolean;
    setFetchDirection(direction: number): void;
    setFetchSize(rows: number): void;
    updateArray(columnIndex: number, x: Jdbc.JdbcArray): void;
    updateArray(columnLabel: string, x: Jdbc.JdbcArray): void;
    updateBigDecimal(columnIndex: number, x: any): void;
    updateBigDecimal(columnLabel: string, x: any): void;
    updateBlob(columnIndex: number, x: Jdbc.JdbcBlob): void;
    updateBlob(columnLabel: string, x: Jdbc.JdbcBlob): void;
    updateBoolean(columnIndex: number, x: boolean): void;
    updateBoolean(columnLabel: string, x: boolean): void;
    updateByte(columnIndex: number, x: number): void;
    updateByte(columnLabel: string, x: number): void;
    updateBytes(columnIndex: number, x: number[]): void;
    updateBytes(columnLabel: string, x: number[]): void;
    updateClob(columnIndex: number, x: Jdbc.JdbcClob): void;
    updateClob(columnLabel: string, x: Jdbc.JdbcClob): void;
    updateDate(columnIndex: number, x: Jdbc.JdbcDate): void;
    updateDate(columnLabel: string, x: Jdbc.JdbcDate): void;
    updateDouble(columnIndex: number, x: number): void;
    updateDouble(columnLabel: string, x: number): void;
    updateFloat(columnIndex: number, x: number): void;
    updateFloat(columnLabel: string, x: number): void;
    updateInt(columnIndex: number, x: number): void;
    updateInt(columnLabel: string, x: number): void;
    updateLong(columnIndex: number, x: number): void;
    updateLong(columnLabel: string, x: number): void;
    updateNClob(columnIndex: number, x: Jdbc.JdbcClob): void;
    updateNClob(columnLabel: string, x: Jdbc.JdbcClob): void;
    updateNString(columnIndex: number, x: string): void;
    updateNString(columnLabel: string, x: string): void;
    updateNull(columnIndex: number): void;
    updateNull(columnLabel: string): void;
    updateObject(columnIndex: number, x: any): void;
    updateObject(columnIndex: number, x: any, scaleOrLength: number): void;
    updateObject(columnLabel: string, x: any): void;
    updateObject(columnLabel: string, x: any, scaleOrLength: number): void;
    updateRef(columnIndex: number, x: Jdbc.JdbcRef): void;
    updateRef(columnLabel: string, x: Jdbc.JdbcRef): void;
    updateRow(): void;
    updateRowId(columnIndex: number, x: Jdbc.JdbcRowId): void;
    updateRowId(columnLabel: string, x: Jdbc.JdbcRowId): void;
    updateSQLXML(columnIndex: number, x: Jdbc.JdbcSQLXML): void;
    updateSQLXML(columnLabel: string, x: Jdbc.JdbcSQLXML): void;
    updateShort(columnIndex: number, x: number): void;
    updateShort(columnLabel: string, x: number): void;
    updateString(columnIndex: number, x: string): void;
    updateString(columnLabel: string, x: string): void;
    updateTime(columnIndex: number, x: Jdbc.JdbcTime): void;
    updateTime(columnLabel: string, x: Jdbc.JdbcTime): void;
    updateTimestamp(columnIndex: number, x: Jdbc.JdbcTimestamp): void;
    updateTimestamp(columnLabel: string, x: Jdbc.JdbcTimestamp): void;
    wasNull(): boolean;

  }


  export interface JdbcResultSetMetaData {

    columnNoNulls: number;
    columnNullable: number;
    columnNullableUnknown: number;

    getCatalogName(column: number): string;
    getColumnClassName(column: number): string;
    getColumnCount(): number;
    getColumnDisplaySize(column: number): number;
    getColumnLabel(column: number): string;
    getColumnName(column: number): string;
    getColumnType(column: number): number;
    getColumnTypeName(column: number): string;
    getPrecision(column: number): number;
    getScale(column: number): number;
    getSchemaName(column: number): string;
    getTableName(column: number): string;
    isAutoIncrement(column: number): boolean;
    isCaseSensitive(column: number): boolean;
    isCurrency(column: number): boolean;
    isDefinitelyWritable(column: number): boolean;
    isNullable(column: number): number;
    isReadOnly(column: number): boolean;
    isSearchable(column: number): boolean;
    isSigned(column: number): boolean;
    isWritable(column: number): boolean;

  }


  export interface JdbcRowId {

    getBytes(): number[];

  }


  export interface JdbcRowIdLifetime {

    ROWID_UNSUPPORTED: number;
    ROWID_VALID_FOREVER: number;
    ROWID_VALID_OTHER: number;
    ROWID_VALID_SESSION: number;
    ROWID_VALID_TRANSACTION: number;

  }


  export interface JdbcSQLXML {

    free(): void;
    getString(): string;
    setString(value: string): void;

  }


  export interface JdbcSavepoint {

    getSavepointId(): number;
    getSavepointName(): string;

  }


  export interface JdbcStatement {

    addBatch(sql: string): void;
    cancel(): void;
    clearBatch(): void;
    clearWarnings(): void;
    close(): void;
    execute(sql: string): boolean;
    execute(sql: string, autoGeneratedKeys: number): boolean;
    execute(sql: string, columnIndexes: number[]): boolean;
    execute(sql: string, columnNames: string[]): boolean;
    executeBatch(): number[];
    executeQuery(sql: string): Jdbc.JdbcResultSet;
    executeUpdate(sql: string): number;
    executeUpdate(sql: string, autoGeneratedKeys: number): number;
    executeUpdate(sql: string, columnIndexes: number[]): number;
    executeUpdate(sql: string, columnNames: string[]): number;
    getConnection(): Jdbc.JdbcConnection;
    getFetchDirection(): number;
    getFetchSize(): number;
    getGeneratedKeys(): Jdbc.JdbcResultSet;
    getMaxFieldSize(): number;
    getMaxRows(): number;
    getMoreResults(): boolean;
    getMoreResults(current: number): boolean;
    getQueryTimeout(): number;
    getResultSet(): Jdbc.JdbcResultSet;
    getResultSetConcurrency(): number;
    getResultSetHoldability(): number;
    getResultSetType(): number;
    getUpdateCount(): number;
    getWarnings(): string[];
    isClosed(): boolean;
    isPoolable(): boolean;
    setCursorName(name: string): void;
    setEscapeProcessing(enable: boolean): void;
    setFetchDirection(direction: number): void;
    setFetchSize(rows: number): void;
    setMaxFieldSize(max: number): void;
    setMaxRows(max: number): void;
    setPoolable(poolable: boolean): void;
    setQueryTimeout(seconds: number): void;

  }


  export interface JdbcStatment {

    CLOSE_ALL_RESULTS: number;
    CLOSE_CURRENT_RESULT: number;
    EXECUTE_FAILED: number;
    KEEP_CURRENT_RESULT: number;
    NO_GENERATED_KEYS: number;
    RETURN_GENERATED_KEYS: number;
    SUCCESS_NO_INFO: number;

  }


  export interface JdbcStruct {

    getAttributes(): any[];
    getSQLTypeName(): string;

  }


  export interface JdbcTime {

    after(when: Jdbc.JdbcTime): boolean;
    before(when: Jdbc.JdbcTime): boolean;
    getHours(): number;
    getMinutes(): number;
    getSeconds(): number;
    getTime(): number;
    setHours(hours: number): void;
    setMinutes(minutes: number): void;
    setSeconds(seconds: number): void;
    setTime(milliseconds: number): void;

  }


  export interface JdbcTimestamp {

    after(when: Jdbc.JdbcTimestamp): boolean;
    before(when: Jdbc.JdbcTimestamp): boolean;
    getDate(): number;
    getHours(): number;
    getMinutes(): number;
    getMonth(): number;
    getNanos(): number;
    getSeconds(): number;
    getTime(): number;
    getYear(): number;
    setDate(date: number): void;
    setHours(hours: number): void;
    setMinutes(minutes: number): void;
    setMonth(month: number): void;
    setNanos(nanoseconds: number): void;
    setSeconds(seconds: number): void;
    setTime(milliseconds: number): void;
    setYear(year: number): void;

  }


  export interface JdbcTypes {

    ARRAY: number;
    BIGINT: number;
    BINARY: number;
    BIT: number;
    BLOB: number;
    BOOLEAN: number;
    CHAR: number;
    CLOB: number;
    DATALINK: number;
    DATE: number;
    DECIMAL: number;
    DISTINCT: number;
    DOUBLE: number;
    FLOAT: number;
    INTEGER: number;
    JAVA_OBJECT: number;
    LONGNVARCHAR: number;
    LONGVARBINARY: number;
    LONGVARCHAR: number;
    NCHAR: number;
    NCLOB: number;
    NULL: number;
    NUMERIC: number;
    NVARCHAR: number;
    OTHER: number;
    REAL: number;
    REF: number;
    ROWID: number;
    SMALLINT: number;
    SQLXML: number;
    STRUCT: number;
    TIME: number;
    TIMESTAMP: number;
    TINYINT: number;
    VARBINARY: number;
    VARCHAR: number;

  }


}