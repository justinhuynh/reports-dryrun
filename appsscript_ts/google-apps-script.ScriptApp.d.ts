/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: ScriptApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class ScriptApp {
  static deleteTrigger(trigger: ScriptApp.Trigger): void;
  static getAuthorizationInfo(authMode: ScriptApp.AuthMode): ScriptApp.AuthorizationInfo;
  static getInstallationSource(): ScriptApp.InstallationSource;
  static getOAuthToken(): string;
  static getProjectKey(): string;
  static getProjectTriggers(): ScriptApp.Trigger[];
  static getScriptTriggers(): ScriptApp.Trigger[];
  static getService(): ScriptApp.Service;
  static getUserTriggers(document: DocumentApp.Document): ScriptApp.Trigger[];
  static getUserTriggers(form: FormApp.Form): ScriptApp.Trigger[];
  static getUserTriggers(spreadsheet: SpreadsheetApp.Spreadsheet): ScriptApp.Trigger[];
  static invalidateAuth(): void;
  static newStateToken(): ScriptApp.StateTokenBuilder;
  static newTrigger(functionName: string): ScriptApp.TriggerBuilder;
}

declare namespace ScriptApp {

  export enum AuthMode {

    CUSTOM_FUNCTION,
    FULL,
    LIMITED,
    NONE

  }


  export interface AuthorizationInfo {

    getAuthorizationStatus(): ScriptApp.AuthorizationStatus;
    getAuthorizationUrl(): string;

  }


  export enum AuthorizationStatus {

    NOT_REQUIRED,
    REQUIRED

  }


  export interface ClockTriggerBuilder {

    after(durationMilliseconds: number): ScriptApp.ClockTriggerBuilder;
    at(date: Date): ScriptApp.ClockTriggerBuilder;
    atDate(year: number, month: number, day: number): ScriptApp.ClockTriggerBuilder;
    atHour(hour: number): ScriptApp.ClockTriggerBuilder;
    create(): ScriptApp.Trigger;
    everyDays(n: number): ScriptApp.ClockTriggerBuilder;
    everyHours(n: number): ScriptApp.ClockTriggerBuilder;
    everyMinutes(n: number): ScriptApp.ClockTriggerBuilder;
    everyWeeks(n: number): ScriptApp.ClockTriggerBuilder;
    inTimezone(timezone: string): ScriptApp.ClockTriggerBuilder;
    nearMinute(minute: number): ScriptApp.ClockTriggerBuilder;
    onMonthDay(day: number): ScriptApp.ClockTriggerBuilder;
    onWeekDay(day: CommonModule.Weekday): ScriptApp.ClockTriggerBuilder;

  }


  export interface DocumentTriggerBuilder {

    create(): ScriptApp.Trigger;
    onOpen(): ScriptApp.DocumentTriggerBuilder;

  }


  export enum EventType {

    CLOCK,
    ON_CHANGE,
    ON_EDIT,
    ON_FORM_SUBMIT,
    ON_OPEN

  }


  export interface FormTriggerBuilder {

    create(): ScriptApp.Trigger;
    onFormSubmit(): ScriptApp.FormTriggerBuilder;
    onOpen(): ScriptApp.FormTriggerBuilder;
    onEdit(): ScriptApp.FormTriggerBuilder;

  }


  export enum InstallationSource {

    APPS_MARKETPLACE_DOMAIN_ADD_ON,
    NONE,
    WEB_STORE_ADD_ON

  }


  export interface Service {

    disable(): void;
    enable(restriction: ScriptApp.Restriction): void;
    getUrl(): string;
    isEnabled(): boolean;

  }


  export enum Restriction {

    ALL,
    DOMAIN,
    MYSELF

  }


  export interface SpreadsheetTriggerBuilder {

    create(): ScriptApp.Trigger;
    onChange(): ScriptApp.SpreadsheetTriggerBuilder;
    onEdit(): ScriptApp.SpreadsheetTriggerBuilder;
    onFormSubmit(): ScriptApp.SpreadsheetTriggerBuilder;
    onOpen(): ScriptApp.SpreadsheetTriggerBuilder;

  }


  export interface StateTokenBuilder {

    createToken(): string;
    withArgument(name: string, value: string): ScriptApp.StateTokenBuilder;
    withMethod(method: string): ScriptApp.StateTokenBuilder;
    withTimeout(seconds: number): ScriptApp.StateTokenBuilder;

  }


  export interface Trigger {

    getEventType(): ScriptApp.EventType;
    getHandlerFunction(): string;
    getTriggerSource(): ScriptApp.TriggerSource;
    getTriggerSourceId(): string;
    getUniqueId(): string;

  }


  export interface TriggerBuilder {

    forDocument(document: DocumentApp.Document): ScriptApp.DocumentTriggerBuilder;
    forDocument(key: string): ScriptApp.DocumentTriggerBuilder;
    forForm(form: FormApp.Form): ScriptApp.FormTriggerBuilder;
    forForm(key: string): ScriptApp.FormTriggerBuilder;
    forSpreadsheet(sheet: SpreadsheetApp.Spreadsheet): ScriptApp.SpreadsheetTriggerBuilder;
    forSpreadsheet(key: string): ScriptApp.SpreadsheetTriggerBuilder;
    timeBased(): ScriptApp.ClockTriggerBuilder;
    forUserCalendar(emailId: string): ScriptApp.CalendarTriggerBuilder;

  }


  export enum TriggerSource {

    CLOCK,
    DOCUMENTS,
    FORMS,
    SPREADSHEETS

  }


}