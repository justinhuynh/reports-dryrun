/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: LinearOptimizationService.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class LinearOptimizationService {
  static createEngine(): LinearOptimizationService.LinearOptimizationEngine;
}

declare namespace LinearOptimizationService {

  export interface LinearOptimizationConstraint {

    setCoefficient(variableName: string, coefficient: number): LinearOptimizationService.LinearOptimizationConstraint;

  }


  export interface LinearOptimizationEngine {

    addConstraint(lowerBound: number, upperBound: number): LinearOptimizationService.LinearOptimizationConstraint;
    addVariable(name: string, lowerBound: number, upperBound: number): LinearOptimizationService.LinearOptimizationEngine;
    addVariable(name: string, lowerBound: number, upperBound: number, type: LinearOptimizationService.VariableType): LinearOptimizationService.LinearOptimizationEngine;
    addVariable(name: string, lowerBound: number, upperBound: number, type: LinearOptimizationService.VariableType, objectiveCoefficient: number): LinearOptimizationService.LinearOptimizationEngine;
    setMaximization(): LinearOptimizationService.LinearOptimizationEngine;
    setMinimization(): LinearOptimizationService.LinearOptimizationEngine;
    setObjectiveCoefficient(variableName: string, coefficient: number): LinearOptimizationService.LinearOptimizationEngine;
    solve(): LinearOptimizationService.LinearOptimizationSolution;
    solve(seconds: number): LinearOptimizationService.LinearOptimizationSolution;
    addConstraints(lowerBounds: number[], upperBounds: number[], variableNames: string[][], coefficients: number[][]): LinearOptimizationService.LinearOptimizationEngine;
    addVariables(names: string[], lowerBounds: number[], upperBounds: number[], types: LinearOptimizationService.VariableType[], objectiveCoefficients: number[]): LinearOptimizationService.LinearOptimizationEngine;

  }


  export interface LinearOptimizationSolution {

    getObjectiveValue(): number;
    getStatus(): LinearOptimizationService.Status;
    getVariableValue(variableName: string): number;
    isValid(): boolean;

  }


  export enum Status {

    ABNORMAL,
    FEASIBLE,
    INFEASIBLE,
    MODEL_INVALID,
    NOT_SOLVED,
    OPTIMAL,
    UNBOUNDED

  }


  export enum VariableType {

    CONTINUOUS,
    INTEGER

  }


}