/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: DocumentApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class DocumentApp {
  static create(name: string): DocumentApp.Document;
  static getActiveDocument(): DocumentApp.Document;
  static getUi(): CommonModule.Ui;
  static openById(id: string): DocumentApp.Document;
  static openByUrl(url: string): DocumentApp.Document;
}

declare namespace DocumentApp {

  export enum Attribute {

    BACKGROUND_COLOR,
    BOLD,
    BORDER_COLOR,
    BORDER_WIDTH,
    CODE,
    FONT_FAMILY,
    FONT_SIZE,
    FOREGROUND_COLOR,
    GLYPH_TYPE,
    HEADING,
    HEIGHT,
    HORIZONTAL_ALIGNMENT,
    INDENT_END,
    INDENT_FIRST_LINE,
    INDENT_START,
    ITALIC,
    LEFT_TO_RIGHT,
    LINE_SPACING,
    LINK_URL,
    LIST_ID,
    MARGIN_BOTTOM,
    MARGIN_LEFT,
    MARGIN_RIGHT,
    MARGIN_TOP,
    MINIMUM_HEIGHT,
    NESTING_LEVEL,
    PADDING_BOTTOM,
    PADDING_LEFT,
    PADDING_RIGHT,
    PADDING_TOP,
    PAGE_HEIGHT,
    PAGE_WIDTH,
    SPACING_AFTER,
    SPACING_BEFORE,
    STRIKETHROUGH,
    UNDERLINE,
    VERTICAL_ALIGNMENT,
    WIDTH

  }


  export interface Body {

    appendHorizontalRule(): DocumentApp.HorizontalRule;
    appendImage(image: CommonModule.BlobSource): DocumentApp.InlineImage;
    appendImage(image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    appendListItem(listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    appendListItem(text: string): DocumentApp.ListItem;
    appendPageBreak(): DocumentApp.PageBreak;
    appendPageBreak(pageBreak: DocumentApp.PageBreak): DocumentApp.PageBreak;
    appendParagraph(paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    appendParagraph(text: string): DocumentApp.Paragraph;
    appendTable(): DocumentApp.Table;
    appendTable(table: DocumentApp.Table): DocumentApp.Table;
    appendTable(cells: string[][]): DocumentApp.Table;
    clear(): DocumentApp.Body;
    copy(): DocumentApp.Body;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getFootnotes(): DocumentApp.Footnote[];
    getHeadingAttributes(paragraphHeading: DocumentApp.ParagraphHeading): any;
    getImages(): DocumentApp.InlineImage[];
    getLinkUrl(): string;
    getListItems(): DocumentApp.ListItem[];
    getMarginBottom(): number;
    getMarginLeft(): number;
    getMarginRight(): number;
    getMarginTop(): number;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getPageHeight(): number;
    getPageWidth(): number;
    getParagraphs(): DocumentApp.Paragraph[];
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getTables(): DocumentApp.Table[];
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertHorizontalRule(childIndex: number): DocumentApp.HorizontalRule;
    insertImage(childIndex: number, image: CommonModule.BlobSource): DocumentApp.InlineImage;
    insertImage(childIndex: number, image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    insertListItem(childIndex: number, listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    insertListItem(childIndex: number, text: string): DocumentApp.ListItem;
    insertPageBreak(childIndex: number): DocumentApp.PageBreak;
    insertPageBreak(childIndex: number, pageBreak: DocumentApp.PageBreak): DocumentApp.PageBreak;
    insertParagraph(childIndex: number, paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    insertParagraph(childIndex: number, text: string): DocumentApp.Paragraph;
    insertTable(childIndex: number): DocumentApp.Table;
    insertTable(childIndex: number, table: DocumentApp.Table): DocumentApp.Table;
    insertTable(childIndex: number, cells: string[][]): DocumentApp.Table;
    isAtDocumentEnd(): boolean;
    removeChild(child: DocumentApp.Element): DocumentApp.Body;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.Body;
    setHeadingAttributes(paragraphHeading: DocumentApp.ParagraphHeading, attributes: any): DocumentApp.Body;
    setLinkUrl(url: string): DocumentApp.Body;
    setMarginBottom(marginBottom: number): DocumentApp.Body;
    setMarginLeft(marginLeft: number): DocumentApp.Body;
    setMarginRight(marginRight: number): DocumentApp.Body;
    setMarginTop(marginTop: number): DocumentApp.Body;
    setPageHeight(pageHeight: number): DocumentApp.Body;
    setPageWidth(pageWidth: number): DocumentApp.Body;
    setText(text: string): DocumentApp.Body;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.Body;

  }


  export interface Bookmark {

    getId(): string;
    getPosition(): DocumentApp.Position;
    remove(): void;

  }


  export interface ContainerElement {

    asBody(): DocumentApp.Body;
    asEquation(): DocumentApp.Equation;
    asFooterSection(): DocumentApp.FooterSection;
    asFootnoteSection(): DocumentApp.FootnoteSection;
    asHeaderSection(): DocumentApp.HeaderSection;
    asListItem(): DocumentApp.ListItem;
    asParagraph(): DocumentApp.Paragraph;
    asTable(): DocumentApp.Table;
    asTableCell(): DocumentApp.TableCell;
    asTableOfContents(): DocumentApp.TableOfContents;
    asTableRow(): DocumentApp.TableRow;
    clear(): DocumentApp.ContainerElement;
    copy(): DocumentApp.ContainerElement;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.ContainerElement;
    removeFromParent(): DocumentApp.ContainerElement;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.ContainerElement;
    setLinkUrl(url: string): DocumentApp.ContainerElement;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.ContainerElement;

  }


  export interface Document {

    addBookmark(position: DocumentApp.Position): DocumentApp.Bookmark;
    addEditor(emailAddress: string): DocumentApp.Document;
    addEditor(user: CommonModule.User): DocumentApp.Document;
    addEditors(emailAddresses: string[]): DocumentApp.Document;
    addFooter(): DocumentApp.FooterSection;
    addHeader(): DocumentApp.HeaderSection;
    addNamedRange(name: string, range: DocumentApp.Range): DocumentApp.NamedRange;
    addViewer(emailAddress: string): DocumentApp.Document;
    addViewer(user: CommonModule.User): DocumentApp.Document;
    addViewers(emailAddresses: string[]): DocumentApp.Document;
    getAs(contentType: string): CommonModule.Blob;
    getBlob(): CommonModule.Blob;
    getBody(): DocumentApp.Body;
    getBookmark(id: string): DocumentApp.Bookmark;
    getBookmarks(): DocumentApp.Bookmark[];
    getCursor(): DocumentApp.Position;
    getEditors(): CommonModule.User[];
    getFooter(): DocumentApp.FooterSection;
    getFootnotes(): DocumentApp.Footnote[];
    getHeader(): DocumentApp.HeaderSection;
    getId(): string;
    getName(): string;
    getNamedRangeById(id: string): DocumentApp.NamedRange;
    getNamedRanges(): DocumentApp.NamedRange[];
    getNamedRanges(name: string): DocumentApp.NamedRange[];
    getSelection(): DocumentApp.Range;
    getUrl(): string;
    getViewers(): CommonModule.User[];
    newPosition(element: DocumentApp.Element, offset: number): DocumentApp.Position;
    newRange(): DocumentApp.RangeBuilder;
    removeEditor(emailAddress: string): DocumentApp.Document;
    removeEditor(user: CommonModule.User): DocumentApp.Document;
    removeViewer(emailAddress: string): DocumentApp.Document;
    removeViewer(user: CommonModule.User): DocumentApp.Document;
    saveAndClose(): void;
    setCursor(position: DocumentApp.Position): DocumentApp.Document;
    setName(name: string): DocumentApp.Document;
    setSelection(range: DocumentApp.Range): DocumentApp.Document;

  }


  export interface Element {

    asBody(): DocumentApp.Body;
    asEquation(): DocumentApp.Equation;
    asEquationFunction(): DocumentApp.EquationFunction;
    asEquationFunctionArgumentSeparator(): DocumentApp.EquationFunctionArgumentSeparator;
    asEquationSymbol(): DocumentApp.EquationSymbol;
    asFooterSection(): DocumentApp.FooterSection;
    asFootnote(): DocumentApp.Footnote;
    asFootnoteSection(): DocumentApp.FootnoteSection;
    asHeaderSection(): DocumentApp.HeaderSection;
    asHorizontalRule(): DocumentApp.HorizontalRule;
    asInlineDrawing(): DocumentApp.InlineDrawing;
    asInlineImage(): DocumentApp.InlineImage;
    asListItem(): DocumentApp.ListItem;
    asPageBreak(): DocumentApp.PageBreak;
    asParagraph(): DocumentApp.Paragraph;
    asTable(): DocumentApp.Table;
    asTableCell(): DocumentApp.TableCell;
    asTableOfContents(): DocumentApp.TableOfContents;
    asTableRow(): DocumentApp.TableRow;
    asText(): DocumentApp.Text;
    copy(): DocumentApp.Element;
    getAttributes(): any;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.Element;
    removeFromParent(): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.Element;

  }


  export enum ElementType {

    BODY_SECTION,
    COMMENT_SECTION,
    DOCUMENT,
    EQUATION,
    EQUATION_FUNCTION,
    EQUATION_FUNCTION_ARGUMENT_SEPARATOR,
    EQUATION_SYMBOL,
    FOOTER_SECTION,
    FOOTNOTE,
    FOOTNOTE_SECTION,
    HEADER_SECTION,
    HORIZONTAL_RULE,
    INLINE_DRAWING,
    INLINE_IMAGE,
    LIST_ITEM,
    PAGE_BREAK,
    PARAGRAPH,
    TABLE,
    TABLE_CELL,
    TABLE_OF_CONTENTS,
    TABLE_ROW,
    TEXT,
    UNSUPPORTED

  }


  export interface Equation {

    clear(): DocumentApp.Equation;
    copy(): DocumentApp.Equation;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.Equation;
    removeFromParent(): DocumentApp.Equation;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.Equation;
    setLinkUrl(url: string): DocumentApp.Equation;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.Equation;

  }


  export interface EquationFunction {

    clear(): DocumentApp.EquationFunction;
    copy(): DocumentApp.EquationFunction;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getCode(): string;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.EquationFunction;
    removeFromParent(): DocumentApp.EquationFunction;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.EquationFunction;
    setLinkUrl(url: string): DocumentApp.EquationFunction;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.EquationFunction;

  }


  export interface EquationFunctionArgumentSeparator {

    copy(): DocumentApp.EquationFunctionArgumentSeparator;
    getAttributes(): any;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.EquationFunctionArgumentSeparator;
    removeFromParent(): DocumentApp.EquationFunctionArgumentSeparator;
    setAttributes(attributes: any): DocumentApp.EquationFunctionArgumentSeparator;

  }


  export interface EquationSymbol {

    copy(): DocumentApp.EquationSymbol;
    getAttributes(): any;
    getCode(): string;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.EquationSymbol;
    removeFromParent(): DocumentApp.EquationSymbol;
    setAttributes(attributes: any): DocumentApp.EquationSymbol;

  }


  export enum FontFamily {

    AMARANTH,
    ARIAL,
    ARIAL_BLACK,
    ARIAL_NARROW,
    ARVO,
    CALIBRI,
    CAMBRIA,
    COMIC_SANS_MS,
    CONSOLAS,
    CORSIVA,
    COURIER_NEW,
    DANCING_SCRIPT,
    DROID_SANS,
    DROID_SERIF,
    GARAMOND,
    GEORGIA,
    GLORIA_HALLELUJAH,
    GREAT_VIBES,
    LOBSTER,
    MERRIWEATHER,
    PACIFICO,
    PHILOSOPHER,
    POIRET_ONE,
    QUATTROCENTO,
    ROBOTO,
    SHADOWS_INTO_LIGHT,
    SYNCOPATE,
    TAHOMA,
    TIMES_NEW_ROMAN,
    TREBUCHET_MS,
    UBUNTU,
    VERDANA

  }


  export interface FooterSection {

    appendHorizontalRule(): DocumentApp.HorizontalRule;
    appendImage(image: CommonModule.BlobSource): DocumentApp.InlineImage;
    appendImage(image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    appendListItem(listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    appendListItem(text: string): DocumentApp.ListItem;
    appendParagraph(paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    appendParagraph(text: string): DocumentApp.Paragraph;
    appendTable(): DocumentApp.Table;
    appendTable(table: DocumentApp.Table): DocumentApp.Table;
    appendTable(cells: string[][]): DocumentApp.Table;
    clear(): DocumentApp.FooterSection;
    copy(): DocumentApp.FooterSection;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getFootnotes(): DocumentApp.Footnote[];
    getImages(): DocumentApp.InlineImage[];
    getLinkUrl(): string;
    getListItems(): DocumentApp.ListItem[];
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParagraphs(): DocumentApp.Paragraph[];
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getTables(): DocumentApp.Table[];
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertHorizontalRule(childIndex: number): DocumentApp.HorizontalRule;
    insertImage(childIndex: number, image: CommonModule.BlobSource): DocumentApp.InlineImage;
    insertImage(childIndex: number, image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    insertListItem(childIndex: number, listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    insertListItem(childIndex: number, text: string): DocumentApp.ListItem;
    insertParagraph(childIndex: number, paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    insertParagraph(childIndex: number, text: string): DocumentApp.Paragraph;
    insertTable(childIndex: number): DocumentApp.Table;
    insertTable(childIndex: number, table: DocumentApp.Table): DocumentApp.Table;
    insertTable(childIndex: number, cells: string[][]): DocumentApp.Table;
    isAtDocumentEnd(): boolean;
    removeChild(child: DocumentApp.Element): DocumentApp.FooterSection;
    removeFromParent(): DocumentApp.FooterSection;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.FooterSection;
    setLinkUrl(url: string): DocumentApp.FooterSection;
    setText(text: string): DocumentApp.FooterSection;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.FooterSection;

  }


  export interface Footnote {

    copy(): DocumentApp.Footnote;
    getAttributes(): any;
    getFootnoteContents(): DocumentApp.FootnoteSection;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    removeFromParent(): DocumentApp.Footnote;
    setAttributes(attributes: any): DocumentApp.Footnote;

  }


  export interface FootnoteSection {

    appendParagraph(paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    appendParagraph(text: string): DocumentApp.Paragraph;
    clear(): DocumentApp.FootnoteSection;
    copy(): DocumentApp.FootnoteSection;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getFootnotes(): DocumentApp.Footnote[];
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParagraphs(): DocumentApp.Paragraph[];
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertParagraph(childIndex: number, paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    insertParagraph(childIndex: number, text: string): DocumentApp.Paragraph;
    isAtDocumentEnd(): boolean;
    removeChild(child: DocumentApp.Element): DocumentApp.FootnoteSection;
    removeFromParent(): DocumentApp.FootnoteSection;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.FootnoteSection;
    setLinkUrl(url: string): DocumentApp.FootnoteSection;
    setText(text: string): DocumentApp.FootnoteSection;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.FootnoteSection;

  }


  export enum GlyphType {

    BULLET,
    HOLLOW_BULLET,
    LATIN_LOWER,
    LATIN_UPPER,
    NUMBER,
    ROMAN_LOWER,
    ROMAN_UPPER,
    SQUARE_BULLET

  }


  export interface HeaderSection {

    appendHorizontalRule(): DocumentApp.HorizontalRule;
    appendImage(image: CommonModule.BlobSource): DocumentApp.InlineImage;
    appendImage(image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    appendListItem(listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    appendListItem(text: string): DocumentApp.ListItem;
    appendParagraph(paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    appendParagraph(text: string): DocumentApp.Paragraph;
    appendTable(): DocumentApp.Table;
    appendTable(table: DocumentApp.Table): DocumentApp.Table;
    appendTable(cells: string[][]): DocumentApp.Table;
    clear(): DocumentApp.HeaderSection;
    copy(): DocumentApp.HeaderSection;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getFootnotes(): DocumentApp.Footnote[];
    getImages(): DocumentApp.InlineImage[];
    getLinkUrl(): string;
    getListItems(): DocumentApp.ListItem[];
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParagraphs(): DocumentApp.Paragraph[];
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getTables(): DocumentApp.Table[];
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertHorizontalRule(childIndex: number): DocumentApp.HorizontalRule;
    insertImage(childIndex: number, image: CommonModule.BlobSource): DocumentApp.InlineImage;
    insertImage(childIndex: number, image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    insertListItem(childIndex: number, listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    insertListItem(childIndex: number, text: string): DocumentApp.ListItem;
    insertParagraph(childIndex: number, paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    insertParagraph(childIndex: number, text: string): DocumentApp.Paragraph;
    insertTable(childIndex: number): DocumentApp.Table;
    insertTable(childIndex: number, table: DocumentApp.Table): DocumentApp.Table;
    insertTable(childIndex: number, cells: string[][]): DocumentApp.Table;
    isAtDocumentEnd(): boolean;
    removeChild(child: DocumentApp.Element): DocumentApp.HeaderSection;
    removeFromParent(): DocumentApp.HeaderSection;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.HeaderSection;
    setLinkUrl(url: string): DocumentApp.HeaderSection;
    setText(text: string): DocumentApp.HeaderSection;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.HeaderSection;

  }


  export enum HorizontalAlignment {

    CENTER,
    JUSTIFY,
    LEFT,
    RIGHT

  }


  export interface HorizontalRule {

    copy(): DocumentApp.HorizontalRule;
    getAttributes(): any;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    removeFromParent(): DocumentApp.HorizontalRule;
    setAttributes(attributes: any): DocumentApp.HorizontalRule;

  }


  export interface InlineDrawing {

    copy(): DocumentApp.InlineDrawing;
    getAttributes(): any;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.InlineDrawing;
    removeFromParent(): DocumentApp.InlineDrawing;
    setAttributes(attributes: any): DocumentApp.InlineDrawing;
    getAltDescription(): string;
    getAltTitle(): string;
    setAltDescription(description: string): DocumentApp.InlineDrawing;
    setAltTitle(title: string): DocumentApp.InlineDrawing;

  }


  export interface InlineImage {

    copy(): DocumentApp.InlineImage;
    getAs(contentType: string): CommonModule.Blob;
    getAttributes(): any;
    getBlob(): CommonModule.Blob;
    getHeight(): number;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    getWidth(): number;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.InlineImage;
    removeFromParent(): DocumentApp.InlineImage;
    setAttributes(attributes: any): DocumentApp.InlineImage;
    setHeight(height: number): DocumentApp.InlineImage;
    setLinkUrl(url: string): DocumentApp.InlineImage;
    setWidth(width: number): DocumentApp.InlineImage;
    getAltDescription(): string;
    getAltTitle(): string;
    setAltDescription(description: string): DocumentApp.InlineImage;
    setAltTitle(title: string): DocumentApp.InlineImage;

  }


  export interface ListItem {

    addPositionedImage(image: CommonModule.BlobSource): DocumentApp.PositionedImage;
    appendHorizontalRule(): DocumentApp.HorizontalRule;
    appendInlineImage(image: CommonModule.BlobSource): DocumentApp.InlineImage;
    appendInlineImage(image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    appendPageBreak(): DocumentApp.PageBreak;
    appendPageBreak(pageBreak: DocumentApp.PageBreak): DocumentApp.PageBreak;
    appendText(text: DocumentApp.Text): DocumentApp.Text;
    appendText(text: string): DocumentApp.Text;
    clear(): DocumentApp.ListItem;
    copy(): DocumentApp.ListItem;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAlignment(): DocumentApp.HorizontalAlignment;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getGlyphType(): DocumentApp.GlyphType;
    getHeading(): DocumentApp.ParagraphHeading;
    getIndentEnd(): number;
    getIndentFirstLine(): number;
    getIndentStart(): number;
    getLineSpacing(): number;
    getLinkUrl(): string;
    getListId(): string;
    getNestingLevel(): number;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParent(): DocumentApp.ContainerElement;
    getPositionedImage(id: string): DocumentApp.PositionedImage;
    getPositionedImages(): DocumentApp.PositionedImage[];
    getPreviousSibling(): DocumentApp.Element;
    getSpacingAfter(): number;
    getSpacingBefore(): number;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertHorizontalRule(childIndex: number): DocumentApp.HorizontalRule;
    insertInlineImage(childIndex: number, image: CommonModule.BlobSource): DocumentApp.InlineImage;
    insertInlineImage(childIndex: number, image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    insertPageBreak(childIndex: number): DocumentApp.PageBreak;
    insertPageBreak(childIndex: number, pageBreak: DocumentApp.PageBreak): DocumentApp.PageBreak;
    insertText(childIndex: number, text: DocumentApp.Text): DocumentApp.Text;
    insertText(childIndex: number, text: string): DocumentApp.Text;
    isAtDocumentEnd(): boolean;
    isLeftToRight(): boolean;
    merge(): DocumentApp.ListItem;
    removeChild(child: DocumentApp.Element): DocumentApp.ListItem;
    removeFromParent(): DocumentApp.ListItem;
    removePositionedImage(id: string): boolean;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAlignment(alignment: DocumentApp.HorizontalAlignment): DocumentApp.ListItem;
    setAttributes(attributes: any): DocumentApp.ListItem;
    setGlyphType(glyphType: DocumentApp.GlyphType): DocumentApp.ListItem;
    setHeading(heading: DocumentApp.ParagraphHeading): DocumentApp.ListItem;
    setIndentEnd(indentEnd: number): DocumentApp.ListItem;
    setIndentFirstLine(indentFirstLine: number): DocumentApp.ListItem;
    setIndentStart(indentStart: number): DocumentApp.ListItem;
    setLeftToRight(leftToRight: boolean): DocumentApp.ListItem;
    setLineSpacing(multiplier: number): DocumentApp.ListItem;
    setLinkUrl(url: string): DocumentApp.ListItem;
    setListId(listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    setNestingLevel(nestingLevel: number): DocumentApp.ListItem;
    setSpacingAfter(spacingAfter: number): DocumentApp.ListItem;
    setSpacingBefore(spacingBefore: number): DocumentApp.ListItem;
    setText(text: string): void;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.ListItem;
    getPositionedDrawing(id: string): DocumentApp.PositionedDrawing;
    getPositionedDrawings(): DocumentApp.PositionedDrawing[];
    removePositionedDrawing(id: string): boolean;

  }


  export interface NamedRange {

    getId(): string;
    getName(): string;
    getRange(): DocumentApp.Range;
    remove(): void;

  }


  export interface PageBreak {

    copy(): DocumentApp.PageBreak;
    getAttributes(): any;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    removeFromParent(): DocumentApp.PageBreak;
    setAttributes(attributes: any): DocumentApp.PageBreak;

  }


  export interface Paragraph {

    addPositionedImage(image: CommonModule.BlobSource): DocumentApp.PositionedImage;
    appendHorizontalRule(): DocumentApp.HorizontalRule;
    appendInlineImage(image: CommonModule.BlobSource): DocumentApp.InlineImage;
    appendInlineImage(image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    appendPageBreak(): DocumentApp.PageBreak;
    appendPageBreak(pageBreak: DocumentApp.PageBreak): DocumentApp.PageBreak;
    appendText(text: DocumentApp.Text): DocumentApp.Text;
    appendText(text: string): DocumentApp.Text;
    clear(): DocumentApp.Paragraph;
    copy(): DocumentApp.Paragraph;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAlignment(): DocumentApp.HorizontalAlignment;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getHeading(): DocumentApp.ParagraphHeading;
    getIndentEnd(): number;
    getIndentFirstLine(): number;
    getIndentStart(): number;
    getLineSpacing(): number;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParent(): DocumentApp.ContainerElement;
    getPositionedImage(id: string): DocumentApp.PositionedImage;
    getPositionedImages(): DocumentApp.PositionedImage[];
    getPreviousSibling(): DocumentApp.Element;
    getSpacingAfter(): number;
    getSpacingBefore(): number;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertHorizontalRule(childIndex: number): DocumentApp.HorizontalRule;
    insertInlineImage(childIndex: number, image: CommonModule.BlobSource): DocumentApp.InlineImage;
    insertInlineImage(childIndex: number, image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    insertPageBreak(childIndex: number): DocumentApp.PageBreak;
    insertPageBreak(childIndex: number, pageBreak: DocumentApp.PageBreak): DocumentApp.PageBreak;
    insertText(childIndex: number, text: DocumentApp.Text): DocumentApp.Text;
    insertText(childIndex: number, text: string): DocumentApp.Text;
    isAtDocumentEnd(): boolean;
    isLeftToRight(): boolean;
    merge(): DocumentApp.Paragraph;
    removeChild(child: DocumentApp.Element): DocumentApp.Paragraph;
    removeFromParent(): DocumentApp.Paragraph;
    removePositionedImage(id: string): boolean;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAlignment(alignment: DocumentApp.HorizontalAlignment): DocumentApp.Paragraph;
    setAttributes(attributes: any): DocumentApp.Paragraph;
    setHeading(heading: DocumentApp.ParagraphHeading): DocumentApp.Paragraph;
    setIndentEnd(indentEnd: number): DocumentApp.Paragraph;
    setIndentFirstLine(indentFirstLine: number): DocumentApp.Paragraph;
    setIndentStart(indentStart: number): DocumentApp.Paragraph;
    setLeftToRight(leftToRight: boolean): DocumentApp.Paragraph;
    setLineSpacing(multiplier: number): DocumentApp.Paragraph;
    setLinkUrl(url: string): DocumentApp.Paragraph;
    setSpacingAfter(spacingAfter: number): DocumentApp.Paragraph;
    setSpacingBefore(spacingBefore: number): DocumentApp.Paragraph;
    setText(text: string): void;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.Paragraph;
    getPositionedDrawing(id: string): DocumentApp.PositionedDrawing;
    getPositionedDrawings(): DocumentApp.PositionedDrawing[];
    removePositionedDrawing(id: string): boolean;

  }


  export enum ParagraphHeading {

    HEADING1,
    HEADING2,
    HEADING3,
    HEADING4,
    HEADING5,
    HEADING6,
    NORMAL,
    SUBTITLE,
    TITLE

  }


  export interface Position {

    getElement(): DocumentApp.Element;
    getOffset(): number;
    getSurroundingText(): DocumentApp.Text;
    getSurroundingTextOffset(): number;
    insertBookmark(): DocumentApp.Bookmark;
    insertInlineImage(image: CommonModule.BlobSource): DocumentApp.InlineImage;
    insertText(text: string): DocumentApp.Text;

  }


  export interface PositionedImage {

    getAs(contentType: string): CommonModule.Blob;
    getBlob(): CommonModule.Blob;
    getHeight(): number;
    getId(): string;
    getLayout(): DocumentApp.PositionedLayout;
    getLeftOffset(): number;
    getParagraph(): DocumentApp.Paragraph;
    getTopOffset(): number;
    getWidth(): number;
    setHeight(height: number): DocumentApp.PositionedImage;
    setLayout(layout: DocumentApp.PositionedLayout): DocumentApp.PositionedImage;
    setLeftOffset(offset: number): DocumentApp.PositionedImage;
    setTopOffset(offset: number): DocumentApp.PositionedImage;
    setWidth(width: number): DocumentApp.PositionedImage;

  }


  export enum PositionedLayout {

    ABOVE_TEXT,
    BREAK_BOTH,
    BREAK_LEFT,
    BREAK_RIGHT,
    WRAP_TEXT

  }


  export interface Range {

    getRangeElements(): DocumentApp.RangeElement[];
    getSelectedElements(): DocumentApp.RangeElement[];

  }


  export interface RangeBuilder {

    addElement(element: DocumentApp.Element): DocumentApp.RangeBuilder;
    addElement(textElement: DocumentApp.Text, startOffset: number, endOffsetInclusive: number): DocumentApp.RangeBuilder;
    addElementsBetween(startElement: DocumentApp.Element, endElementInclusive: DocumentApp.Element): DocumentApp.RangeBuilder;
    addElementsBetween(startTextElement: DocumentApp.Text, startOffset: number, endTextElementInclusive: DocumentApp.Text, endOffsetInclusive: number): DocumentApp.RangeBuilder;
    addRange(range: DocumentApp.Range): DocumentApp.RangeBuilder;
    build(): DocumentApp.Range;
    getRangeElements(): DocumentApp.RangeElement[];
    getSelectedElements(): DocumentApp.RangeElement[];

  }


  export interface RangeElement {

    getElement(): DocumentApp.Element;
    getEndOffsetInclusive(): number;
    getStartOffset(): number;
    isPartial(): boolean;

  }


  export interface Table {

    appendTableRow(): DocumentApp.TableRow;
    appendTableRow(tableRow: DocumentApp.TableRow): DocumentApp.TableRow;
    clear(): DocumentApp.Table;
    copy(): DocumentApp.Table;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getBorderColor(): string;
    getBorderWidth(): number;
    getCell(rowIndex: number, cellIndex: number): DocumentApp.TableCell;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getColumnWidth(columnIndex: number): number;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getNumRows(): number;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getRow(rowIndex: number): DocumentApp.TableRow;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertTableRow(childIndex: number): DocumentApp.TableRow;
    insertTableRow(childIndex: number, tableRow: DocumentApp.TableRow): DocumentApp.TableRow;
    isAtDocumentEnd(): boolean;
    removeChild(child: DocumentApp.Element): DocumentApp.Table;
    removeFromParent(): DocumentApp.Table;
    removeRow(rowIndex: number): DocumentApp.TableRow;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.Table;
    setBorderColor(color: string): DocumentApp.Table;
    setBorderWidth(width: number): DocumentApp.Table;
    setColumnWidth(columnIndex: number, width: number): DocumentApp.Table;
    setLinkUrl(url: string): DocumentApp.Table;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.Table;

  }


  export interface TableCell {

    appendHorizontalRule(): DocumentApp.HorizontalRule;
    appendImage(image: CommonModule.BlobSource): DocumentApp.InlineImage;
    appendImage(image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    appendListItem(listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    appendListItem(text: string): DocumentApp.ListItem;
    appendParagraph(paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    appendParagraph(text: string): DocumentApp.Paragraph;
    appendTable(): DocumentApp.Table;
    appendTable(table: DocumentApp.Table): DocumentApp.Table;
    appendTable(cells: string[][]): DocumentApp.Table;
    clear(): DocumentApp.TableCell;
    copy(): DocumentApp.TableCell;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getBackgroundColor(): string;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getColSpan(): number;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getPaddingBottom(): number;
    getPaddingLeft(): number;
    getPaddingRight(): number;
    getPaddingTop(): number;
    getParent(): DocumentApp.ContainerElement;
    getParentRow(): DocumentApp.TableRow;
    getParentTable(): DocumentApp.Table;
    getPreviousSibling(): DocumentApp.Element;
    getRowSpan(): number;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    getVerticalAlignment(): DocumentApp.VerticalAlignment;
    getWidth(): number;
    insertHorizontalRule(childIndex: number): DocumentApp.HorizontalRule;
    insertImage(childIndex: number, image: CommonModule.BlobSource): DocumentApp.InlineImage;
    insertImage(childIndex: number, image: DocumentApp.InlineImage): DocumentApp.InlineImage;
    insertListItem(childIndex: number, listItem: DocumentApp.ListItem): DocumentApp.ListItem;
    insertListItem(childIndex: number, text: string): DocumentApp.ListItem;
    insertParagraph(childIndex: number, paragraph: DocumentApp.Paragraph): DocumentApp.Paragraph;
    insertParagraph(childIndex: number, text: string): DocumentApp.Paragraph;
    insertTable(childIndex: number): DocumentApp.Table;
    insertTable(childIndex: number, table: DocumentApp.Table): DocumentApp.Table;
    insertTable(childIndex: number, cells: string[][]): DocumentApp.Table;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.TableCell;
    removeChild(child: DocumentApp.Element): DocumentApp.TableCell;
    removeFromParent(): DocumentApp.TableCell;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.TableCell;
    setBackgroundColor(color: string): DocumentApp.TableCell;
    setLinkUrl(url: string): DocumentApp.TableCell;
    setPaddingBottom(paddingBottom: number): DocumentApp.TableCell;
    setPaddingLeft(paddingLeft: number): DocumentApp.TableCell;
    setPaddingRight(paddingTop: number): DocumentApp.TableCell;
    setPaddingTop(paddingTop: number): DocumentApp.TableCell;
    setText(text: string): DocumentApp.TableCell;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.TableCell;
    setVerticalAlignment(alignment: DocumentApp.VerticalAlignment): DocumentApp.TableCell;
    setWidth(width: number): DocumentApp.TableCell;

  }


  export interface TableOfContents {

    clear(): DocumentApp.TableOfContents;
    copy(): DocumentApp.TableOfContents;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getLinkUrl(): string;
    getNextSibling(): DocumentApp.Element;
    getNumChildren(): number;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    removeFromParent(): DocumentApp.TableOfContents;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.TableOfContents;
    setLinkUrl(url: string): DocumentApp.TableOfContents;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.TableOfContents;

  }


  export interface TableRow {

    appendTableCell(): DocumentApp.TableCell;
    appendTableCell(tableCell: DocumentApp.TableCell): DocumentApp.TableCell;
    appendTableCell(textContents: string): DocumentApp.TableCell;
    clear(): DocumentApp.TableRow;
    copy(): DocumentApp.TableRow;
    editAsText(): DocumentApp.Text;
    findElement(elementType: DocumentApp.ElementType): DocumentApp.RangeElement;
    findElement(elementType: DocumentApp.ElementType, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getCell(cellIndex: number): DocumentApp.TableCell;
    getChild(childIndex: number): DocumentApp.Element;
    getChildIndex(child: DocumentApp.Element): number;
    getLinkUrl(): string;
    getMinimumHeight(): number;
    getNextSibling(): DocumentApp.Element;
    getNumCells(): number;
    getNumChildren(): number;
    getParent(): DocumentApp.ContainerElement;
    getParentTable(): DocumentApp.Table;
    getPreviousSibling(): DocumentApp.Element;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getType(): DocumentApp.ElementType;
    insertTableCell(childIndex: number): DocumentApp.TableCell;
    insertTableCell(childIndex: number, tableCell: DocumentApp.TableCell): DocumentApp.TableCell;
    insertTableCell(childIndex: number, textContents: string): DocumentApp.TableCell;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.TableRow;
    removeCell(cellIndex: number): DocumentApp.TableCell;
    removeChild(child: DocumentApp.Element): DocumentApp.TableRow;
    removeFromParent(): DocumentApp.TableRow;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(attributes: any): DocumentApp.TableRow;
    setLinkUrl(url: string): DocumentApp.TableRow;
    setMinimumHeight(minHeight: number): DocumentApp.TableRow;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.TableRow;

  }


  export interface Text {

    appendText(text: string): DocumentApp.Text;
    copy(): DocumentApp.Text;
    deleteText(startOffset: number, endOffsetInclusive: number): DocumentApp.Text;
    editAsText(): DocumentApp.Text;
    findText(searchPattern: string): DocumentApp.RangeElement;
    findText(searchPattern: string, from: DocumentApp.RangeElement): DocumentApp.RangeElement;
    getAttributes(): any;
    getAttributes(offset: number): any;
    getBackgroundColor(): string;
    getBackgroundColor(offset: number): string;
    getFontFamily(): string;
    getFontFamily(offset: number): string;
    getFontSize(): number;
    getFontSize(offset: number): number;
    getForegroundColor(): string;
    getForegroundColor(offset: number): string;
    getLinkUrl(): string;
    getLinkUrl(offset: number): string;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getText(): string;
    getTextAlignment(): DocumentApp.TextAlignment;
    getTextAlignment(offset: number): DocumentApp.TextAlignment;
    getTextAttributeIndices(): number[];
    getType(): DocumentApp.ElementType;
    insertText(offset: number, text: string): DocumentApp.Text;
    isAtDocumentEnd(): boolean;
    isBold(): boolean;
    isBold(offset: number): boolean;
    isItalic(): boolean;
    isItalic(offset: number): boolean;
    isStrikethrough(): boolean;
    isStrikethrough(offset: number): boolean;
    isUnderline(): boolean;
    isUnderline(offset: number): boolean;
    merge(): DocumentApp.Text;
    removeFromParent(): DocumentApp.Text;
    replaceText(searchPattern: string, replacement: string): DocumentApp.Element;
    setAttributes(startOffset: number, endOffsetInclusive: number, attributes: any): DocumentApp.Text;
    setAttributes(attributes: any): DocumentApp.Text;
    setBackgroundColor(startOffset: number, endOffsetInclusive: number, color: string): DocumentApp.Text;
    setBackgroundColor(color: string): DocumentApp.Text;
    setBold(bold: boolean): DocumentApp.Text;
    setBold(startOffset: number, endOffsetInclusive: number, bold: boolean): DocumentApp.Text;
    setFontFamily(startOffset: number, endOffsetInclusive: number, fontFamilyName: string): DocumentApp.Text;
    setFontFamily(fontFamilyName: string): DocumentApp.Text;
    setFontSize(size: number): DocumentApp.Text;
    setFontSize(startOffset: number, endOffsetInclusive: number, size: number): DocumentApp.Text;
    setForegroundColor(startOffset: number, endOffsetInclusive: number, color: string): DocumentApp.Text;
    setForegroundColor(color: string): DocumentApp.Text;
    setItalic(italic: boolean): DocumentApp.Text;
    setItalic(startOffset: number, endOffsetInclusive: number, italic: boolean): DocumentApp.Text;
    setLinkUrl(startOffset: number, endOffsetInclusive: number, url: string): DocumentApp.Text;
    setLinkUrl(url: string): DocumentApp.Text;
    setStrikethrough(strikethrough: boolean): DocumentApp.Text;
    setStrikethrough(startOffset: number, endOffsetInclusive: number, strikethrough: boolean): DocumentApp.Text;
    setText(text: string): DocumentApp.Text;
    setTextAlignment(textAlignment: DocumentApp.TextAlignment): DocumentApp.Text;
    setTextAlignment(startOffset: number, endOffsetInclusive: number, textAlignment: DocumentApp.TextAlignment): DocumentApp.Text;
    setUnderline(underline: boolean): DocumentApp.Text;
    setUnderline(startOffset: number, endOffsetInclusive: number, underline: boolean): DocumentApp.Text;

  }


  export enum TextAlignment {

    NORMAL,
    SUBSCRIPT,
    SUPERSCRIPT

  }


  export interface UnsupportedElement {

    copy(): DocumentApp.UnsupportedElement;
    getAttributes(): any;
    getNextSibling(): DocumentApp.Element;
    getParent(): DocumentApp.ContainerElement;
    getPreviousSibling(): DocumentApp.Element;
    getType(): DocumentApp.ElementType;
    isAtDocumentEnd(): boolean;
    merge(): DocumentApp.UnsupportedElement;
    removeFromParent(): DocumentApp.UnsupportedElement;
    setAttributes(attributes: any): DocumentApp.UnsupportedElement;

  }


  export enum VerticalAlignment {

    BOTTOM,
    CENTER,
    TOP

  }


  export interface PositionedDrawing {

    getId(): string;
    getLayout(): DocumentApp.PositionedLayout;
    getLeftOffset(): number;
    getParagraph(): DocumentApp.Paragraph;
    getTopOffset(): number;
    setLayout(layout: DocumentApp.PositionedLayout): DocumentApp.PositionedDrawing;
    setLeftOffset(offset: number): DocumentApp.PositionedDrawing;
    setTopOffset(offset: number): DocumentApp.PositionedDrawing;

  }


}