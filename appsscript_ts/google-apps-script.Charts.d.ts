/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: Charts.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class Charts {
  static newAreaChart(): Charts.AreaChartBuilder;
  static newBarChart(): Charts.BarChartBuilder;
  static newCategoryFilter(): Charts.CategoryFilterBuilder;
  static newColumnChart(): Charts.ColumnChartBuilder;
  static newDashboardPanel(): Charts.DashboardPanelBuilder;
  static newDataTable(): CommonModule.DataTableBuilder;
  static newDataViewDefinition(): Charts.DataViewDefinitionBuilder;
  static newLineChart(): Charts.LineChartBuilder;
  static newNumberRangeFilter(): Charts.NumberRangeFilterBuilder;
  static newPieChart(): Charts.PieChartBuilder;
  static newScatterChart(): Charts.ScatterChartBuilder;
  static newStringFilter(): Charts.StringFilterBuilder;
  static newTableChart(): Charts.TableChartBuilder;
  static newTextStyle(): Charts.TextStyleBuilder;
}

declare namespace Charts {

  export interface AreaChartBuilder {

    build(): Charts.Chart;
    reverseCategories(): Charts.AreaChartBuilder;
    setBackgroundColor(cssValue: string): Charts.AreaChartBuilder;
    setColors(cssValues: string[]): Charts.AreaChartBuilder;
    setDataSourceUrl(url: string): Charts.AreaChartBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.AreaChartBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.AreaChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): Charts.AreaChartBuilder;
    setDimensions(width: number, height: number): Charts.AreaChartBuilder;
    setLegendPosition(position: Charts.Position): Charts.AreaChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): Charts.AreaChartBuilder;
    setOption(option: string, value: any): Charts.AreaChartBuilder;
    setPointStyle(style: Charts.PointStyle): Charts.AreaChartBuilder;
    setRange(start: number, end: number): Charts.AreaChartBuilder;
    setStacked(): Charts.AreaChartBuilder;
    setTitle(chartTitle: string): Charts.AreaChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): Charts.AreaChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): Charts.AreaChartBuilder;
    setXAxisTitle(title: string): Charts.AreaChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.AreaChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): Charts.AreaChartBuilder;
    setYAxisTitle(title: string): Charts.AreaChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.AreaChartBuilder;
    useLogScale(): Charts.AreaChartBuilder;

  }


  export interface BarChartBuilder {

    build(): Charts.Chart;
    reverseCategories(): Charts.BarChartBuilder;
    reverseDirection(): Charts.BarChartBuilder;
    setBackgroundColor(cssValue: string): Charts.BarChartBuilder;
    setColors(cssValues: string[]): Charts.BarChartBuilder;
    setDataSourceUrl(url: string): Charts.BarChartBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.BarChartBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.BarChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): Charts.BarChartBuilder;
    setDimensions(width: number, height: number): Charts.BarChartBuilder;
    setLegendPosition(position: Charts.Position): Charts.BarChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): Charts.BarChartBuilder;
    setOption(option: string, value: any): Charts.BarChartBuilder;
    setRange(start: number, end: number): Charts.BarChartBuilder;
    setStacked(): Charts.BarChartBuilder;
    setTitle(chartTitle: string): Charts.BarChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): Charts.BarChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): Charts.BarChartBuilder;
    setXAxisTitle(title: string): Charts.BarChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.BarChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): Charts.BarChartBuilder;
    setYAxisTitle(title: string): Charts.BarChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.BarChartBuilder;
    useLogScale(): Charts.BarChartBuilder;

  }


  export interface CategoryFilterBuilder {

    build(): Charts.Control;
    setAllowMultiple(allowMultiple: boolean): Charts.CategoryFilterBuilder;
    setAllowNone(allowNone: boolean): Charts.CategoryFilterBuilder;
    setAllowTyping(allowTyping: boolean): Charts.CategoryFilterBuilder;
    setCaption(caption: string): Charts.CategoryFilterBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.CategoryFilterBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.CategoryFilterBuilder;
    setFilterColumnIndex(columnIndex: number): Charts.CategoryFilterBuilder;
    setFilterColumnLabel(columnLabel: string): Charts.CategoryFilterBuilder;
    setLabel(label: string): Charts.CategoryFilterBuilder;
    setLabelSeparator(labelSeparator: string): Charts.CategoryFilterBuilder;
    setLabelStacking(orientation: Charts.Orientation): Charts.CategoryFilterBuilder;
    setSelectedValuesLayout(layout: Charts.PickerValuesLayout): Charts.CategoryFilterBuilder;
    setSortValues(sortValues: boolean): Charts.CategoryFilterBuilder;
    setValues(values: string[]): Charts.CategoryFilterBuilder;

  }


  export interface Chart {

    getAs(contentType: string): CommonModule.Blob;
    getBlob(): CommonModule.Blob;
    getId(): string;
    getOptions(): Charts.ChartOptions;
    getType(): string;
    setId(id: string): Charts.Chart;

  }


  export interface ChartOptions {

    get(option: string): any;

  }


  export enum ChartType {

    AREA,
    BAR,
    COLUMN,
    LINE,
    PIE,
    SCATTER,
    TABLE,
    COMBO,
    HISTOGRAM

  }


  export interface ColumnChartBuilder {

    build(): Charts.Chart;
    reverseCategories(): Charts.ColumnChartBuilder;
    setBackgroundColor(cssValue: string): Charts.ColumnChartBuilder;
    setColors(cssValues: string[]): Charts.ColumnChartBuilder;
    setDataSourceUrl(url: string): Charts.ColumnChartBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.ColumnChartBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.ColumnChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): Charts.ColumnChartBuilder;
    setDimensions(width: number, height: number): Charts.ColumnChartBuilder;
    setLegendPosition(position: Charts.Position): Charts.ColumnChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): Charts.ColumnChartBuilder;
    setOption(option: string, value: any): Charts.ColumnChartBuilder;
    setRange(start: number, end: number): Charts.ColumnChartBuilder;
    setStacked(): Charts.ColumnChartBuilder;
    setTitle(chartTitle: string): Charts.ColumnChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): Charts.ColumnChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): Charts.ColumnChartBuilder;
    setXAxisTitle(title: string): Charts.ColumnChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.ColumnChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): Charts.ColumnChartBuilder;
    setYAxisTitle(title: string): Charts.ColumnChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.ColumnChartBuilder;
    useLogScale(): Charts.ColumnChartBuilder;

  }


  export interface Control {

    getId(): string;
    getType(): string;
    setId(id: string): Charts.Control;

  }


  export enum CurveStyle {

    NORMAL,
    SMOOTH

  }


  export interface DashboardPanel {

    add(widget: UiApp.Widget): Charts.DashboardPanel;
    getId(): string;
    getType(): string;
    setId(id: string): Charts.DashboardPanel;

  }


  export interface DashboardPanelBuilder {

    bind(control: Charts.Control, chart: Charts.Chart): Charts.DashboardPanelBuilder;
    bind(controls: Charts.Control[], charts: Charts.Chart[]): Charts.DashboardPanelBuilder;
    build(): Charts.DashboardPanel;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.DashboardPanelBuilder;
    setDataTable(source: CommonModule.DataTableSource): Charts.DashboardPanelBuilder;

  }


  export interface DataViewDefinition {

  }


  export interface DataViewDefinitionBuilder {

    build(): Charts.DataViewDefinition;
    setColumns(columns: any[]): Charts.DataViewDefinitionBuilder;

  }


  export interface LineChartBuilder {

    build(): Charts.Chart;
    reverseCategories(): Charts.LineChartBuilder;
    setBackgroundColor(cssValue: string): Charts.LineChartBuilder;
    setColors(cssValues: string[]): Charts.LineChartBuilder;
    setCurveStyle(style: Charts.CurveStyle): Charts.LineChartBuilder;
    setDataSourceUrl(url: string): Charts.LineChartBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.LineChartBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.LineChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): Charts.LineChartBuilder;
    setDimensions(width: number, height: number): Charts.LineChartBuilder;
    setLegendPosition(position: Charts.Position): Charts.LineChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): Charts.LineChartBuilder;
    setOption(option: string, value: any): Charts.LineChartBuilder;
    setPointStyle(style: Charts.PointStyle): Charts.LineChartBuilder;
    setRange(start: number, end: number): Charts.LineChartBuilder;
    setTitle(chartTitle: string): Charts.LineChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): Charts.LineChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): Charts.LineChartBuilder;
    setXAxisTitle(title: string): Charts.LineChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.LineChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): Charts.LineChartBuilder;
    setYAxisTitle(title: string): Charts.LineChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.LineChartBuilder;
    useLogScale(): Charts.LineChartBuilder;

  }


  export enum MatchType {

    ANY,
    EXACT,
    PREFIX

  }


  export interface NumberRangeFilterBuilder {

    build(): Charts.Control;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.NumberRangeFilterBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.NumberRangeFilterBuilder;
    setFilterColumnIndex(columnIndex: number): Charts.NumberRangeFilterBuilder;
    setFilterColumnLabel(columnLabel: string): Charts.NumberRangeFilterBuilder;
    setLabel(label: string): Charts.NumberRangeFilterBuilder;
    setLabelSeparator(labelSeparator: string): Charts.NumberRangeFilterBuilder;
    setLabelStacking(orientation: Charts.Orientation): Charts.NumberRangeFilterBuilder;
    setMaxValue(maxValue: number): Charts.NumberRangeFilterBuilder;
    setMinValue(minValue: number): Charts.NumberRangeFilterBuilder;
    setOrientation(orientation: Charts.Orientation): Charts.NumberRangeFilterBuilder;
    setShowRangeValues(showRangeValues: boolean): Charts.NumberRangeFilterBuilder;
    setTicks(ticks: number): Charts.NumberRangeFilterBuilder;

  }


  export enum Orientation {

    HORIZONTAL,
    VERTICAL

  }


  export enum PickerValuesLayout {

    ASIDE,
    BELOW,
    BELOW_STACKED,
    BELOW_WRAPPING

  }


  export interface PieChartBuilder {

    build(): Charts.Chart;
    reverseCategories(): Charts.PieChartBuilder;
    set3D(): Charts.PieChartBuilder;
    setBackgroundColor(cssValue: string): Charts.PieChartBuilder;
    setColors(cssValues: string[]): Charts.PieChartBuilder;
    setDataSourceUrl(url: string): Charts.PieChartBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.PieChartBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.PieChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): Charts.PieChartBuilder;
    setDimensions(width: number, height: number): Charts.PieChartBuilder;
    setLegendPosition(position: Charts.Position): Charts.PieChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): Charts.PieChartBuilder;
    setOption(option: string, value: any): Charts.PieChartBuilder;
    setTitle(chartTitle: string): Charts.PieChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): Charts.PieChartBuilder;

  }


  export enum PointStyle {

    HUGE,
    LARGE,
    MEDIUM,
    NONE,
    TINY

  }


  export enum Position {

    BOTTOM,
    NONE,
    RIGHT,
    TOP

  }


  export interface ScatterChartBuilder {

    build(): Charts.Chart;
    setBackgroundColor(cssValue: string): Charts.ScatterChartBuilder;
    setColors(cssValues: string[]): Charts.ScatterChartBuilder;
    setDataSourceUrl(url: string): Charts.ScatterChartBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.ScatterChartBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.ScatterChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): Charts.ScatterChartBuilder;
    setDimensions(width: number, height: number): Charts.ScatterChartBuilder;
    setLegendPosition(position: Charts.Position): Charts.ScatterChartBuilder;
    setLegendTextStyle(textStyle: Charts.TextStyle): Charts.ScatterChartBuilder;
    setOption(option: string, value: any): Charts.ScatterChartBuilder;
    setPointStyle(style: Charts.PointStyle): Charts.ScatterChartBuilder;
    setTitle(chartTitle: string): Charts.ScatterChartBuilder;
    setTitleTextStyle(textStyle: Charts.TextStyle): Charts.ScatterChartBuilder;
    setXAxisLogScale(): Charts.ScatterChartBuilder;
    setXAxisRange(start: number, end: number): Charts.ScatterChartBuilder;
    setXAxisTextStyle(textStyle: Charts.TextStyle): Charts.ScatterChartBuilder;
    setXAxisTitle(title: string): Charts.ScatterChartBuilder;
    setXAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.ScatterChartBuilder;
    setYAxisLogScale(): Charts.ScatterChartBuilder;
    setYAxisRange(start: number, end: number): Charts.ScatterChartBuilder;
    setYAxisTextStyle(textStyle: Charts.TextStyle): Charts.ScatterChartBuilder;
    setYAxisTitle(title: string): Charts.ScatterChartBuilder;
    setYAxisTitleTextStyle(textStyle: Charts.TextStyle): Charts.ScatterChartBuilder;

  }


  export interface StringFilterBuilder {

    build(): Charts.Control;
    setCaseSensitive(caseSensitive: boolean): Charts.StringFilterBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.StringFilterBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.StringFilterBuilder;
    setFilterColumnIndex(columnIndex: number): Charts.StringFilterBuilder;
    setFilterColumnLabel(columnLabel: string): Charts.StringFilterBuilder;
    setLabel(label: string): Charts.StringFilterBuilder;
    setLabelSeparator(labelSeparator: string): Charts.StringFilterBuilder;
    setLabelStacking(orientation: Charts.Orientation): Charts.StringFilterBuilder;
    setMatchType(matchType: Charts.MatchType): Charts.StringFilterBuilder;
    setRealtimeTrigger(realtimeTrigger: boolean): Charts.StringFilterBuilder;

  }


  export interface TableChartBuilder {

    build(): Charts.Chart;
    enablePaging(enablePaging: boolean): Charts.TableChartBuilder;
    enablePaging(pageSize: number): Charts.TableChartBuilder;
    enablePaging(pageSize: number, startPage: number): Charts.TableChartBuilder;
    enableRtlTable(rtlEnabled: boolean): Charts.TableChartBuilder;
    enableSorting(enableSorting: boolean): Charts.TableChartBuilder;
    setDataSourceUrl(url: string): Charts.TableChartBuilder;
    setDataTable(tableBuilder: CommonModule.DataTableBuilder): Charts.TableChartBuilder;
    setDataTable(table: CommonModule.DataTableSource): Charts.TableChartBuilder;
    setDataViewDefinition(dataViewDefinition: Charts.DataViewDefinition): Charts.TableChartBuilder;
    setDimensions(width: number, height: number): Charts.TableChartBuilder;
    setFirstRowNumber(number: number): Charts.TableChartBuilder;
    setInitialSortingAscending(column: number): Charts.TableChartBuilder;
    setInitialSortingDescending(column: number): Charts.TableChartBuilder;
    setOption(option: string, value: any): Charts.TableChartBuilder;
    showRowNumberColumn(showRowNumber: boolean): Charts.TableChartBuilder;
    useAlternatingRowStyle(alternate: boolean): Charts.TableChartBuilder;

  }


  export interface TextStyle {

    getColor(): string;
    getFontName(): string;
    getFontSize(): number;

  }


  export interface TextStyleBuilder {

    build(): Charts.TextStyle;
    setColor(cssValue: string): Charts.TextStyleBuilder;
    setFontName(fontName: string): Charts.TextStyleBuilder;
    setFontSize(fontSize: number): Charts.TextStyleBuilder;

  }


}