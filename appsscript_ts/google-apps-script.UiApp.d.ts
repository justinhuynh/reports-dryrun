/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: UiApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class UiApp {
  static createApplication(): UiApp.UiInstance;
  static getActiveApplication(): UiApp.UiInstance;
  static getUserAgent(): string;
}

declare namespace UiApp {

  export interface AbsolutePanel {

    add(widget: UiApp.Widget): UiApp.AbsolutePanel;
    add(widget: UiApp.Widget, left: number, top: number): UiApp.AbsolutePanel;
    addStyleDependentName(styleName: string): UiApp.AbsolutePanel;
    addStyleName(styleName: string): UiApp.AbsolutePanel;
    clear(): UiApp.AbsolutePanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    remove(index: number): UiApp.AbsolutePanel;
    remove(widget: UiApp.Widget): UiApp.AbsolutePanel;
    setHeight(height: string): UiApp.AbsolutePanel;
    setId(id: string): UiApp.AbsolutePanel;
    setLayoutData(layout: any): UiApp.AbsolutePanel;
    setPixelSize(width: number, height: number): UiApp.AbsolutePanel;
    setSize(width: string, height: string): UiApp.AbsolutePanel;
    setStyleAttribute(attribute: string, value: string): UiApp.AbsolutePanel;
    setStyleAttributes(attributes: any): UiApp.AbsolutePanel;
    setStyleName(styleName: string): UiApp.AbsolutePanel;
    setStylePrimaryName(styleName: string): UiApp.AbsolutePanel;
    setTag(tag: string): UiApp.AbsolutePanel;
    setTitle(title: string): UiApp.AbsolutePanel;
    setVisible(visible: boolean): UiApp.AbsolutePanel;
    setWidgetPosition(widget: UiApp.Widget, left: number, top: number): UiApp.AbsolutePanel;
    setWidth(width: string): UiApp.AbsolutePanel;

  }


  export interface Anchor {

    addBlurHandler(handler: UiApp.Handler): UiApp.Anchor;
    addClickHandler(handler: UiApp.Handler): UiApp.Anchor;
    addFocusHandler(handler: UiApp.Handler): UiApp.Anchor;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.Anchor;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.Anchor;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.Anchor;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.Anchor;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.Anchor;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.Anchor;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.Anchor;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.Anchor;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.Anchor;
    addStyleDependentName(styleName: string): UiApp.Anchor;
    addStyleName(styleName: string): UiApp.Anchor;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.Anchor;
    setDirection(direction: UiApp.Component): UiApp.Anchor;
    setEnabled(enabled: boolean): UiApp.Anchor;
    setFocus(focus: boolean): UiApp.Anchor;
    setHTML(html: string): UiApp.Anchor;
    setHeight(height: string): UiApp.Anchor;
    setHorizontalAlignment(horizontalAlignment: UiApp.HorizontalAlignment): UiApp.Anchor;
    setHref(href: string): UiApp.Anchor;
    setId(id: string): UiApp.Anchor;
    setLayoutData(layout: any): UiApp.Anchor;
    setName(name: string): UiApp.Anchor;
    setPixelSize(width: number, height: number): UiApp.Anchor;
    setSize(width: string, height: string): UiApp.Anchor;
    setStyleAttribute(attribute: string, value: string): UiApp.Anchor;
    setStyleAttributes(attributes: any): UiApp.Anchor;
    setStyleName(styleName: string): UiApp.Anchor;
    setStylePrimaryName(styleName: string): UiApp.Anchor;
    setTabIndex(index: number): UiApp.Anchor;
    setTag(tag: string): UiApp.Anchor;
    setTarget(target: string): UiApp.Anchor;
    setText(text: string): UiApp.Anchor;
    setTitle(title: string): UiApp.Anchor;
    setVisible(visible: boolean): UiApp.Anchor;
    setWidth(width: string): UiApp.Anchor;
    setWordWrap(wordWrap: boolean): UiApp.Anchor;

  }


  export interface Button {

    addBlurHandler(handler: UiApp.Handler): UiApp.Button;
    addClickHandler(handler: UiApp.Handler): UiApp.Button;
    addFocusHandler(handler: UiApp.Handler): UiApp.Button;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.Button;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.Button;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.Button;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.Button;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.Button;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.Button;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.Button;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.Button;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.Button;
    addStyleDependentName(styleName: string): UiApp.Button;
    addStyleName(styleName: string): UiApp.Button;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.Button;
    setEnabled(enabled: boolean): UiApp.Button;
    setFocus(focus: boolean): UiApp.Button;
    setHTML(html: string): UiApp.Button;
    setHeight(height: string): UiApp.Button;
    setId(id: string): UiApp.Button;
    setLayoutData(layout: any): UiApp.Button;
    setPixelSize(width: number, height: number): UiApp.Button;
    setSize(width: string, height: string): UiApp.Button;
    setStyleAttribute(attribute: string, value: string): UiApp.Button;
    setStyleAttributes(attributes: any): UiApp.Button;
    setStyleName(styleName: string): UiApp.Button;
    setStylePrimaryName(styleName: string): UiApp.Button;
    setTabIndex(index: number): UiApp.Button;
    setTag(tag: string): UiApp.Button;
    setText(text: string): UiApp.Button;
    setTitle(title: string): UiApp.Button;
    setVisible(visible: boolean): UiApp.Button;
    setWidth(width: string): UiApp.Button;

  }


  export interface CaptionPanel {

    add(widget: UiApp.Widget): UiApp.CaptionPanel;
    addStyleDependentName(styleName: string): UiApp.CaptionPanel;
    addStyleName(styleName: string): UiApp.CaptionPanel;
    clear(): UiApp.CaptionPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    setCaptionText(text: string): UiApp.CaptionPanel;
    setContentWidget(widget: UiApp.Widget): UiApp.CaptionPanel;
    setHeight(height: string): UiApp.CaptionPanel;
    setId(id: string): UiApp.CaptionPanel;
    setLayoutData(layout: any): UiApp.CaptionPanel;
    setPixelSize(width: number, height: number): UiApp.CaptionPanel;
    setSize(width: string, height: string): UiApp.CaptionPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.CaptionPanel;
    setStyleAttributes(attributes: any): UiApp.CaptionPanel;
    setStyleName(styleName: string): UiApp.CaptionPanel;
    setStylePrimaryName(styleName: string): UiApp.CaptionPanel;
    setTag(tag: string): UiApp.CaptionPanel;
    setText(text: string): UiApp.CaptionPanel;
    setTitle(title: string): UiApp.CaptionPanel;
    setVisible(visible: boolean): UiApp.CaptionPanel;
    setWidget(widget: UiApp.Widget): UiApp.CaptionPanel;
    setWidth(width: string): UiApp.CaptionPanel;

  }


  export interface CheckBox {

    addBlurHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addClickHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addFocusHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.CheckBox;
    addStyleDependentName(styleName: string): UiApp.CheckBox;
    addStyleName(styleName: string): UiApp.CheckBox;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.CheckBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.CheckBox;
    setEnabled(enabled: boolean): UiApp.CheckBox;
    setFocus(focus: boolean): UiApp.CheckBox;
    setFormValue(formValue: string): UiApp.CheckBox;
    setHTML(html: string): UiApp.CheckBox;
    setHeight(height: string): UiApp.CheckBox;
    setId(id: string): UiApp.CheckBox;
    setLayoutData(layout: any): UiApp.CheckBox;
    setName(name: string): UiApp.CheckBox;
    setPixelSize(width: number, height: number): UiApp.CheckBox;
    setSize(width: string, height: string): UiApp.CheckBox;
    setStyleAttribute(attribute: string, value: string): UiApp.CheckBox;
    setStyleAttributes(attributes: any): UiApp.CheckBox;
    setStyleName(styleName: string): UiApp.CheckBox;
    setStylePrimaryName(styleName: string): UiApp.CheckBox;
    setTabIndex(index: number): UiApp.CheckBox;
    setTag(tag: string): UiApp.CheckBox;
    setText(text: string): UiApp.CheckBox;
    setTitle(title: string): UiApp.CheckBox;
    setValue(value: boolean): UiApp.CheckBox;
    setValue(value: boolean, fireEvents: boolean): UiApp.CheckBox;
    setVisible(visible: boolean): UiApp.CheckBox;
    setWidth(width: string): UiApp.CheckBox;

  }


  export interface ClientHandler {

    forEventSource(): UiApp.ClientHandler;
    forTargets(...widgets: any[]): UiApp.ClientHandler;
    getId(): string;
    getTag(): string;
    getType(): string;
    setEnabled(enabled: boolean): UiApp.ClientHandler;
    setHTML(html: string): UiApp.ClientHandler;
    setId(id: string): UiApp.ClientHandler;
    setStyleAttribute(row: number, column: number, attribute: string, value: string): UiApp.ClientHandler;
    setStyleAttribute(attribute: string, value: string): UiApp.ClientHandler;
    setStyleAttributes(row: number, column: number, attributes: any): UiApp.ClientHandler;
    setStyleAttributes(attributes: any): UiApp.ClientHandler;
    setTag(tag: string): UiApp.ClientHandler;
    setText(text: string): UiApp.ClientHandler;
    setValue(value: boolean): UiApp.ClientHandler;
    setVisible(visible: boolean): UiApp.ClientHandler;
    validateEmail(widget: UiApp.Widget): UiApp.ClientHandler;
    validateInteger(widget: UiApp.Widget): UiApp.ClientHandler;
    validateLength(widget: UiApp.Widget, min: number, max: number): UiApp.ClientHandler;
    validateMatches(widget: UiApp.Widget, pattern: string): UiApp.ClientHandler;
    validateMatches(widget: UiApp.Widget, pattern: string, flags: string): UiApp.ClientHandler;
    validateNotEmail(widget: UiApp.Widget): UiApp.ClientHandler;
    validateNotInteger(widget: UiApp.Widget): UiApp.ClientHandler;
    validateNotLength(widget: UiApp.Widget, min: number, max: number): UiApp.ClientHandler;
    validateNotMatches(widget: UiApp.Widget, pattern: string): UiApp.ClientHandler;
    validateNotMatches(widget: UiApp.Widget, pattern: string, flags: string): UiApp.ClientHandler;
    validateNotNumber(widget: UiApp.Widget): UiApp.ClientHandler;
    validateNotOptions(widget: UiApp.Widget, options: string[]): UiApp.ClientHandler;
    validateNotRange(widget: UiApp.Widget, min: number, max: number): UiApp.ClientHandler;
    validateNotSum(widgets: UiApp.Widget[], sum: number): UiApp.ClientHandler;
    validateNumber(widget: UiApp.Widget): UiApp.ClientHandler;
    validateOptions(widget: UiApp.Widget, options: string[]): UiApp.ClientHandler;
    validateRange(widget: UiApp.Widget, min: number, max: number): UiApp.ClientHandler;
    validateSum(widgets: UiApp.Widget[], sum: number): UiApp.ClientHandler;

  }


  export interface Component {

    getId(): string;
    getType(): string;

  }


  export interface DateBox {

    addStyleDependentName(styleName: string): UiApp.DateBox;
    addStyleName(styleName: string): UiApp.DateBox;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.DateBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    hideDatePicker(): UiApp.DateBox;
    setAccessKey(accessKey: number): UiApp.DateBox;
    setEnabled(enabled: boolean): UiApp.DateBox;
    setFireEventsForInvalid(fireEvents: boolean): UiApp.DateBox;
    setFocus(focus: boolean): UiApp.DateBox;
    setFormat(dateTimeFormat: UiApp.DateTimeFormat): UiApp.DateBox;
    setHeight(height: string): UiApp.DateBox;
    setId(id: string): UiApp.DateBox;
    setLayoutData(layout: any): UiApp.DateBox;
    setName(name: string): UiApp.DateBox;
    setPixelSize(width: number, height: number): UiApp.DateBox;
    setSize(width: string, height: string): UiApp.DateBox;
    setStyleAttribute(attribute: string, value: string): UiApp.DateBox;
    setStyleAttributes(attributes: any): UiApp.DateBox;
    setStyleName(styleName: string): UiApp.DateBox;
    setStylePrimaryName(styleName: string): UiApp.DateBox;
    setTabIndex(index: number): UiApp.DateBox;
    setTag(tag: string): UiApp.DateBox;
    setTitle(title: string): UiApp.DateBox;
    setValue(date: Date): UiApp.DateBox;
    setVisible(visible: boolean): UiApp.DateBox;
    setWidth(width: string): UiApp.DateBox;
    showDatePicker(): UiApp.DateBox;

  }


  export interface DatePicker {

    addStyleDependentName(styleName: string): UiApp.DatePicker;
    addStyleName(styleName: string): UiApp.DatePicker;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.DatePicker;
    getId(): string;
    getTag(): string;
    getType(): string;
    setCurrentMonth(date: Date): UiApp.DatePicker;
    setHeight(height: string): UiApp.DatePicker;
    setId(id: string): UiApp.DatePicker;
    setLayoutData(layout: any): UiApp.DatePicker;
    setName(name: string): UiApp.DatePicker;
    setPixelSize(width: number, height: number): UiApp.DatePicker;
    setSize(width: string, height: string): UiApp.DatePicker;
    setStyleAttribute(attribute: string, value: string): UiApp.DatePicker;
    setStyleAttributes(attributes: any): UiApp.DatePicker;
    setStyleName(styleName: string): UiApp.DatePicker;
    setStylePrimaryName(styleName: string): UiApp.DatePicker;
    setTag(tag: string): UiApp.DatePicker;
    setTitle(title: string): UiApp.DatePicker;
    setValue(date: Date): UiApp.DatePicker;
    setVisible(visible: boolean): UiApp.DatePicker;
    setWidth(width: string): UiApp.DatePicker;

  }


  export enum DateTimeFormat {

    DATE_FULL,
    DATE_LONG,
    DATE_MEDIUM,
    DATE_SHORT,
    DATE_TIME_FULL,
    DATE_TIME_LONG,
    DATE_TIME_MEDIUM,
    DATE_TIME_SHORT,
    DAY,
    HOUR24_MINUTE,
    HOUR24_MINUTE_SECOND,
    HOUR_MINUTE,
    HOUR_MINUTE_SECOND,
    ISO_8601,
    MINUTE_SECOND,
    MONTH,
    MONTH_ABBR,
    MONTH_ABBR_DAY,
    MONTH_DAY,
    MONTH_NUM_DAY,
    MONTH_WEEKDAY_DAY,
    RFC_2822,
    TIME_FULL,
    TIME_LONG,
    TIME_MEDIUM,
    TIME_SHORT,
    YEAR,
    YEAR_MONTH,
    YEAR_MONTH_ABBR,
    YEAR_MONTH_ABBR_DAY,
    YEAR_MONTH_DAY,
    YEAR_MONTH_NUM,
    YEAR_MONTH_NUM_DAY,
    YEAR_MONTH_WEEKDAY_DAY,
    YEAR_QUARTER,
    YEAR_QUARTER_ABBR

  }


  export interface DecoratedStackPanel {

    add(widget: UiApp.Widget): UiApp.DecoratedStackPanel;
    add(widget: UiApp.Widget, text: string): UiApp.DecoratedStackPanel;
    add(widget: UiApp.Widget, text: string, asHtml: boolean): UiApp.DecoratedStackPanel;
    addStyleDependentName(styleName: string): UiApp.DecoratedStackPanel;
    addStyleName(styleName: string): UiApp.DecoratedStackPanel;
    clear(): UiApp.DecoratedStackPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    remove(index: number): UiApp.DecoratedStackPanel;
    remove(widget: UiApp.Widget): UiApp.DecoratedStackPanel;
    setHeight(height: string): UiApp.DecoratedStackPanel;
    setId(id: string): UiApp.DecoratedStackPanel;
    setLayoutData(layout: any): UiApp.DecoratedStackPanel;
    setPixelSize(width: number, height: number): UiApp.DecoratedStackPanel;
    setSize(width: string, height: string): UiApp.DecoratedStackPanel;
    setStackText(index: number, text: string): UiApp.DecoratedStackPanel;
    setStackText(index: number, text: string, asHtml: boolean): UiApp.DecoratedStackPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.DecoratedStackPanel;
    setStyleAttributes(attributes: any): UiApp.DecoratedStackPanel;
    setStyleName(styleName: string): UiApp.DecoratedStackPanel;
    setStylePrimaryName(styleName: string): UiApp.DecoratedStackPanel;
    setTag(tag: string): UiApp.DecoratedStackPanel;
    setTitle(title: string): UiApp.DecoratedStackPanel;
    setVisible(visible: boolean): UiApp.DecoratedStackPanel;
    setWidth(width: string): UiApp.DecoratedStackPanel;

  }


  export interface DecoratedTabBar {

    addBeforeSelectionHandler(handler: UiApp.Handler): UiApp.DecoratedTabBar;
    addSelectionHandler(handler: UiApp.Handler): UiApp.DecoratedTabBar;
    addStyleDependentName(styleName: string): UiApp.DecoratedTabBar;
    addStyleName(styleName: string): UiApp.DecoratedTabBar;
    addTab(title: string): UiApp.DecoratedTabBar;
    addTab(title: string, asHtml: boolean): UiApp.DecoratedTabBar;
    addTab(widget: UiApp.Widget): UiApp.DecoratedTabBar;
    getId(): string;
    getTag(): string;
    getType(): string;
    selectTab(index: number): UiApp.DecoratedTabBar;
    setHeight(height: string): UiApp.DecoratedTabBar;
    setId(id: string): UiApp.DecoratedTabBar;
    setLayoutData(layout: any): UiApp.DecoratedTabBar;
    setPixelSize(width: number, height: number): UiApp.DecoratedTabBar;
    setSize(width: string, height: string): UiApp.DecoratedTabBar;
    setStyleAttribute(attribute: string, value: string): UiApp.DecoratedTabBar;
    setStyleAttributes(attributes: any): UiApp.DecoratedTabBar;
    setStyleName(styleName: string): UiApp.DecoratedTabBar;
    setStylePrimaryName(styleName: string): UiApp.DecoratedTabBar;
    setTabEnabled(index: number, enabled: boolean): UiApp.DecoratedTabBar;
    setTabText(index: number, text: string): UiApp.DecoratedTabBar;
    setTag(tag: string): UiApp.DecoratedTabBar;
    setTitle(title: string): UiApp.DecoratedTabBar;
    setVisible(visible: boolean): UiApp.DecoratedTabBar;
    setWidth(width: string): UiApp.DecoratedTabBar;

  }


  export interface DecoratedTabPanel {

    add(widget: UiApp.Widget): UiApp.DecoratedTabPanel;
    add(widget: UiApp.Widget, text: string): UiApp.DecoratedTabPanel;
    add(widget: UiApp.Widget, text: string, asHtml: boolean): UiApp.DecoratedTabPanel;
    add(widget: UiApp.Widget, tabWidget: UiApp.Widget): UiApp.DecoratedTabPanel;
    addBeforeSelectionHandler(handler: UiApp.Handler): UiApp.DecoratedTabPanel;
    addSelectionHandler(handler: UiApp.Handler): UiApp.DecoratedTabPanel;
    addStyleDependentName(styleName: string): UiApp.DecoratedTabPanel;
    addStyleName(styleName: string): UiApp.DecoratedTabPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    selectTab(index: number): UiApp.DecoratedTabPanel;
    setAnimationEnabled(animationEnabled: boolean): UiApp.DecoratedTabPanel;
    setHeight(height: string): UiApp.DecoratedTabPanel;
    setId(id: string): UiApp.DecoratedTabPanel;
    setLayoutData(layout: any): UiApp.DecoratedTabPanel;
    setPixelSize(width: number, height: number): UiApp.DecoratedTabPanel;
    setSize(width: string, height: string): UiApp.DecoratedTabPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.DecoratedTabPanel;
    setStyleAttributes(attributes: any): UiApp.DecoratedTabPanel;
    setStyleName(styleName: string): UiApp.DecoratedTabPanel;
    setStylePrimaryName(styleName: string): UiApp.DecoratedTabPanel;
    setTag(tag: string): UiApp.DecoratedTabPanel;
    setTitle(title: string): UiApp.DecoratedTabPanel;
    setVisible(visible: boolean): UiApp.DecoratedTabPanel;
    setWidth(width: string): UiApp.DecoratedTabPanel;

  }


  export interface DecoratorPanel {

    add(widget: UiApp.Widget): UiApp.DecoratorPanel;
    addStyleDependentName(styleName: string): UiApp.DecoratorPanel;
    addStyleName(styleName: string): UiApp.DecoratorPanel;
    clear(): UiApp.DecoratorPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    setHeight(height: string): UiApp.DecoratorPanel;
    setId(id: string): UiApp.DecoratorPanel;
    setLayoutData(layout: any): UiApp.DecoratorPanel;
    setPixelSize(width: number, height: number): UiApp.DecoratorPanel;
    setSize(width: string, height: string): UiApp.DecoratorPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.DecoratorPanel;
    setStyleAttributes(attributes: any): UiApp.DecoratorPanel;
    setStyleName(styleName: string): UiApp.DecoratorPanel;
    setStylePrimaryName(styleName: string): UiApp.DecoratorPanel;
    setTag(tag: string): UiApp.DecoratorPanel;
    setTitle(title: string): UiApp.DecoratorPanel;
    setVisible(visible: boolean): UiApp.DecoratorPanel;
    setWidget(widget: UiApp.Widget): UiApp.DecoratorPanel;
    setWidth(width: string): UiApp.DecoratorPanel;

  }


  export interface DialogBox {

    add(widget: UiApp.Widget): UiApp.DialogBox;
    addAutoHidePartner(partner: UiApp.Component): UiApp.DialogBox;
    addCloseHandler(handler: UiApp.Handler): UiApp.DialogBox;
    addStyleDependentName(styleName: string): UiApp.DialogBox;
    addStyleName(styleName: string): UiApp.DialogBox;
    clear(): UiApp.DialogBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    hide(): UiApp.DialogBox;
    setAnimationEnabled(animationEnabled: boolean): UiApp.DialogBox;
    setAutoHideEnabled(enabled: boolean): UiApp.DialogBox;
    setGlassEnabled(enabled: boolean): UiApp.DialogBox;
    setGlassStyleName(styleName: string): UiApp.DialogBox;
    setHTML(html: string): UiApp.DialogBox;
    setHeight(height: string): UiApp.DialogBox;
    setId(id: string): UiApp.DialogBox;
    setLayoutData(layout: any): UiApp.DialogBox;
    setModal(modal: boolean): UiApp.DialogBox;
    setPixelSize(width: number, height: number): UiApp.DialogBox;
    setPopupPosition(left: number, top: number): UiApp.DialogBox;
    setPopupPositionAndShow(a: UiApp.Component): UiApp.DialogBox;
    setPreviewingAllNativeEvents(previewing: boolean): UiApp.DialogBox;
    setSize(width: string, height: string): UiApp.DialogBox;
    setStyleAttribute(attribute: string, value: string): UiApp.DialogBox;
    setStyleAttributes(attributes: any): UiApp.DialogBox;
    setStyleName(styleName: string): UiApp.DialogBox;
    setStylePrimaryName(styleName: string): UiApp.DialogBox;
    setTag(tag: string): UiApp.DialogBox;
    setText(text: string): UiApp.DialogBox;
    setTitle(title: string): UiApp.DialogBox;
    setVisible(visible: boolean): UiApp.DialogBox;
    setWidget(widget: UiApp.Widget): UiApp.DialogBox;
    setWidth(width: string): UiApp.DialogBox;
    show(): UiApp.DialogBox;

  }


  export interface DocsListDialog {

    addCloseHandler(handler: UiApp.Handler): UiApp.DocsListDialog;
    addSelectionHandler(handler: UiApp.Handler): UiApp.DocsListDialog;
    addView(fileType: UiApp.FileType): UiApp.DocsListDialog;
    getId(): string;
    getType(): string;
    setDialogTitle(title: string): UiApp.DocsListDialog;
    setHeight(height: number): UiApp.DocsListDialog;
    setInitialView(fileType: UiApp.FileType): UiApp.DocsListDialog;
    setMultiSelectEnabled(multiSelectEnabled: boolean): UiApp.DocsListDialog;
    setOAuthToken(oAuthToken: string): UiApp.DocsListDialog;
    setWidth(width: number): UiApp.DocsListDialog;
    showDocsPicker(): UiApp.DocsListDialog;

  }


  export enum FileType {

    ALL,
    ALL_DOCS,
    DOCUMENTS,
    DRAWINGS,
    FOLDERS,
    FORMS,
    PDFS,
    PHOTOS,
    PHOTO_ALBUMS,
    PRESENTATIONS,
    RECENTLY_PICKED,
    SPREADSHEETS

  }


  export interface FileUpload {

    addChangeHandler(handler: UiApp.Handler): UiApp.FileUpload;
    addStyleDependentName(styleName: string): UiApp.FileUpload;
    addStyleName(styleName: string): UiApp.FileUpload;
    getId(): string;
    getTag(): string;
    getType(): string;
    setEnabled(enabled: boolean): UiApp.FileUpload;
    setHeight(height: string): UiApp.FileUpload;
    setId(id: string): UiApp.FileUpload;
    setLayoutData(layout: any): UiApp.FileUpload;
    setName(name: string): UiApp.FileUpload;
    setPixelSize(width: number, height: number): UiApp.FileUpload;
    setSize(width: string, height: string): UiApp.FileUpload;
    setStyleAttribute(attribute: string, value: string): UiApp.FileUpload;
    setStyleAttributes(attributes: any): UiApp.FileUpload;
    setStyleName(styleName: string): UiApp.FileUpload;
    setStylePrimaryName(styleName: string): UiApp.FileUpload;
    setTag(tag: string): UiApp.FileUpload;
    setTitle(title: string): UiApp.FileUpload;
    setVisible(visible: boolean): UiApp.FileUpload;
    setWidth(width: string): UiApp.FileUpload;

  }


  export interface FlexTable {

    addCell(row: number): UiApp.FlexTable;
    addClickHandler(handler: UiApp.Handler): UiApp.FlexTable;
    addStyleDependentName(styleName: string): UiApp.FlexTable;
    addStyleName(styleName: string): UiApp.FlexTable;
    clear(): UiApp.FlexTable;
    getId(): string;
    getTag(): string;
    getType(): string;
    insertCell(beforeRow: number, beforeColumn: number): UiApp.FlexTable;
    insertRow(beforeRow: number): UiApp.FlexTable;
    removeCell(row: number, column: number): UiApp.FlexTable;
    removeCells(row: number, column: number, num: number): UiApp.FlexTable;
    removeRow(row: number): UiApp.FlexTable;
    setBorderWidth(width: number): UiApp.FlexTable;
    setCellPadding(padding: number): UiApp.FlexTable;
    setCellSpacing(spacing: number): UiApp.FlexTable;
    setColumnStyleAttribute(column: number, attribute: string, value: string): UiApp.FlexTable;
    setColumnStyleAttributes(column: number, attributes: any): UiApp.FlexTable;
    setHeight(height: string): UiApp.FlexTable;
    setId(id: string): UiApp.FlexTable;
    setLayoutData(layout: any): UiApp.FlexTable;
    setPixelSize(width: number, height: number): UiApp.FlexTable;
    setRowStyleAttribute(row: number, attribute: string, value: string): UiApp.FlexTable;
    setRowStyleAttributes(row: number, attributes: any): UiApp.FlexTable;
    setSize(width: string, height: string): UiApp.FlexTable;
    setStyleAttribute(row: number, column: number, attribute: string, value: string): UiApp.FlexTable;
    setStyleAttribute(attribute: string, value: string): UiApp.FlexTable;
    setStyleAttributes(row: number, column: number, attributes: any): UiApp.FlexTable;
    setStyleAttributes(attributes: any): UiApp.FlexTable;
    setStyleName(styleName: string): UiApp.FlexTable;
    setStylePrimaryName(styleName: string): UiApp.FlexTable;
    setTag(tag: string): UiApp.FlexTable;
    setText(row: number, column: number, text: string): UiApp.FlexTable;
    setTitle(title: string): UiApp.FlexTable;
    setVisible(visible: boolean): UiApp.FlexTable;
    setWidget(row: number, column: number, widget: UiApp.Widget): UiApp.FlexTable;
    setWidth(width: string): UiApp.FlexTable;

  }


  export interface FlowPanel {

    add(widget: UiApp.Widget): UiApp.FlowPanel;
    addStyleDependentName(styleName: string): UiApp.FlowPanel;
    addStyleName(styleName: string): UiApp.FlowPanel;
    clear(): UiApp.FlowPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    insert(widget: UiApp.Widget, beforeIndex: number): UiApp.FlowPanel;
    remove(index: number): UiApp.FlowPanel;
    remove(widget: UiApp.Widget): UiApp.FlowPanel;
    setHeight(height: string): UiApp.FlowPanel;
    setId(id: string): UiApp.FlowPanel;
    setLayoutData(layout: any): UiApp.FlowPanel;
    setPixelSize(width: number, height: number): UiApp.FlowPanel;
    setSize(width: string, height: string): UiApp.FlowPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.FlowPanel;
    setStyleAttributes(attributes: any): UiApp.FlowPanel;
    setStyleName(styleName: string): UiApp.FlowPanel;
    setStylePrimaryName(styleName: string): UiApp.FlowPanel;
    setTag(tag: string): UiApp.FlowPanel;
    setTitle(title: string): UiApp.FlowPanel;
    setVisible(visible: boolean): UiApp.FlowPanel;
    setWidth(width: string): UiApp.FlowPanel;

  }


  export interface FocusPanel {

    add(widget: UiApp.Widget): UiApp.FocusPanel;
    addBlurHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addClickHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addFocusHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.FocusPanel;
    addStyleDependentName(styleName: string): UiApp.FocusPanel;
    addStyleName(styleName: string): UiApp.FocusPanel;
    clear(): UiApp.FocusPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.FocusPanel;
    setFocus(focus: boolean): UiApp.FocusPanel;
    setHeight(height: string): UiApp.FocusPanel;
    setId(id: string): UiApp.FocusPanel;
    setLayoutData(layout: any): UiApp.FocusPanel;
    setPixelSize(width: number, height: number): UiApp.FocusPanel;
    setSize(width: string, height: string): UiApp.FocusPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.FocusPanel;
    setStyleAttributes(attributes: any): UiApp.FocusPanel;
    setStyleName(styleName: string): UiApp.FocusPanel;
    setStylePrimaryName(styleName: string): UiApp.FocusPanel;
    setTabIndex(index: number): UiApp.FocusPanel;
    setTag(tag: string): UiApp.FocusPanel;
    setTitle(title: string): UiApp.FocusPanel;
    setVisible(visible: boolean): UiApp.FocusPanel;
    setWidget(widget: UiApp.Widget): UiApp.FocusPanel;
    setWidth(width: string): UiApp.FocusPanel;

  }


  export interface FormPanel {

    add(widget: UiApp.Widget): UiApp.FormPanel;
    addStyleDependentName(styleName: string): UiApp.FormPanel;
    addStyleName(styleName: string): UiApp.FormPanel;
    addSubmitCompleteHandler(handler: UiApp.Handler): UiApp.FormPanel;
    addSubmitHandler(handler: UiApp.Handler): UiApp.FormPanel;
    clear(): UiApp.FormPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAction(action: string): UiApp.FormPanel;
    setEncoding(encoding: string): UiApp.FormPanel;
    setHeight(height: string): UiApp.FormPanel;
    setId(id: string): UiApp.FormPanel;
    setLayoutData(layout: any): UiApp.FormPanel;
    setMethod(method: string): UiApp.FormPanel;
    setPixelSize(width: number, height: number): UiApp.FormPanel;
    setSize(width: string, height: string): UiApp.FormPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.FormPanel;
    setStyleAttributes(attributes: any): UiApp.FormPanel;
    setStyleName(styleName: string): UiApp.FormPanel;
    setStylePrimaryName(styleName: string): UiApp.FormPanel;
    setTag(tag: string): UiApp.FormPanel;
    setTitle(title: string): UiApp.FormPanel;
    setVisible(visible: boolean): UiApp.FormPanel;
    setWidget(widget: UiApp.Widget): UiApp.FormPanel;
    setWidth(width: string): UiApp.FormPanel;

  }


  export interface Grid {

    addClickHandler(handler: UiApp.Handler): UiApp.Grid;
    addStyleDependentName(styleName: string): UiApp.Grid;
    addStyleName(styleName: string): UiApp.Grid;
    clear(): UiApp.Grid;
    getId(): string;
    getTag(): string;
    getType(): string;
    resize(rows: number, columns: number): UiApp.Grid;
    setBorderWidth(width: number): UiApp.Grid;
    setCellPadding(padding: number): UiApp.Grid;
    setCellSpacing(spacing: number): UiApp.Grid;
    setColumnStyleAttribute(column: number, attribute: string, value: string): UiApp.Grid;
    setColumnStyleAttributes(column: number, attributes: any): UiApp.Grid;
    setHeight(height: string): UiApp.Grid;
    setId(id: string): UiApp.Grid;
    setLayoutData(layout: any): UiApp.Grid;
    setPixelSize(width: number, height: number): UiApp.Grid;
    setRowStyleAttribute(row: number, attribute: string, value: string): UiApp.Grid;
    setRowStyleAttributes(row: number, attributes: any): UiApp.Grid;
    setSize(width: string, height: string): UiApp.Grid;
    setStyleAttribute(row: number, column: number, attribute: string, value: string): UiApp.Grid;
    setStyleAttribute(attribute: string, value: string): UiApp.Grid;
    setStyleAttributes(row: number, column: number, attributes: any): UiApp.Grid;
    setStyleAttributes(attributes: any): UiApp.Grid;
    setStyleName(styleName: string): UiApp.Grid;
    setStylePrimaryName(styleName: string): UiApp.Grid;
    setTag(tag: string): UiApp.Grid;
    setText(row: number, column: number, text: string): UiApp.Grid;
    setTitle(title: string): UiApp.Grid;
    setVisible(visible: boolean): UiApp.Grid;
    setWidget(row: number, column: number, widget: UiApp.Widget): UiApp.Grid;
    setWidth(width: string): UiApp.Grid;

  }


  export interface HTML {

    addClickHandler(handler: UiApp.Handler): UiApp.HTML;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.HTML;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.HTML;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.HTML;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.HTML;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.HTML;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.HTML;
    addStyleDependentName(styleName: string): UiApp.HTML;
    addStyleName(styleName: string): UiApp.HTML;
    getId(): string;
    getTag(): string;
    getType(): string;
    setDirection(direction: UiApp.Component): UiApp.HTML;
    setHTML(html: string): UiApp.HTML;
    setHeight(height: string): UiApp.HTML;
    setHorizontalAlignment(horizontalAlignment: UiApp.HorizontalAlignment): UiApp.HTML;
    setId(id: string): UiApp.HTML;
    setLayoutData(layout: any): UiApp.HTML;
    setPixelSize(width: number, height: number): UiApp.HTML;
    setSize(width: string, height: string): UiApp.HTML;
    setStyleAttribute(attribute: string, value: string): UiApp.HTML;
    setStyleAttributes(attributes: any): UiApp.HTML;
    setStyleName(styleName: string): UiApp.HTML;
    setStylePrimaryName(styleName: string): UiApp.HTML;
    setTag(tag: string): UiApp.HTML;
    setText(text: string): UiApp.HTML;
    setTitle(title: string): UiApp.HTML;
    setVisible(visible: boolean): UiApp.HTML;
    setWidth(width: string): UiApp.HTML;
    setWordWrap(wordWrap: boolean): UiApp.HTML;

  }


  export interface Handler {

    getId(): string;
    getTag(): string;
    getType(): string;
    setId(id: string): UiApp.Handler;
    setTag(tag: string): UiApp.Handler;
    validateEmail(widget: UiApp.Widget): UiApp.Handler;
    validateInteger(widget: UiApp.Widget): UiApp.Handler;
    validateLength(widget: UiApp.Widget, min: number, max: number): UiApp.Handler;
    validateMatches(widget: UiApp.Widget, pattern: string): UiApp.Handler;
    validateMatches(widget: UiApp.Widget, pattern: string, flags: string): UiApp.Handler;
    validateNotEmail(widget: UiApp.Widget): UiApp.Handler;
    validateNotInteger(widget: UiApp.Widget): UiApp.Handler;
    validateNotLength(widget: UiApp.Widget, min: number, max: number): UiApp.Handler;
    validateNotMatches(widget: UiApp.Widget, pattern: string): UiApp.Handler;
    validateNotMatches(widget: UiApp.Widget, pattern: string, flags: string): UiApp.Handler;
    validateNotNumber(widget: UiApp.Widget): UiApp.Handler;
    validateNotOptions(widget: UiApp.Widget, options: string[]): UiApp.Handler;
    validateNotRange(widget: UiApp.Widget, min: number, max: number): UiApp.Handler;
    validateNotSum(widgets: UiApp.Widget[], sum: number): UiApp.Handler;
    validateNumber(widget: UiApp.Widget): UiApp.Handler;
    validateOptions(widget: UiApp.Widget, options: string[]): UiApp.Handler;
    validateRange(widget: UiApp.Widget, min: number, max: number): UiApp.Handler;
    validateSum(widgets: UiApp.Widget[], sum: number): UiApp.Handler;

  }


  export interface Hidden {

    addStyleDependentName(styleName: string): UiApp.Hidden;
    addStyleName(styleName: string): UiApp.Hidden;
    getId(): string;
    getTag(): string;
    getType(): string;
    setDefaultValue(value: string): UiApp.Hidden;
    setHeight(height: string): UiApp.Hidden;
    setID(id: string): UiApp.Hidden;
    setId(id: string): UiApp.Hidden;
    setLayoutData(layout: any): UiApp.Hidden;
    setName(name: string): UiApp.Hidden;
    setPixelSize(width: number, height: number): UiApp.Hidden;
    setSize(width: string, height: string): UiApp.Hidden;
    setStyleAttribute(attribute: string, value: string): UiApp.Hidden;
    setStyleAttributes(attributes: any): UiApp.Hidden;
    setStyleName(styleName: string): UiApp.Hidden;
    setStylePrimaryName(styleName: string): UiApp.Hidden;
    setTag(tag: string): UiApp.Hidden;
    setTitle(title: string): UiApp.Hidden;
    setValue(value: string): UiApp.Hidden;
    setVisible(visible: boolean): UiApp.Hidden;
    setWidth(width: string): UiApp.Hidden;

  }


  export enum HorizontalAlignment {

    CENTER,
    DEFAULT,
    JUSTIFY,
    LEFT,
    LOCALE_END,
    LOCALE_START,
    RIGHT

  }


  export interface HorizontalPanel {

    add(widget: UiApp.Widget): UiApp.HorizontalPanel;
    addStyleDependentName(styleName: string): UiApp.HorizontalPanel;
    addStyleName(styleName: string): UiApp.HorizontalPanel;
    clear(): UiApp.HorizontalPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    remove(index: number): UiApp.HorizontalPanel;
    remove(widget: UiApp.Widget): UiApp.HorizontalPanel;
    setBorderWidth(width: number): UiApp.HorizontalPanel;
    setCellHeight(widget: UiApp.Widget, height: string): UiApp.HorizontalPanel;
    setCellHorizontalAlignment(widget: UiApp.Widget, horizontalAlignment: UiApp.HorizontalAlignment): UiApp.HorizontalPanel;
    setCellVerticalAlignment(widget: UiApp.Widget, verticalAlignment: UiApp.VerticalAlignment): UiApp.HorizontalPanel;
    setCellWidth(widget: UiApp.Widget, width: string): UiApp.HorizontalPanel;
    setHeight(height: string): UiApp.HorizontalPanel;
    setHorizontalAlignment(horizontalAlignment: UiApp.HorizontalAlignment): UiApp.HorizontalPanel;
    setId(id: string): UiApp.HorizontalPanel;
    setLayoutData(layout: any): UiApp.HorizontalPanel;
    setPixelSize(width: number, height: number): UiApp.HorizontalPanel;
    setSize(width: string, height: string): UiApp.HorizontalPanel;
    setSpacing(spacing: number): UiApp.HorizontalPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.HorizontalPanel;
    setStyleAttributes(attributes: any): UiApp.HorizontalPanel;
    setStyleName(styleName: string): UiApp.HorizontalPanel;
    setStylePrimaryName(styleName: string): UiApp.HorizontalPanel;
    setTag(tag: string): UiApp.HorizontalPanel;
    setTitle(title: string): UiApp.HorizontalPanel;
    setVerticalAlignment(verticalAlignment: UiApp.VerticalAlignment): UiApp.HorizontalPanel;
    setVisible(visible: boolean): UiApp.HorizontalPanel;
    setWidth(width: string): UiApp.HorizontalPanel;

  }


  export interface Image {

    addClickHandler(handler: UiApp.Handler): UiApp.Image;
    addErrorHandler(handler: UiApp.Handler): UiApp.Image;
    addLoadHandler(handler: UiApp.Handler): UiApp.Image;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.Image;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.Image;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.Image;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.Image;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.Image;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.Image;
    addStyleDependentName(styleName: string): UiApp.Image;
    addStyleName(styleName: string): UiApp.Image;
    getId(): string;
    getTag(): string;
    getType(): string;
    setHeight(height: string): UiApp.Image;
    setId(id: string): UiApp.Image;
    setLayoutData(layout: any): UiApp.Image;
    setPixelSize(width: number, height: number): UiApp.Image;
    setResource(resource: UiApp.Component): UiApp.Image;
    setSize(width: string, height: string): UiApp.Image;
    setStyleAttribute(attribute: string, value: string): UiApp.Image;
    setStyleAttributes(attributes: any): UiApp.Image;
    setStyleName(styleName: string): UiApp.Image;
    setStylePrimaryName(styleName: string): UiApp.Image;
    setTag(tag: string): UiApp.Image;
    setTitle(title: string): UiApp.Image;
    setUrl(url: string): UiApp.Image;
    setUrlAndVisibleRect(url: string, left: number, top: number, width: number, height: number): UiApp.Image;
    setVisible(visible: boolean): UiApp.Image;
    setVisibleRect(left: number, top: number, width: number, height: number): UiApp.Image;
    setWidth(width: string): UiApp.Image;

  }


  export interface InlineLabel {

    addClickHandler(handler: UiApp.Handler): UiApp.InlineLabel;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.InlineLabel;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.InlineLabel;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.InlineLabel;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.InlineLabel;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.InlineLabel;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.InlineLabel;
    addStyleDependentName(styleName: string): UiApp.InlineLabel;
    addStyleName(styleName: string): UiApp.InlineLabel;
    getId(): string;
    getTag(): string;
    getType(): string;
    setDirection(direction: UiApp.Component): UiApp.InlineLabel;
    setHeight(height: string): UiApp.InlineLabel;
    setHorizontalAlignment(horizontalAlignment: UiApp.HorizontalAlignment): UiApp.InlineLabel;
    setId(id: string): UiApp.InlineLabel;
    setLayoutData(layout: any): UiApp.InlineLabel;
    setPixelSize(width: number, height: number): UiApp.InlineLabel;
    setSize(width: string, height: string): UiApp.InlineLabel;
    setStyleAttribute(attribute: string, value: string): UiApp.InlineLabel;
    setStyleAttributes(attributes: any): UiApp.InlineLabel;
    setStyleName(styleName: string): UiApp.InlineLabel;
    setStylePrimaryName(styleName: string): UiApp.InlineLabel;
    setTag(tag: string): UiApp.InlineLabel;
    setText(text: string): UiApp.InlineLabel;
    setTitle(title: string): UiApp.InlineLabel;
    setVisible(visible: boolean): UiApp.InlineLabel;
    setWidth(width: string): UiApp.InlineLabel;
    setWordWrap(wordWrap: boolean): UiApp.InlineLabel;

  }


  export interface Label {

    addClickHandler(handler: UiApp.Handler): UiApp.Label;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.Label;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.Label;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.Label;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.Label;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.Label;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.Label;
    addStyleDependentName(styleName: string): UiApp.Label;
    addStyleName(styleName: string): UiApp.Label;
    getId(): string;
    getTag(): string;
    getType(): string;
    setDirection(direction: UiApp.Component): UiApp.Label;
    setHeight(height: string): UiApp.Label;
    setHorizontalAlignment(horizontalAlignment: UiApp.HorizontalAlignment): UiApp.Label;
    setId(id: string): UiApp.Label;
    setLayoutData(layout: any): UiApp.Label;
    setPixelSize(width: number, height: number): UiApp.Label;
    setSize(width: string, height: string): UiApp.Label;
    setStyleAttribute(attribute: string, value: string): UiApp.Label;
    setStyleAttributes(attributes: any): UiApp.Label;
    setStyleName(styleName: string): UiApp.Label;
    setStylePrimaryName(styleName: string): UiApp.Label;
    setTag(tag: string): UiApp.Label;
    setText(text: string): UiApp.Label;
    setTitle(title: string): UiApp.Label;
    setVisible(visible: boolean): UiApp.Label;
    setWidth(width: string): UiApp.Label;
    setWordWrap(wordWrap: boolean): UiApp.Label;

  }


  export interface ListBox {

    addBlurHandler(handler: UiApp.Handler): UiApp.ListBox;
    addChangeHandler(handler: UiApp.Handler): UiApp.ListBox;
    addClickHandler(handler: UiApp.Handler): UiApp.ListBox;
    addFocusHandler(handler: UiApp.Handler): UiApp.ListBox;
    addItem(text: string): UiApp.ListBox;
    addItem(text: string, value: string): UiApp.ListBox;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.ListBox;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.ListBox;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.ListBox;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.ListBox;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.ListBox;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.ListBox;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.ListBox;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.ListBox;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.ListBox;
    addStyleDependentName(styleName: string): UiApp.ListBox;
    addStyleName(styleName: string): UiApp.ListBox;
    clear(): UiApp.ListBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    removeItem(index: number): UiApp.ListBox;
    setAccessKey(accessKey: number): UiApp.ListBox;
    setEnabled(enabled: boolean): UiApp.ListBox;
    setFocus(focus: boolean): UiApp.ListBox;
    setHeight(height: string): UiApp.ListBox;
    setId(id: string): UiApp.ListBox;
    setItemSelected(index: number, selected: boolean): UiApp.ListBox;
    setItemText(index: number, text: string): UiApp.ListBox;
    setLayoutData(layout: any): UiApp.ListBox;
    setName(name: string): UiApp.ListBox;
    setPixelSize(width: number, height: number): UiApp.ListBox;
    setSelectedIndex(index: number): UiApp.ListBox;
    setSize(width: string, height: string): UiApp.ListBox;
    setStyleAttribute(attribute: string, value: string): UiApp.ListBox;
    setStyleAttributes(attributes: any): UiApp.ListBox;
    setStyleName(styleName: string): UiApp.ListBox;
    setStylePrimaryName(styleName: string): UiApp.ListBox;
    setTabIndex(index: number): UiApp.ListBox;
    setTag(tag: string): UiApp.ListBox;
    setTitle(title: string): UiApp.ListBox;
    setValue(index: number, value: string): UiApp.ListBox;
    setVisible(visible: boolean): UiApp.ListBox;
    setVisibleItemCount(count: number): UiApp.ListBox;
    setWidth(width: string): UiApp.ListBox;

  }


  export interface MenuBar {

    addCloseHandler(handler: UiApp.Handler): UiApp.MenuBar;
    addItem(item: MenuItem): UiApp.MenuBar;
    addItem(text: string, asHtml: boolean, subMenu: MenuBar): UiApp.MenuBar;
    addItem(text: string, asHtml: boolean, command: UiApp.Handler): UiApp.MenuBar;
    addItem(text: string, subMenu: MenuBar): UiApp.MenuBar;
    addItem(text: string, command: UiApp.Handler): UiApp.MenuBar;
    addSeparator(): UiApp.MenuBar;
    addSeparator(separator: MenuItemSeparator): UiApp.MenuBar;
    addStyleDependentName(styleName: string): UiApp.MenuBar;
    addStyleName(styleName: string): UiApp.MenuBar;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAnimationEnabled(animationEnabled: boolean): UiApp.MenuBar;
    setAutoOpen(autoOpen: boolean): UiApp.MenuBar;
    setHeight(height: string): UiApp.MenuBar;
    setId(id: string): UiApp.MenuBar;
    setLayoutData(layout: any): UiApp.MenuBar;
    setPixelSize(width: number, height: number): UiApp.MenuBar;
    setSize(width: string, height: string): UiApp.MenuBar;
    setStyleAttribute(attribute: string, value: string): UiApp.MenuBar;
    setStyleAttributes(attributes: any): UiApp.MenuBar;
    setStyleName(styleName: string): UiApp.MenuBar;
    setStylePrimaryName(styleName: string): UiApp.MenuBar;
    setTag(tag: string): UiApp.MenuBar;
    setTitle(title: string): UiApp.MenuBar;
    setVisible(visible: boolean): UiApp.MenuBar;
    setWidth(width: string): UiApp.MenuBar;

  }


  export interface MenuItem {

    addStyleDependentName(styleName: string): UiApp.MenuItem;
    addStyleName(styleName: string): UiApp.MenuItem;
    getId(): string;
    getTag(): string;
    getType(): string;
    setCommand(handler: UiApp.Handler): UiApp.MenuItem;
    setHTML(html: string): UiApp.MenuItem;
    setHeight(height: string): UiApp.MenuItem;
    setId(id: string): UiApp.MenuItem;
    setPixelSize(width: number, height: number): UiApp.MenuItem;
    setSize(width: string, height: string): UiApp.MenuItem;
    setStyleAttribute(attribute: string, value: string): UiApp.MenuItem;
    setStyleAttributes(attributes: any): UiApp.MenuItem;
    setStyleName(styleName: string): UiApp.MenuItem;
    setStylePrimaryName(styleName: string): UiApp.MenuItem;
    setSubMenu(subMenu: MenuBar): UiApp.MenuItem;
    setTag(tag: string): UiApp.MenuItem;
    setText(text: string): UiApp.MenuItem;
    setTitle(title: string): UiApp.MenuItem;
    setVisible(visible: boolean): UiApp.MenuItem;
    setWidth(width: string): UiApp.MenuItem;

  }


  export interface MenuItemSeparator {

    addStyleDependentName(styleName: string): UiApp.MenuItemSeparator;
    addStyleName(styleName: string): UiApp.MenuItemSeparator;
    getId(): string;
    getTag(): string;
    getType(): string;
    setHeight(height: string): UiApp.MenuItemSeparator;
    setId(id: string): UiApp.MenuItemSeparator;
    setPixelSize(width: number, height: number): UiApp.MenuItemSeparator;
    setSize(width: string, height: string): UiApp.MenuItemSeparator;
    setStyleAttribute(attribute: string, value: string): UiApp.MenuItemSeparator;
    setStyleAttributes(attributes: any): UiApp.MenuItemSeparator;
    setStyleName(styleName: string): UiApp.MenuItemSeparator;
    setStylePrimaryName(styleName: string): UiApp.MenuItemSeparator;
    setTag(tag: string): UiApp.MenuItemSeparator;
    setTitle(title: string): UiApp.MenuItemSeparator;
    setVisible(visible: boolean): UiApp.MenuItemSeparator;
    setWidth(width: string): UiApp.MenuItemSeparator;

  }


  export interface PasswordTextBox {

    addBlurHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addChangeHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addClickHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addFocusHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    addStyleDependentName(styleName: string): UiApp.PasswordTextBox;
    addStyleName(styleName: string): UiApp.PasswordTextBox;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.PasswordTextBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.PasswordTextBox;
    setCursorPos(position: number): UiApp.PasswordTextBox;
    setDirection(direction: UiApp.Component): UiApp.PasswordTextBox;
    setEnabled(enabled: boolean): UiApp.PasswordTextBox;
    setFocus(focus: boolean): UiApp.PasswordTextBox;
    setHeight(height: string): UiApp.PasswordTextBox;
    setId(id: string): UiApp.PasswordTextBox;
    setLayoutData(layout: any): UiApp.PasswordTextBox;
    setMaxLength(length: number): UiApp.PasswordTextBox;
    setName(name: string): UiApp.PasswordTextBox;
    setPixelSize(width: number, height: number): UiApp.PasswordTextBox;
    setReadOnly(readOnly: boolean): UiApp.PasswordTextBox;
    setSelectionRange(position: number, length: number): UiApp.PasswordTextBox;
    setSize(width: string, height: string): UiApp.PasswordTextBox;
    setStyleAttribute(attribute: string, value: string): UiApp.PasswordTextBox;
    setStyleAttributes(attributes: any): UiApp.PasswordTextBox;
    setStyleName(styleName: string): UiApp.PasswordTextBox;
    setStylePrimaryName(styleName: string): UiApp.PasswordTextBox;
    setTabIndex(index: number): UiApp.PasswordTextBox;
    setTag(tag: string): UiApp.PasswordTextBox;
    setText(text: string): UiApp.PasswordTextBox;
    setTextAlignment(textAlign: UiApp.Component): UiApp.PasswordTextBox;
    setTitle(title: string): UiApp.PasswordTextBox;
    setValue(value: string): UiApp.PasswordTextBox;
    setValue(value: string, fireEvents: boolean): UiApp.PasswordTextBox;
    setVisible(visible: boolean): UiApp.PasswordTextBox;
    setVisibleLength(length: number): UiApp.PasswordTextBox;
    setWidth(width: string): UiApp.PasswordTextBox;

  }


  export interface PopupPanel {

    add(widget: UiApp.Widget): UiApp.PopupPanel;
    addAutoHidePartner(partner: UiApp.Component): UiApp.PopupPanel;
    addCloseHandler(handler: UiApp.Handler): UiApp.PopupPanel;
    addStyleDependentName(styleName: string): UiApp.PopupPanel;
    addStyleName(styleName: string): UiApp.PopupPanel;
    clear(): UiApp.PopupPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    hide(): UiApp.PopupPanel;
    setAnimationEnabled(animationEnabled: boolean): UiApp.PopupPanel;
    setAutoHideEnabled(enabled: boolean): UiApp.PopupPanel;
    setGlassEnabled(enabled: boolean): UiApp.PopupPanel;
    setGlassStyleName(styleName: string): UiApp.PopupPanel;
    setHeight(height: string): UiApp.PopupPanel;
    setId(id: string): UiApp.PopupPanel;
    setLayoutData(layout: any): UiApp.PopupPanel;
    setModal(modal: boolean): UiApp.PopupPanel;
    setPixelSize(width: number, height: number): UiApp.PopupPanel;
    setPopupPosition(left: number, top: number): UiApp.PopupPanel;
    setPopupPositionAndShow(a: UiApp.Component): UiApp.PopupPanel;
    setPreviewingAllNativeEvents(previewing: boolean): UiApp.PopupPanel;
    setSize(width: string, height: string): UiApp.PopupPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.PopupPanel;
    setStyleAttributes(attributes: any): UiApp.PopupPanel;
    setStyleName(styleName: string): UiApp.PopupPanel;
    setStylePrimaryName(styleName: string): UiApp.PopupPanel;
    setTag(tag: string): UiApp.PopupPanel;
    setTitle(title: string): UiApp.PopupPanel;
    setVisible(visible: boolean): UiApp.PopupPanel;
    setWidget(widget: UiApp.Widget): UiApp.PopupPanel;
    setWidth(width: string): UiApp.PopupPanel;
    show(): UiApp.PopupPanel;

  }


  export interface PushButton {

    addBlurHandler(handler: UiApp.Handler): UiApp.PushButton;
    addClickHandler(handler: UiApp.Handler): UiApp.PushButton;
    addFocusHandler(handler: UiApp.Handler): UiApp.PushButton;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.PushButton;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.PushButton;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.PushButton;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.PushButton;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.PushButton;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.PushButton;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.PushButton;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.PushButton;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.PushButton;
    addStyleDependentName(styleName: string): UiApp.PushButton;
    addStyleName(styleName: string): UiApp.PushButton;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.PushButton;
    setEnabled(enabled: boolean): UiApp.PushButton;
    setFocus(focus: boolean): UiApp.PushButton;
    setHTML(html: string): UiApp.PushButton;
    setHeight(height: string): UiApp.PushButton;
    setId(id: string): UiApp.PushButton;
    setLayoutData(layout: any): UiApp.PushButton;
    setPixelSize(width: number, height: number): UiApp.PushButton;
    setSize(width: string, height: string): UiApp.PushButton;
    setStyleAttribute(attribute: string, value: string): UiApp.PushButton;
    setStyleAttributes(attributes: any): UiApp.PushButton;
    setStyleName(styleName: string): UiApp.PushButton;
    setStylePrimaryName(styleName: string): UiApp.PushButton;
    setTabIndex(index: number): UiApp.PushButton;
    setTag(tag: string): UiApp.PushButton;
    setText(text: string): UiApp.PushButton;
    setTitle(title: string): UiApp.PushButton;
    setVisible(visible: boolean): UiApp.PushButton;
    setWidth(width: string): UiApp.PushButton;

  }


  export interface RadioButton {

    addBlurHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addClickHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addFocusHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.RadioButton;
    addStyleDependentName(styleName: string): UiApp.RadioButton;
    addStyleName(styleName: string): UiApp.RadioButton;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.RadioButton;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.RadioButton;
    setEnabled(enabled: boolean): UiApp.RadioButton;
    setFocus(focus: boolean): UiApp.RadioButton;
    setFormValue(formValue: string): UiApp.RadioButton;
    setHTML(html: string): UiApp.RadioButton;
    setHeight(height: string): UiApp.RadioButton;
    setId(id: string): UiApp.RadioButton;
    setLayoutData(layout: any): UiApp.RadioButton;
    setName(name: string): UiApp.RadioButton;
    setPixelSize(width: number, height: number): UiApp.RadioButton;
    setSize(width: string, height: string): UiApp.RadioButton;
    setStyleAttribute(attribute: string, value: string): UiApp.RadioButton;
    setStyleAttributes(attributes: any): UiApp.RadioButton;
    setStyleName(styleName: string): UiApp.RadioButton;
    setStylePrimaryName(styleName: string): UiApp.RadioButton;
    setTabIndex(index: number): UiApp.RadioButton;
    setTag(tag: string): UiApp.RadioButton;
    setText(text: string): UiApp.RadioButton;
    setTitle(title: string): UiApp.RadioButton;
    setValue(value: boolean): UiApp.RadioButton;
    setValue(value: boolean, fireEvents: boolean): UiApp.RadioButton;
    setVisible(visible: boolean): UiApp.RadioButton;
    setWidth(width: string): UiApp.RadioButton;

  }


  export interface ResetButton {

    addBlurHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addClickHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addFocusHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.ResetButton;
    addStyleDependentName(styleName: string): UiApp.ResetButton;
    addStyleName(styleName: string): UiApp.ResetButton;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.ResetButton;
    setEnabled(enabled: boolean): UiApp.ResetButton;
    setFocus(focus: boolean): UiApp.ResetButton;
    setHTML(html: string): UiApp.ResetButton;
    setHeight(height: string): UiApp.ResetButton;
    setId(id: string): UiApp.ResetButton;
    setLayoutData(layout: any): UiApp.ResetButton;
    setPixelSize(width: number, height: number): UiApp.ResetButton;
    setSize(width: string, height: string): UiApp.ResetButton;
    setStyleAttribute(attribute: string, value: string): UiApp.ResetButton;
    setStyleAttributes(attributes: any): UiApp.ResetButton;
    setStyleName(styleName: string): UiApp.ResetButton;
    setStylePrimaryName(styleName: string): UiApp.ResetButton;
    setTabIndex(index: number): UiApp.ResetButton;
    setTag(tag: string): UiApp.ResetButton;
    setText(text: string): UiApp.ResetButton;
    setTitle(title: string): UiApp.ResetButton;
    setVisible(visible: boolean): UiApp.ResetButton;
    setWidth(width: string): UiApp.ResetButton;

  }


  export interface ScrollPanel {

    add(widget: UiApp.Widget): UiApp.ScrollPanel;
    addScrollHandler(handler: UiApp.Handler): UiApp.ScrollPanel;
    addStyleDependentName(styleName: string): UiApp.ScrollPanel;
    addStyleName(styleName: string): UiApp.ScrollPanel;
    clear(): UiApp.ScrollPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAlwaysShowScrollBars(alwaysShow: boolean): UiApp.ScrollPanel;
    setHeight(height: string): UiApp.ScrollPanel;
    setHorizontalScrollPosition(position: number): UiApp.ScrollPanel;
    setId(id: string): UiApp.ScrollPanel;
    setLayoutData(layout: any): UiApp.ScrollPanel;
    setPixelSize(width: number, height: number): UiApp.ScrollPanel;
    setScrollPosition(position: number): UiApp.ScrollPanel;
    setSize(width: string, height: string): UiApp.ScrollPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.ScrollPanel;
    setStyleAttributes(attributes: any): UiApp.ScrollPanel;
    setStyleName(styleName: string): UiApp.ScrollPanel;
    setStylePrimaryName(styleName: string): UiApp.ScrollPanel;
    setTag(tag: string): UiApp.ScrollPanel;
    setTitle(title: string): UiApp.ScrollPanel;
    setVisible(visible: boolean): UiApp.ScrollPanel;
    setWidget(widget: UiApp.Widget): UiApp.ScrollPanel;
    setWidth(width: string): UiApp.ScrollPanel;

  }


  export interface ServerHandler {

    addCallbackElement(widget: UiApp.Widget): UiApp.ServerHandler;
    getId(): string;
    getTag(): string;
    getType(): string;
    setCallbackFunction(functionToInvoke: string): UiApp.ServerHandler;
    setId(id: string): UiApp.ServerHandler;
    setTag(tag: string): UiApp.ServerHandler;
    validateEmail(widget: UiApp.Widget): UiApp.ServerHandler;
    validateInteger(widget: UiApp.Widget): UiApp.ServerHandler;
    validateLength(widget: UiApp.Widget, min: number, max: number): UiApp.ServerHandler;
    validateMatches(widget: UiApp.Widget, pattern: string): UiApp.ServerHandler;
    validateMatches(widget: UiApp.Widget, pattern: string, flags: string): UiApp.ServerHandler;
    validateNotEmail(widget: UiApp.Widget): UiApp.ServerHandler;
    validateNotInteger(widget: UiApp.Widget): UiApp.ServerHandler;
    validateNotLength(widget: UiApp.Widget, min: number, max: number): UiApp.ServerHandler;
    validateNotMatches(widget: UiApp.Widget, pattern: string): UiApp.ServerHandler;
    validateNotMatches(widget: UiApp.Widget, pattern: string, flags: string): UiApp.ServerHandler;
    validateNotNumber(widget: UiApp.Widget): UiApp.ServerHandler;
    validateNotOptions(widget: UiApp.Widget, options: string[]): UiApp.ServerHandler;
    validateNotRange(widget: UiApp.Widget, min: number, max: number): UiApp.ServerHandler;
    validateNotSum(widgets: UiApp.Widget[], sum: number): UiApp.ServerHandler;
    validateNumber(widget: UiApp.Widget): UiApp.ServerHandler;
    validateOptions(widget: UiApp.Widget, options: string[]): UiApp.ServerHandler;
    validateRange(widget: UiApp.Widget, min: number, max: number): UiApp.ServerHandler;
    validateSum(widgets: UiApp.Widget[], sum: number): UiApp.ServerHandler;

  }


  export interface SimpleCheckBox {

    addBlurHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addClickHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addFocusHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.SimpleCheckBox;
    addStyleDependentName(styleName: string): UiApp.SimpleCheckBox;
    addStyleName(styleName: string): UiApp.SimpleCheckBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.SimpleCheckBox;
    setChecked(checked: boolean): UiApp.SimpleCheckBox;
    setEnabled(enabled: boolean): UiApp.SimpleCheckBox;
    setFocus(focus: boolean): UiApp.SimpleCheckBox;
    setHeight(height: string): UiApp.SimpleCheckBox;
    setId(id: string): UiApp.SimpleCheckBox;
    setLayoutData(layout: any): UiApp.SimpleCheckBox;
    setName(name: string): UiApp.SimpleCheckBox;
    setPixelSize(width: number, height: number): UiApp.SimpleCheckBox;
    setSize(width: string, height: string): UiApp.SimpleCheckBox;
    setStyleAttribute(attribute: string, value: string): UiApp.SimpleCheckBox;
    setStyleAttributes(attributes: any): UiApp.SimpleCheckBox;
    setStyleName(styleName: string): UiApp.SimpleCheckBox;
    setStylePrimaryName(styleName: string): UiApp.SimpleCheckBox;
    setTabIndex(index: number): UiApp.SimpleCheckBox;
    setTag(tag: string): UiApp.SimpleCheckBox;
    setTitle(title: string): UiApp.SimpleCheckBox;
    setVisible(visible: boolean): UiApp.SimpleCheckBox;
    setWidth(width: string): UiApp.SimpleCheckBox;

  }


  export interface SimplePanel {

    add(widget: UiApp.Widget): UiApp.SimplePanel;
    addStyleDependentName(styleName: string): UiApp.SimplePanel;
    addStyleName(styleName: string): UiApp.SimplePanel;
    clear(): UiApp.SimplePanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    setHeight(height: string): UiApp.SimplePanel;
    setId(id: string): UiApp.SimplePanel;
    setLayoutData(layout: any): UiApp.SimplePanel;
    setPixelSize(width: number, height: number): UiApp.SimplePanel;
    setSize(width: string, height: string): UiApp.SimplePanel;
    setStyleAttribute(attribute: string, value: string): UiApp.SimplePanel;
    setStyleAttributes(attributes: any): UiApp.SimplePanel;
    setStyleName(styleName: string): UiApp.SimplePanel;
    setStylePrimaryName(styleName: string): UiApp.SimplePanel;
    setTag(tag: string): UiApp.SimplePanel;
    setTitle(title: string): UiApp.SimplePanel;
    setVisible(visible: boolean): UiApp.SimplePanel;
    setWidget(widget: UiApp.Widget): UiApp.SimplePanel;
    setWidth(width: string): UiApp.SimplePanel;

  }


  export interface SimpleRadioButton {

    addBlurHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addClickHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addFocusHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.SimpleRadioButton;
    addStyleDependentName(styleName: string): UiApp.SimpleRadioButton;
    addStyleName(styleName: string): UiApp.SimpleRadioButton;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.SimpleRadioButton;
    setChecked(checked: boolean): UiApp.SimpleRadioButton;
    setEnabled(enabled: boolean): UiApp.SimpleRadioButton;
    setFocus(focus: boolean): UiApp.SimpleRadioButton;
    setHeight(height: string): UiApp.SimpleRadioButton;
    setId(id: string): UiApp.SimpleRadioButton;
    setLayoutData(layout: any): UiApp.SimpleRadioButton;
    setName(name: string): UiApp.SimpleRadioButton;
    setPixelSize(width: number, height: number): UiApp.SimpleRadioButton;
    setSize(width: string, height: string): UiApp.SimpleRadioButton;
    setStyleAttribute(attribute: string, value: string): UiApp.SimpleRadioButton;
    setStyleAttributes(attributes: any): UiApp.SimpleRadioButton;
    setStyleName(styleName: string): UiApp.SimpleRadioButton;
    setStylePrimaryName(styleName: string): UiApp.SimpleRadioButton;
    setTabIndex(index: number): UiApp.SimpleRadioButton;
    setTag(tag: string): UiApp.SimpleRadioButton;
    setTitle(title: string): UiApp.SimpleRadioButton;
    setVisible(visible: boolean): UiApp.SimpleRadioButton;
    setWidth(width: string): UiApp.SimpleRadioButton;

  }


  export interface SplitLayoutPanel {

    add(widget: UiApp.Widget): UiApp.SplitLayoutPanel;
    addEast(widget: UiApp.Widget, width: number): UiApp.SplitLayoutPanel;
    addNorth(widget: UiApp.Widget, height: number): UiApp.SplitLayoutPanel;
    addSouth(widget: UiApp.Widget, height: number): UiApp.SplitLayoutPanel;
    addStyleDependentName(styleName: string): UiApp.SplitLayoutPanel;
    addStyleName(styleName: string): UiApp.SplitLayoutPanel;
    addWest(widget: UiApp.Widget, width: number): UiApp.SplitLayoutPanel;
    clear(): UiApp.SplitLayoutPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    remove(index: number): UiApp.SplitLayoutPanel;
    remove(widget: UiApp.Widget): UiApp.SplitLayoutPanel;
    setHeight(height: string): UiApp.SplitLayoutPanel;
    setId(id: string): UiApp.SplitLayoutPanel;
    setLayoutData(layout: any): UiApp.SplitLayoutPanel;
    setPixelSize(width: number, height: number): UiApp.SplitLayoutPanel;
    setSize(width: string, height: string): UiApp.SplitLayoutPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.SplitLayoutPanel;
    setStyleAttributes(attributes: any): UiApp.SplitLayoutPanel;
    setStyleName(styleName: string): UiApp.SplitLayoutPanel;
    setStylePrimaryName(styleName: string): UiApp.SplitLayoutPanel;
    setTag(tag: string): UiApp.SplitLayoutPanel;
    setTitle(title: string): UiApp.SplitLayoutPanel;
    setVisible(visible: boolean): UiApp.SplitLayoutPanel;
    setWidgetMinSize(widget: UiApp.Widget, minSize: number): UiApp.SplitLayoutPanel;
    setWidth(width: string): UiApp.SplitLayoutPanel;

  }


  export interface StackPanel {

    add(widget: UiApp.Widget): UiApp.StackPanel;
    add(widget: UiApp.Widget, text: string): UiApp.StackPanel;
    add(widget: UiApp.Widget, text: string, asHtml: boolean): UiApp.StackPanel;
    addStyleDependentName(styleName: string): UiApp.StackPanel;
    addStyleName(styleName: string): UiApp.StackPanel;
    clear(): UiApp.StackPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    remove(index: number): UiApp.StackPanel;
    remove(widget: UiApp.Widget): UiApp.StackPanel;
    setHeight(height: string): UiApp.StackPanel;
    setId(id: string): UiApp.StackPanel;
    setLayoutData(layout: any): UiApp.StackPanel;
    setPixelSize(width: number, height: number): UiApp.StackPanel;
    setSize(width: string, height: string): UiApp.StackPanel;
    setStackText(index: number, text: string): UiApp.StackPanel;
    setStackText(index: number, text: string, asHtml: boolean): UiApp.StackPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.StackPanel;
    setStyleAttributes(attributes: any): UiApp.StackPanel;
    setStyleName(styleName: string): UiApp.StackPanel;
    setStylePrimaryName(styleName: string): UiApp.StackPanel;
    setTag(tag: string): UiApp.StackPanel;
    setTitle(title: string): UiApp.StackPanel;
    setVisible(visible: boolean): UiApp.StackPanel;
    setWidth(width: string): UiApp.StackPanel;

  }


  export interface SubmitButton {

    addBlurHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addClickHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addFocusHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.SubmitButton;
    addStyleDependentName(styleName: string): UiApp.SubmitButton;
    addStyleName(styleName: string): UiApp.SubmitButton;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.SubmitButton;
    setEnabled(enabled: boolean): UiApp.SubmitButton;
    setFocus(focus: boolean): UiApp.SubmitButton;
    setHTML(html: string): UiApp.SubmitButton;
    setHeight(height: string): UiApp.SubmitButton;
    setId(id: string): UiApp.SubmitButton;
    setLayoutData(layout: any): UiApp.SubmitButton;
    setPixelSize(width: number, height: number): UiApp.SubmitButton;
    setSize(width: string, height: string): UiApp.SubmitButton;
    setStyleAttribute(attribute: string, value: string): UiApp.SubmitButton;
    setStyleAttributes(attributes: any): UiApp.SubmitButton;
    setStyleName(styleName: string): UiApp.SubmitButton;
    setStylePrimaryName(styleName: string): UiApp.SubmitButton;
    setTabIndex(index: number): UiApp.SubmitButton;
    setTag(tag: string): UiApp.SubmitButton;
    setText(text: string): UiApp.SubmitButton;
    setTitle(title: string): UiApp.SubmitButton;
    setVisible(visible: boolean): UiApp.SubmitButton;
    setWidth(width: string): UiApp.SubmitButton;

  }


  export interface SuggestBox {

    addKeyDownHandler(handler: UiApp.Handler): UiApp.SuggestBox;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.SuggestBox;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.SuggestBox;
    addSelectionHandler(handler: UiApp.Handler): UiApp.SuggestBox;
    addStyleDependentName(styleName: string): UiApp.SuggestBox;
    addStyleName(styleName: string): UiApp.SuggestBox;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.SuggestBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.SuggestBox;
    setAnimationEnabled(animationEnabled: boolean): UiApp.SuggestBox;
    setAutoSelectEnabled(autoSelectEnabled: boolean): UiApp.SuggestBox;
    setFocus(focus: boolean): UiApp.SuggestBox;
    setHeight(height: string): UiApp.SuggestBox;
    setId(id: string): UiApp.SuggestBox;
    setLayoutData(layout: any): UiApp.SuggestBox;
    setLimit(limit: number): UiApp.SuggestBox;
    setPixelSize(width: number, height: number): UiApp.SuggestBox;
    setPopupStyleName(styleName: string): UiApp.SuggestBox;
    setSize(width: string, height: string): UiApp.SuggestBox;
    setStyleAttribute(attribute: string, value: string): UiApp.SuggestBox;
    setStyleAttributes(attributes: any): UiApp.SuggestBox;
    setStyleName(styleName: string): UiApp.SuggestBox;
    setStylePrimaryName(styleName: string): UiApp.SuggestBox;
    setTabIndex(index: number): UiApp.SuggestBox;
    setTag(tag: string): UiApp.SuggestBox;
    setText(text: string): UiApp.SuggestBox;
    setTitle(title: string): UiApp.SuggestBox;
    setValue(value: string): UiApp.SuggestBox;
    setValue(value: string, fireEvents: boolean): UiApp.SuggestBox;
    setVisible(visible: boolean): UiApp.SuggestBox;
    setWidth(width: string): UiApp.SuggestBox;

  }


  export interface TabBar {

    addBeforeSelectionHandler(handler: UiApp.Handler): UiApp.TabBar;
    addSelectionHandler(handler: UiApp.Handler): UiApp.TabBar;
    addStyleDependentName(styleName: string): UiApp.TabBar;
    addStyleName(styleName: string): UiApp.TabBar;
    addTab(title: string): UiApp.TabBar;
    addTab(title: string, asHtml: boolean): UiApp.TabBar;
    addTab(widget: UiApp.Widget): UiApp.TabBar;
    getId(): string;
    getTag(): string;
    getType(): string;
    selectTab(index: number): UiApp.TabBar;
    setHeight(height: string): UiApp.TabBar;
    setId(id: string): UiApp.TabBar;
    setLayoutData(layout: any): UiApp.TabBar;
    setPixelSize(width: number, height: number): UiApp.TabBar;
    setSize(width: string, height: string): UiApp.TabBar;
    setStyleAttribute(attribute: string, value: string): UiApp.TabBar;
    setStyleAttributes(attributes: any): UiApp.TabBar;
    setStyleName(styleName: string): UiApp.TabBar;
    setStylePrimaryName(styleName: string): UiApp.TabBar;
    setTabEnabled(index: number, enabled: boolean): UiApp.TabBar;
    setTabText(index: number, text: string): UiApp.TabBar;
    setTag(tag: string): UiApp.TabBar;
    setTitle(title: string): UiApp.TabBar;
    setVisible(visible: boolean): UiApp.TabBar;
    setWidth(width: string): UiApp.TabBar;

  }


  export interface TabPanel {

    add(widget: UiApp.Widget): UiApp.TabPanel;
    add(widget: UiApp.Widget, text: string): UiApp.TabPanel;
    add(widget: UiApp.Widget, text: string, asHtml: boolean): UiApp.TabPanel;
    add(widget: UiApp.Widget, tabWidget: UiApp.Widget): UiApp.TabPanel;
    addBeforeSelectionHandler(handler: UiApp.Handler): UiApp.TabPanel;
    addSelectionHandler(handler: UiApp.Handler): UiApp.TabPanel;
    addStyleDependentName(styleName: string): UiApp.TabPanel;
    addStyleName(styleName: string): UiApp.TabPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    selectTab(index: number): UiApp.TabPanel;
    setAnimationEnabled(animationEnabled: boolean): UiApp.TabPanel;
    setHeight(height: string): UiApp.TabPanel;
    setId(id: string): UiApp.TabPanel;
    setLayoutData(layout: any): UiApp.TabPanel;
    setPixelSize(width: number, height: number): UiApp.TabPanel;
    setSize(width: string, height: string): UiApp.TabPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.TabPanel;
    setStyleAttributes(attributes: any): UiApp.TabPanel;
    setStyleName(styleName: string): UiApp.TabPanel;
    setStylePrimaryName(styleName: string): UiApp.TabPanel;
    setTag(tag: string): UiApp.TabPanel;
    setTitle(title: string): UiApp.TabPanel;
    setVisible(visible: boolean): UiApp.TabPanel;
    setWidth(width: string): UiApp.TabPanel;

  }


  export interface TextArea {

    addBlurHandler(handler: UiApp.Handler): UiApp.TextArea;
    addChangeHandler(handler: UiApp.Handler): UiApp.TextArea;
    addClickHandler(handler: UiApp.Handler): UiApp.TextArea;
    addFocusHandler(handler: UiApp.Handler): UiApp.TextArea;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.TextArea;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.TextArea;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.TextArea;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.TextArea;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.TextArea;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.TextArea;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.TextArea;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.TextArea;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.TextArea;
    addStyleDependentName(styleName: string): UiApp.TextArea;
    addStyleName(styleName: string): UiApp.TextArea;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.TextArea;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.TextArea;
    setCharacterWidth(width: number): UiApp.TextArea;
    setCursorPos(position: number): UiApp.TextArea;
    setDirection(direction: UiApp.Component): UiApp.TextArea;
    setEnabled(enabled: boolean): UiApp.TextArea;
    setFocus(focus: boolean): UiApp.TextArea;
    setHeight(height: string): UiApp.TextArea;
    setId(id: string): UiApp.TextArea;
    setLayoutData(layout: any): UiApp.TextArea;
    setName(name: string): UiApp.TextArea;
    setPixelSize(width: number, height: number): UiApp.TextArea;
    setReadOnly(readOnly: boolean): UiApp.TextArea;
    setSelectionRange(position: number, length: number): UiApp.TextArea;
    setSize(width: string, height: string): UiApp.TextArea;
    setStyleAttribute(attribute: string, value: string): UiApp.TextArea;
    setStyleAttributes(attributes: any): UiApp.TextArea;
    setStyleName(styleName: string): UiApp.TextArea;
    setStylePrimaryName(styleName: string): UiApp.TextArea;
    setTabIndex(index: number): UiApp.TextArea;
    setTag(tag: string): UiApp.TextArea;
    setText(text: string): UiApp.TextArea;
    setTextAlignment(textAlign: UiApp.Component): UiApp.TextArea;
    setTitle(title: string): UiApp.TextArea;
    setValue(value: string): UiApp.TextArea;
    setValue(value: string, fireEvents: boolean): UiApp.TextArea;
    setVisible(visible: boolean): UiApp.TextArea;
    setVisibleLines(lines: number): UiApp.TextArea;
    setWidth(width: string): UiApp.TextArea;

  }


  export interface TextBox {

    addBlurHandler(handler: UiApp.Handler): UiApp.TextBox;
    addChangeHandler(handler: UiApp.Handler): UiApp.TextBox;
    addClickHandler(handler: UiApp.Handler): UiApp.TextBox;
    addFocusHandler(handler: UiApp.Handler): UiApp.TextBox;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.TextBox;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.TextBox;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.TextBox;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.TextBox;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.TextBox;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.TextBox;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.TextBox;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.TextBox;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.TextBox;
    addStyleDependentName(styleName: string): UiApp.TextBox;
    addStyleName(styleName: string): UiApp.TextBox;
    addValueChangeHandler(handler: UiApp.Handler): UiApp.TextBox;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.TextBox;
    setCursorPos(position: number): UiApp.TextBox;
    setDirection(direction: UiApp.Component): UiApp.TextBox;
    setEnabled(enabled: boolean): UiApp.TextBox;
    setFocus(focus: boolean): UiApp.TextBox;
    setHeight(height: string): UiApp.TextBox;
    setId(id: string): UiApp.TextBox;
    setLayoutData(layout: any): UiApp.TextBox;
    setMaxLength(length: number): UiApp.TextBox;
    setName(name: string): UiApp.TextBox;
    setPixelSize(width: number, height: number): UiApp.TextBox;
    setReadOnly(readOnly: boolean): UiApp.TextBox;
    setSelectionRange(position: number, length: number): UiApp.TextBox;
    setSize(width: string, height: string): UiApp.TextBox;
    setStyleAttribute(attribute: string, value: string): UiApp.TextBox;
    setStyleAttributes(attributes: any): UiApp.TextBox;
    setStyleName(styleName: string): UiApp.TextBox;
    setStylePrimaryName(styleName: string): UiApp.TextBox;
    setTabIndex(index: number): UiApp.TextBox;
    setTag(tag: string): UiApp.TextBox;
    setText(text: string): UiApp.TextBox;
    setTextAlignment(textAlign: UiApp.Component): UiApp.TextBox;
    setTitle(title: string): UiApp.TextBox;
    setValue(value: string): UiApp.TextBox;
    setValue(value: string, fireEvents: boolean): UiApp.TextBox;
    setVisible(visible: boolean): UiApp.TextBox;
    setVisibleLength(length: number): UiApp.TextBox;
    setWidth(width: string): UiApp.TextBox;

  }


  export interface ToggleButton {

    addBlurHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addClickHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addFocusHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.ToggleButton;
    addStyleDependentName(styleName: string): UiApp.ToggleButton;
    addStyleName(styleName: string): UiApp.ToggleButton;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.ToggleButton;
    setDown(down: boolean): UiApp.ToggleButton;
    setEnabled(enabled: boolean): UiApp.ToggleButton;
    setFocus(focus: boolean): UiApp.ToggleButton;
    setHTML(html: string): UiApp.ToggleButton;
    setHeight(height: string): UiApp.ToggleButton;
    setId(id: string): UiApp.ToggleButton;
    setLayoutData(layout: any): UiApp.ToggleButton;
    setPixelSize(width: number, height: number): UiApp.ToggleButton;
    setSize(width: string, height: string): UiApp.ToggleButton;
    setStyleAttribute(attribute: string, value: string): UiApp.ToggleButton;
    setStyleAttributes(attributes: any): UiApp.ToggleButton;
    setStyleName(styleName: string): UiApp.ToggleButton;
    setStylePrimaryName(styleName: string): UiApp.ToggleButton;
    setTabIndex(index: number): UiApp.ToggleButton;
    setTag(tag: string): UiApp.ToggleButton;
    setText(text: string): UiApp.ToggleButton;
    setTitle(title: string): UiApp.ToggleButton;
    setVisible(visible: boolean): UiApp.ToggleButton;
    setWidth(width: string): UiApp.ToggleButton;

  }


  export interface Tree {

    add(widget: UiApp.Widget): UiApp.Tree;
    addBlurHandler(handler: UiApp.Handler): UiApp.Tree;
    addCloseHandler(handler: UiApp.Handler): UiApp.Tree;
    addFocusHandler(handler: UiApp.Handler): UiApp.Tree;
    addItem(text: string): UiApp.Tree;
    addItem(item: TreeItem): UiApp.Tree;
    addItem(widget: UiApp.Widget): UiApp.Tree;
    addKeyDownHandler(handler: UiApp.Handler): UiApp.Tree;
    addKeyPressHandler(handler: UiApp.Handler): UiApp.Tree;
    addKeyUpHandler(handler: UiApp.Handler): UiApp.Tree;
    addMouseDownHandler(handler: UiApp.Handler): UiApp.Tree;
    addMouseMoveHandler(handler: UiApp.Handler): UiApp.Tree;
    addMouseOutHandler(handler: UiApp.Handler): UiApp.Tree;
    addMouseOverHandler(handler: UiApp.Handler): UiApp.Tree;
    addMouseUpHandler(handler: UiApp.Handler): UiApp.Tree;
    addMouseWheelHandler(handler: UiApp.Handler): UiApp.Tree;
    addOpenHandler(handler: UiApp.Handler): UiApp.Tree;
    addSelectionHandler(handler: UiApp.Handler): UiApp.Tree;
    addStyleDependentName(styleName: string): UiApp.Tree;
    addStyleName(styleName: string): UiApp.Tree;
    clear(): UiApp.Tree;
    getId(): string;
    getTag(): string;
    getType(): string;
    setAccessKey(accessKey: number): UiApp.Tree;
    setAnimationEnabled(animationEnabled: boolean): UiApp.Tree;
    setFocus(focus: boolean): UiApp.Tree;
    setHeight(height: string): UiApp.Tree;
    setId(id: string): UiApp.Tree;
    setLayoutData(layout: any): UiApp.Tree;
    setPixelSize(width: number, height: number): UiApp.Tree;
    setSelectedItem(item: TreeItem): UiApp.Tree;
    setSelectedItem(item: TreeItem, fireEvents: boolean): UiApp.Tree;
    setSize(width: string, height: string): UiApp.Tree;
    setStyleAttribute(attribute: string, value: string): UiApp.Tree;
    setStyleAttributes(attributes: any): UiApp.Tree;
    setStyleName(styleName: string): UiApp.Tree;
    setStylePrimaryName(styleName: string): UiApp.Tree;
    setTabIndex(index: number): UiApp.Tree;
    setTag(tag: string): UiApp.Tree;
    setTitle(title: string): UiApp.Tree;
    setVisible(visible: boolean): UiApp.Tree;
    setWidth(width: string): UiApp.Tree;

  }


  export interface TreeItem {

    addItem(text: string): UiApp.TreeItem;
    addItem(item: TreeItem): UiApp.TreeItem;
    addItem(widget: UiApp.Widget): UiApp.TreeItem;
    addStyleDependentName(styleName: string): UiApp.TreeItem;
    addStyleName(styleName: string): UiApp.TreeItem;
    clear(): UiApp.TreeItem;
    getId(): string;
    getTag(): string;
    getType(): string;
    setHTML(html: string): UiApp.TreeItem;
    setHeight(height: string): UiApp.TreeItem;
    setId(id: string): UiApp.TreeItem;
    setPixelSize(width: number, height: number): UiApp.TreeItem;
    setSelected(selected: boolean): UiApp.TreeItem;
    setSize(width: string, height: string): UiApp.TreeItem;
    setState(open: boolean): UiApp.TreeItem;
    setState(open: boolean, fireEvents: boolean): UiApp.TreeItem;
    setStyleAttribute(attribute: string, value: string): UiApp.TreeItem;
    setStyleAttributes(attributes: any): UiApp.TreeItem;
    setStyleName(styleName: string): UiApp.TreeItem;
    setStylePrimaryName(styleName: string): UiApp.TreeItem;
    setTag(tag: string): UiApp.TreeItem;
    setText(text: string): UiApp.TreeItem;
    setTitle(title: string): UiApp.TreeItem;
    setUserObject(a: any): UiApp.TreeItem;
    setVisible(visible: boolean): UiApp.TreeItem;
    setWidget(widget: UiApp.Widget): UiApp.TreeItem;
    setWidth(width: string): UiApp.TreeItem;

  }


  export interface UiInstance {

    add(child: UiApp.Widget): UiApp.UiInstance;
    close(): UiApp.UiInstance;
    createAbsolutePanel(): UiApp.AbsolutePanel;
    createAnchor(text: string, asHtml: boolean, href: string): UiApp.Anchor;
    createAnchor(text: string, href: string): UiApp.Anchor;
    createButton(): UiApp.Button;
    createButton(html: string): UiApp.Button;
    createButton(html: string, clickHandler: UiApp.Handler): UiApp.Button;
    createCaptionPanel(): UiApp.CaptionPanel;
    createCaptionPanel(caption: string): UiApp.CaptionPanel;
    createCaptionPanel(caption: string, asHtml: boolean): UiApp.CaptionPanel;
    createCheckBox(): UiApp.CheckBox;
    createCheckBox(label: string): UiApp.CheckBox;
    createCheckBox(label: string, asHtml: boolean): UiApp.CheckBox;
    createClientHandler(): UiApp.ClientHandler;
    createDateBox(): UiApp.DateBox;
    createDatePicker(): UiApp.DatePicker;
    createDecoratedStackPanel(): UiApp.DecoratedStackPanel;
    createDecoratedTabBar(): UiApp.DecoratedTabBar;
    createDecoratedTabPanel(): UiApp.DecoratedTabPanel;
    createDecoratorPanel(): UiApp.DecoratorPanel;
    createDialogBox(): UiApp.DialogBox;
    createDialogBox(autoHide: boolean): UiApp.DialogBox;
    createDialogBox(autoHide: boolean, modal: boolean): UiApp.DialogBox;
    createDocsListDialog(): UiApp.DocsListDialog;
    createFileUpload(): UiApp.FileUpload;
    createFlexTable(): UiApp.FlexTable;
    createFlowPanel(): UiApp.FlowPanel;
    createFocusPanel(): UiApp.FocusPanel;
    createFocusPanel(child: UiApp.Widget): UiApp.FocusPanel;
    createFormPanel(): UiApp.FormPanel;
    createGrid(): UiApp.Grid;
    createGrid(rows: number, columns: number): UiApp.Grid;
    createHTML(): UiApp.HTML;
    createHTML(html: string): UiApp.HTML;
    createHTML(html: string, wordWrap: boolean): UiApp.HTML;
    createHidden(): UiApp.Hidden;
    createHidden(name: string): UiApp.Hidden;
    createHidden(name: string, value: string): UiApp.Hidden;
    createHorizontalPanel(): UiApp.HorizontalPanel;
    createImage(): UiApp.Image;
    createImage(url: string): UiApp.Image;
    createImage(url: string, left: number, top: number, width: number, height: number): UiApp.Image;
    createInlineLabel(): UiApp.InlineLabel;
    createInlineLabel(text: string): UiApp.InlineLabel;
    createLabel(): UiApp.Label;
    createLabel(text: string): UiApp.Label;
    createLabel(text: string, wordWrap: boolean): UiApp.Label;
    createListBox(): UiApp.ListBox;
    createListBox(isMultipleSelect: boolean): UiApp.ListBox;
    createMenuBar(): UiApp.MenuBar;
    createMenuBar(vertical: boolean): UiApp.MenuBar;
    createMenuItem(text: string, asHtml: boolean, command: UiApp.Handler): UiApp.MenuItem;
    createMenuItem(text: string, command: UiApp.Handler): UiApp.MenuItem;
    createMenuItemSeparator(): UiApp.MenuItemSeparator;
    createPasswordTextBox(): UiApp.PasswordTextBox;
    createPopupPanel(): UiApp.PopupPanel;
    createPopupPanel(autoHide: boolean): UiApp.PopupPanel;
    createPopupPanel(autoHide: boolean, modal: boolean): UiApp.PopupPanel;
    createPushButton(): UiApp.PushButton;
    createPushButton(upText: string): UiApp.PushButton;
    createPushButton(upText: string, downText: string): UiApp.PushButton;
    createPushButton(upText: string, downText: string, clickHandler: UiApp.Handler): UiApp.PushButton;
    createPushButton(upText: string, clickHandler: UiApp.Handler): UiApp.PushButton;
    createRadioButton(name: string): UiApp.RadioButton;
    createRadioButton(name: string, label: string): UiApp.RadioButton;
    createRadioButton(name: string, label: string, asHtml: boolean): UiApp.RadioButton;
    createResetButton(): UiApp.ResetButton;
    createResetButton(html: string): UiApp.ResetButton;
    createResetButton(html: string, clickHandler: UiApp.Handler): UiApp.ResetButton;
    createScrollPanel(): UiApp.ScrollPanel;
    createScrollPanel(child: UiApp.Widget): UiApp.ScrollPanel;
    createServerBlurHandler(): UiApp.ServerHandler;
    createServerBlurHandler(functionName: string): UiApp.ServerHandler;
    createServerChangeHandler(): UiApp.ServerHandler;
    createServerChangeHandler(functionName: string): UiApp.ServerHandler;
    createServerClickHandler(): UiApp.ServerHandler;
    createServerClickHandler(functionName: string): UiApp.ServerHandler;
    createServerCloseHandler(): UiApp.ServerHandler;
    createServerCloseHandler(functionName: string): UiApp.ServerHandler;
    createServerCommand(): UiApp.ServerHandler;
    createServerCommand(functionName: string): UiApp.ServerHandler;
    createServerErrorHandler(): UiApp.ServerHandler;
    createServerErrorHandler(functionName: string): UiApp.ServerHandler;
    createServerFocusHandler(): UiApp.ServerHandler;
    createServerFocusHandler(functionName: string): UiApp.ServerHandler;
    createServerHandler(): UiApp.ServerHandler;
    createServerHandler(functionName: string): UiApp.ServerHandler;
    createServerInitializeHandler(): UiApp.ServerHandler;
    createServerInitializeHandler(functionName: string): UiApp.ServerHandler;
    createServerKeyHandler(): UiApp.ServerHandler;
    createServerKeyHandler(functionName: string): UiApp.ServerHandler;
    createServerLoadHandler(): UiApp.ServerHandler;
    createServerLoadHandler(functionName: string): UiApp.ServerHandler;
    createServerMouseHandler(): UiApp.ServerHandler;
    createServerMouseHandler(functionName: string): UiApp.ServerHandler;
    createServerScrollHandler(): UiApp.ServerHandler;
    createServerScrollHandler(functionName: string): UiApp.ServerHandler;
    createServerSelectionHandler(): UiApp.ServerHandler;
    createServerSelectionHandler(functionName: string): UiApp.ServerHandler;
    createServerSubmitHandler(): UiApp.ServerHandler;
    createServerSubmitHandler(functionName: string): UiApp.ServerHandler;
    createServerValueChangeHandler(): UiApp.ServerHandler;
    createServerValueChangeHandler(functionName: string): UiApp.ServerHandler;
    createSimpleCheckBox(): UiApp.SimpleCheckBox;
    createSimplePanel(): UiApp.SimplePanel;
    createSimpleRadioButton(name: string): UiApp.SimpleRadioButton;
    createSplitLayoutPanel(): UiApp.SplitLayoutPanel;
    createStackPanel(): UiApp.StackPanel;
    createSubmitButton(): UiApp.SubmitButton;
    createSubmitButton(html: string): UiApp.SubmitButton;
    createSuggestBox(): UiApp.SuggestBox;
    createTabBar(): UiApp.TabBar;
    createTabPanel(): UiApp.TabPanel;
    createTextArea(): UiApp.TextArea;
    createTextBox(): UiApp.TextBox;
    createToggleButton(): UiApp.ToggleButton;
    createToggleButton(upText: string): UiApp.ToggleButton;
    createToggleButton(upText: string, downText: string): UiApp.ToggleButton;
    createToggleButton(upText: string, clickHandler: UiApp.Handler): UiApp.ToggleButton;
    createTree(): UiApp.Tree;
    createTreeItem(): UiApp.TreeItem;
    createTreeItem(text: string): UiApp.TreeItem;
    createTreeItem(child: UiApp.Widget): UiApp.TreeItem;
    createVerticalPanel(): UiApp.VerticalPanel;
    getElementById(id: string): UiApp.Component;
    getId(): string;
    isStandardsMode(): boolean;
    loadComponent(componentName: string): UiApp.Component;
    loadComponent(componentName: string, optAdvancedArgs: any): UiApp.Component;
    remove(index: number): UiApp.UiInstance;
    remove(widget: UiApp.Widget): UiApp.UiInstance;
    setHeight(height: number): UiApp.UiInstance;
    setStandardsMode(standardsMode: boolean): UiApp.UiInstance;
    setStyleAttribute(attribute: string, value: string): UiApp.UiInstance;
    setTitle(title: string): UiApp.UiInstance;
    setWidth(width: number): UiApp.UiInstance;

  }


  export enum VerticalAlignment {

    BOTTOM,
    MIDDLE,
    TOP

  }


  export interface VerticalPanel {

    add(widget: UiApp.Widget): UiApp.VerticalPanel;
    addStyleDependentName(styleName: string): UiApp.VerticalPanel;
    addStyleName(styleName: string): UiApp.VerticalPanel;
    clear(): UiApp.VerticalPanel;
    getId(): string;
    getTag(): string;
    getType(): string;
    remove(index: number): UiApp.VerticalPanel;
    remove(widget: UiApp.Widget): UiApp.VerticalPanel;
    setBorderWidth(width: number): UiApp.VerticalPanel;
    setCellHeight(widget: UiApp.Widget, height: string): UiApp.VerticalPanel;
    setCellHorizontalAlignment(widget: UiApp.Widget, horizontalAlignment: UiApp.HorizontalAlignment): UiApp.VerticalPanel;
    setCellVerticalAlignment(widget: UiApp.Widget, verticalAlignment: UiApp.VerticalAlignment): UiApp.VerticalPanel;
    setCellWidth(widget: UiApp.Widget, width: string): UiApp.VerticalPanel;
    setHeight(height: string): UiApp.VerticalPanel;
    setHorizontalAlignment(horizontalAlignment: UiApp.HorizontalAlignment): UiApp.VerticalPanel;
    setId(id: string): UiApp.VerticalPanel;
    setLayoutData(layout: any): UiApp.VerticalPanel;
    setPixelSize(width: number, height: number): UiApp.VerticalPanel;
    setSize(width: string, height: string): UiApp.VerticalPanel;
    setSpacing(spacing: number): UiApp.VerticalPanel;
    setStyleAttribute(attribute: string, value: string): UiApp.VerticalPanel;
    setStyleAttributes(attributes: any): UiApp.VerticalPanel;
    setStyleName(styleName: string): UiApp.VerticalPanel;
    setStylePrimaryName(styleName: string): UiApp.VerticalPanel;
    setTag(tag: string): UiApp.VerticalPanel;
    setTitle(title: string): UiApp.VerticalPanel;
    setVerticalAlignment(verticalAlignment: UiApp.VerticalAlignment): UiApp.VerticalPanel;
    setVisible(visible: boolean): UiApp.VerticalPanel;
    setWidth(width: string): UiApp.VerticalPanel;

  }


  export interface Widget {

    getId(): string;
    getType(): string;

  }


}