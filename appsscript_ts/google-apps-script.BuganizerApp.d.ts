/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: BuganizerApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class BuganizerApp {
  static createBug(componentId: string, summary: string): BuganizerApp.Bug;
  static createBug(componentId: string, summary: string, reporter: string, note: string): BuganizerApp.Bug;
  static createHotlist(name: string, description: string): BuganizerApp.Hotlist;
  static createQuery(): BuganizerApp.Query;
  static getBug(id: string): BuganizerApp.Bug;
  static getBugs(bugIds: string[]): BuganizerApp.Bug[];
  static getComponentById(id: number): BuganizerApp.Component;
  static getComponentByPath(path: string): BuganizerApp.Component;
  static getHistoryForBugIds(ids: string[]): BuganizerApp.BugHistory[];
  static getHistoryForBugs(bug: BuganizerApp.Bug[]): BuganizerApp.BugHistory[];
  static getHotlist(id: string): BuganizerApp.Hotlist;
  static getSavedSearch(id: string): BuganizerApp.Bug[];
}

declare namespace BuganizerApp {

  export interface Bug {

    addBlocking(bugId: string): BuganizerApp.Bug;
    addCC(ldap: string): BuganizerApp.Bug;
    addDependsOn(bugId: string): BuganizerApp.Bug;
    addFoundIn(foundIn: string): BuganizerApp.Bug;
    addTargetedTo(targetedTo: string): BuganizerApp.Bug;
    addToHotlist(hotlistId: string): BuganizerApp.Bug;
    addVerifiedIn(verifiedIn: string): BuganizerApp.Bug;
    getAssignee(): string;
    getBlocking(): string[];
    getCC(): string[];
    getChangelists(): string[];
    getComponentPath(): string[];
    getContents(): string[];
    getCreatedTime(): Date;
    getCustomFields(): BuganizerApp.CustomField[];
    getDependsOn(): string[];
    getDuplicateOf(): string;
    getFoundIn(): string[];
    getHistory(): BuganizerApp.BugHistory;
    getHotlistIds(): string[];
    getId(): string;
    getInProd(): boolean;
    getModifiedTime(): Date;
    getPriority(): number;
    getReporter(): string;
    getResolution(): string;
    getResolvedTime(): Date;
    getSeverity(): number;
    getStatus(): string;
    getSummary(): string;
    getTargetedTo(): string[];
    getType(): string;
    getVerifiedIn(): string[];
    getVerifiedTime(): Date;
    getVerifier(): string;
    removeBlocking(bugId: string): BuganizerApp.Bug;
    removeCC(ldap: string): BuganizerApp.Bug;
    removeDependsOn(bugId: string): BuganizerApp.Bug;
    removeFoundIn(foundIn: string): BuganizerApp.Bug;
    removeFromHotlist(hotlistId: string): BuganizerApp.Bug;
    removeTargetedTo(targetedTo: string): BuganizerApp.Bug;
    removeVerifiedIn(verifiedIn: string): BuganizerApp.Bug;
    save(): BuganizerApp.Bug;
    save(bugAction: BuganizerApp.Action): BuganizerApp.Bug;
    save(bugAction: string): BuganizerApp.Bug;
    setAssignee(assignee: string): BuganizerApp.Bug;
    setBlocking(bugIds: string[]): BuganizerApp.Bug;
    setCC(ldaps: string[]): BuganizerApp.Bug;
    setComponentPath(path: string): BuganizerApp.Bug;
    setCustomField(field: BuganizerApp.CustomField, value: string): BuganizerApp.Bug;
    setDependsOn(bugIds: string[]): BuganizerApp.Bug;
    setDuplicateOf(duplicateId: string): BuganizerApp.Bug;
    setFoundIn(foundIns: string[]): BuganizerApp.Bug;
    setHotlistIds(hotlistIds: string[]): BuganizerApp.Bug;
    setNote(note: string): BuganizerApp.Bug;
    setPriority(priority: BuganizerApp.Priority): BuganizerApp.Bug;
    setPriority(priority: string): BuganizerApp.Bug;
    setReporter(reporter: string): BuganizerApp.Bug;
    setSendEmails(sendEmail: boolean): BuganizerApp.Bug;
    setSeverity(severity: BuganizerApp.Severity): BuganizerApp.Bug;
    setSeverity(severity: string): BuganizerApp.Bug;
    setSummary(summary: string): BuganizerApp.Bug;
    setTargetedTo(targetedTos: string[]): BuganizerApp.Bug;
    setType(type: BuganizerApp.Type): BuganizerApp.Bug;
    setType(type: string): BuganizerApp.Bug;
    setVerifiedIn(verifiedIns: string[]): BuganizerApp.Bug;
    setVerifier(verifier: string): BuganizerApp.Bug;

  }


  export interface BugHistory {

    getBug(): BuganizerApp.Bug;
    getHistory(): BuganizerApp.BugHistoryEvent[];

  }


  export interface BugHistoryEvent {

    getAction(): string;
    getAddedBlockingIds(): string[];
    getAddedCCs(): string[];
    getAddedChangelists(): string[];
    getAddedDependsOnIds(): string[];
    getAddedFoundIn(): string[];
    getAddedHotlistIds(): string[];
    getAddedNotes(): string[];
    getAddedTargetedTo(): string[];
    getAddedVerifiedIn(): string[];
    getBugId(): string;
    getModifiedCustomFields(): BuganizerApp.CustomField[];
    getModifiedTime(): Date;
    getNewAssignee(): string;
    getNewBugType(): string;
    getNewComponentId(): string;
    getNewPriority(): string;
    getNewReporter(): string;
    getNewResolution(): string;
    getNewSeverity(): string;
    getNewStatus(): string;
    getNewSummary(): string;
    getNewVerifier(): string;
    getRemovedBlockingIds(): string[];
    getRemovedCCs(): string[];
    getRemovedChangelists(): string[];
    getRemovedDependsOnIds(): string[];
    getRemovedFoundIn(): string[];
    getRemovedHotlistIds(): string[];
    getRemovedTargetedTo(): string[];
    getRemovedVerifiedIn(): string[];
    getUserPerformingAction(): string;
    getVersion(): string;

  }


  export enum Action {

    ACCEPT,
    ASSIGN,
    ASSIGN_VERIFIER,
    CREATE,
    DUPLICATE,
    FIXED_ACTION,
    FIX_LATER_ACTION,
    FIX_NOW,
    IGNORE_THIS_ISSUE,
    NOT_FEASIBLE,
    NOT_REPEATABLE,
    OBSOLETE,
    REASSIGN,
    REASSIGN_VERIFIER,
    REOPEN,
    REQUEST_CLARIFICATION,
    SAVE,
    STILL_NOT_FIXED,
    UNACCEPT,
    UNASSIGN,
    UNASSIGN_VERIFIER,
    VERIFY,
    WORKS_AS_INTENDED

  }


  export enum DateType {

    CREATED,
    MODIFIED,
    RESOLVED,
    VERIFIED

  }


  export enum Priority {

    P0,
    P1,
    P2,
    P3,
    P4

  }


  export enum Resolution {

    DUPLICATE,
    FIXED,
    FIX_LATER,
    IGNORE,
    NOT_FEASABLE,
    NOT_REPEATABLE,
    OBSOLETE,
    WORKING_AS_INTENDED

  }


  export enum Severity {

    S0,
    S1,
    S2,
    S3,
    S4

  }


  export enum Status {

    ACCEPTED,
    ASSIGNED,
    FIXED,
    FIX_LATER,
    NEW,
    VERIFIED,
    VERIFIER_ASSIGNED,
    WILL_NOT_FIX

  }


  export enum Type {

    BUG,
    CUSTOMER_ISSUE,
    FEATURE_REQUEST,
    INTERNAL_CLEANUP,
    PROCESS

  }


  export interface Component {

    flush(): void;
    getAdmins(): string[];
    getBugs(): BuganizerApp.Bug[];
    getBugs(children: boolean): BuganizerApp.Bug[];
    getDescription(): string;
    getId(): string;
    getName(): string;
    getParentId(): string;
    setDescription(description: string): BuganizerApp.Component;
    setName(name: string): BuganizerApp.Component;

  }


  export interface CustomField {

    getId(): string;
    getName(): string;
    getValue(): string;

  }


  export interface Hotlist {

    flush(): void;
    getBugs(): BuganizerApp.Bug[];
    getCreatedTime(): Date;
    getDescription(): string;
    getId(): string;
    getModifiedTime(): Date;
    getName(): string;
    getOwner(): string;
    isArchived(): boolean;
    setArchived(archived: boolean): BuganizerApp.Hotlist;
    setDescription(description: string): BuganizerApp.Hotlist;
    setName(name: string): BuganizerApp.Hotlist;
    setOwner(owner: string): BuganizerApp.Hotlist;

  }


  export interface Query {

    execute(): BuganizerApp.Bug[];
    inComponent(componentId: string, includeSubcomponents: boolean): BuganizerApp.Query;
    inHotlist(hotlistId: string): BuganizerApp.Query;
    inSavedSearch(savedSearchId: string): BuganizerApp.Query;
    isClosed(): BuganizerApp.Query;
    isOpen(): BuganizerApp.Query;
    isResolved(): BuganizerApp.Query;
    withAssignee(username: string): BuganizerApp.Query;
    withDateAfter(type: BuganizerApp.DateType, day: Date): BuganizerApp.Query;
    withDateBefore(type: BuganizerApp.DateType, day: Date): BuganizerApp.Query;
    withDateBetween(type: BuganizerApp.DateType, startDate: Date, endDate: Date): BuganizerApp.Query;
    withDateDuringLast(type: BuganizerApp.DateType, days: number): BuganizerApp.Query;
    withPriority(priority: number): BuganizerApp.Query;
    withReporter(username: string): BuganizerApp.Query;
    withResolution(resolution: BuganizerApp.Resolution): BuganizerApp.Query;
    withResolution(resolution: string): BuganizerApp.Query;
    withSeverity(severity: number): BuganizerApp.Query;
    withStatus(status: BuganizerApp.Status): BuganizerApp.Query;
    withStatus(status: string): BuganizerApp.Query;
    withType(type: BuganizerApp.Type): BuganizerApp.Query;
    withType(type: string): BuganizerApp.Query;
    withVerifier(username: string): BuganizerApp.Query;

  }


}