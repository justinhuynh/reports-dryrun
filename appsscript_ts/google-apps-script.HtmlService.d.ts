/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: HtmlService.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class HtmlService {
  static createHtmlOutput(): HtmlService.HtmlOutput;
  static createHtmlOutput(blob: CommonModule.BlobSource): HtmlService.HtmlOutput;
  static createHtmlOutput(html: string): HtmlService.HtmlOutput;
  static createHtmlOutputFromFile(filename: string): HtmlService.HtmlOutput;
  static createTemplate(blob: CommonModule.BlobSource): HtmlService.HtmlTemplate;
  static createTemplate(html: string): HtmlService.HtmlTemplate;
  static createTemplateFromFile(filename: string): HtmlService.HtmlTemplate;
  static getUserAgent(): string;
}

declare namespace HtmlService {

  export interface HtmlOutput {

    addMetaTag(name: string, content: string): HtmlService.HtmlOutput;
    append(addedContent: string): HtmlService.HtmlOutput;
    appendUntrusted(addedContent: string): HtmlService.HtmlOutput;
    asTemplate(): HtmlService.HtmlTemplate;
    clear(): HtmlService.HtmlOutput;
    getAs(contentType: string): CommonModule.Blob;
    getBlob(): CommonModule.Blob;
    getContent(): string;
    getFaviconUrl(): string;
    getHeight(): number;
    getMetaTags(): HtmlService.HtmlOutputMetaTag[];
    getTitle(): string;
    getWidth(): number;
    setContent(content: string): HtmlService.HtmlOutput;
    setFaviconUrl(iconUrl: string): HtmlService.HtmlOutput;
    setHeight(height: number): HtmlService.HtmlOutput;
    setSandboxMode(mode: HtmlService.SandboxMode): HtmlService.HtmlOutput;
    setTitle(title: string): HtmlService.HtmlOutput;
    setWidth(width: number): HtmlService.HtmlOutput;
    setXFrameOptionsMode(mode: HtmlService.XFrameOptionsMode): HtmlService.HtmlOutput;

  }


  export interface HtmlOutputMetaTag {

    getContent(): string;
    getName(): string;

  }


  export interface HtmlTemplate {

    evaluate(): HtmlService.HtmlOutput;
    getCode(): string;
    getCodeWithComments(): string;
    getRawContent(): string;

  }


  export enum SandboxMode {

    EMULATED,
    IFRAME,
    NATIVE

  }


  export enum XFrameOptionsMode {

    ALLOWALL,
    DEFAULT

  }


}