/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: CalendarApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class CalendarApp {
  static createAllDayEvent(title: string, date: Date): CalendarApp.CalendarEvent;
  static createAllDayEvent(title: string, date: Date, options: any): CalendarApp.CalendarEvent;
  static createAllDayEventSeries(title: string, startDate: Date, recurrence: CalendarApp.EventRecurrence): CalendarApp.CalendarEventSeries;
  static createAllDayEventSeries(title: string, startDate: Date, recurrence: CalendarApp.EventRecurrence, options: any): CalendarApp.CalendarEventSeries;
  static createCalendar(name: string): CalendarApp.Calendar;
  static createCalendar(name: string, options: any): CalendarApp.Calendar;
  static createEvent(title: string, startTime: Date, endTime: Date): CalendarApp.CalendarEvent;
  static createEvent(title: string, startTime: Date, endTime: Date, options: any): CalendarApp.CalendarEvent;
  static createEventFromDescription(description: string): CalendarApp.CalendarEvent;
  static createEventSeries(title: string, startTime: Date, endTime: Date, recurrence: CalendarApp.EventRecurrence): CalendarApp.CalendarEventSeries;
  static createEventSeries(title: string, startTime: Date, endTime: Date, recurrence: CalendarApp.EventRecurrence, options: any): CalendarApp.CalendarEventSeries;
  static getAllCalendars(): CalendarApp.Calendar[];
  static getAllOwnedCalendars(): CalendarApp.Calendar[];
  static getCalendarById(id: string): CalendarApp.Calendar;
  static getCalendarsByName(name: string): CalendarApp.Calendar[];
  static getColor(): string;
  static getDefaultCalendar(): CalendarApp.Calendar;
  static getDescription(): string;
  static getEventSeriesById(iCalId: string): CalendarApp.CalendarEventSeries;
  static getEvents(startTime: Date, endTime: Date): CalendarApp.CalendarEvent[];
  static getEvents(startTime: Date, endTime: Date, options: any): CalendarApp.CalendarEvent[];
  static getEventsForDay(date: Date): CalendarApp.CalendarEvent[];
  static getEventsForDay(date: Date, options: any): CalendarApp.CalendarEvent[];
  static getId(): string;
  static getName(): string;
  static getOwnedCalendarById(id: string): CalendarApp.Calendar;
  static getOwnedCalendarsByName(name: string): CalendarApp.Calendar[];
  static getTimeZone(): string;
  static isHidden(): boolean;
  static isMyPrimaryCalendar(): boolean;
  static isOwnedByMe(): boolean;
  static isSelected(): boolean;
  static newRecurrence(): CalendarApp.EventRecurrence;
  static setColor(color: string): CalendarApp.Calendar;
  static setDescription(description: string): CalendarApp.Calendar;
  static setHidden(hidden: boolean): CalendarApp.Calendar;
  static setName(name: string): CalendarApp.Calendar;
  static setSelected(selected: boolean): CalendarApp.Calendar;
  static setTimeZone(timeZone: string): CalendarApp.Calendar;
  static subscribeToCalendar(id: string): CalendarApp.Calendar;
  static subscribeToCalendar(id: string, options: any): CalendarApp.Calendar;
}

declare namespace CalendarApp {

  export interface Calendar {

    createAllDayEvent(title: string, date: Date): CalendarApp.CalendarEvent;
    createAllDayEvent(title: string, date: Date, options: any): CalendarApp.CalendarEvent;
    createAllDayEventSeries(title: string, startDate: Date, recurrence: CalendarApp.EventRecurrence): CalendarApp.CalendarEventSeries;
    createAllDayEventSeries(title: string, startDate: Date, recurrence: CalendarApp.EventRecurrence, options: any): CalendarApp.CalendarEventSeries;
    createEvent(title: string, startTime: Date, endTime: Date): CalendarApp.CalendarEvent;
    createEvent(title: string, startTime: Date, endTime: Date, options: any): CalendarApp.CalendarEvent;
    createEventFromDescription(description: string): CalendarApp.CalendarEvent;
    createEventSeries(title: string, startTime: Date, endTime: Date, recurrence: CalendarApp.EventRecurrence): CalendarApp.CalendarEventSeries;
    createEventSeries(title: string, startTime: Date, endTime: Date, recurrence: CalendarApp.EventRecurrence, options: any): CalendarApp.CalendarEventSeries;
    deleteCalendar(): void;
    getColor(): string;
    getDescription(): string;
    getEventSeriesById(iCalId: string): CalendarApp.CalendarEventSeries;
    getEvents(startTime: Date, endTime: Date): CalendarApp.CalendarEvent[];
    getEvents(startTime: Date, endTime: Date, options: any): CalendarApp.CalendarEvent[];
    getEventsForDay(date: Date): CalendarApp.CalendarEvent[];
    getEventsForDay(date: Date, options: any): CalendarApp.CalendarEvent[];
    getId(): string;
    getName(): string;
    getTimeZone(): string;
    isHidden(): boolean;
    isMyPrimaryCalendar(): boolean;
    isOwnedByMe(): boolean;
    isSelected(): boolean;
    setColor(color: string): CalendarApp.Calendar;
    setDescription(description: string): CalendarApp.Calendar;
    setHidden(hidden: boolean): CalendarApp.Calendar;
    setName(name: string): CalendarApp.Calendar;
    setSelected(selected: boolean): CalendarApp.Calendar;
    setTimeZone(timeZone: string): CalendarApp.Calendar;
    unsubscribeFromCalendar(): void;

  }


  export interface CalendarEvent {

    addEmailReminder(minutesBefore: number): CalendarApp.CalendarEvent;
    addGuest(email: string): CalendarApp.CalendarEvent;
    addPopupReminder(minutesBefore: number): CalendarApp.CalendarEvent;
    addSmsReminder(minutesBefore: number): CalendarApp.CalendarEvent;
    anyoneCanAddSelf(): boolean;
    deleteEvent(): void;
    deleteTag(key: string): CalendarApp.CalendarEvent;
    getAllDayEndDate(): Date;
    getAllDayStartDate(): Date;
    getAllTagKeys(): string[];
    getCreators(): string[];
    getDateCreated(): Date;
    getDescription(): string;
    getEmailReminders(): number[];
    getEndTime(): Date;
    getEventSeries(): CalendarApp.CalendarEventSeries;
    getGuestByEmail(email: string): CalendarApp.EventGuest;
    getGuestList(): CalendarApp.EventGuest[];
    getGuestList(includeOwner: boolean): CalendarApp.EventGuest[];
    getId(): string;
    getLastUpdated(): Date;
    getLocation(): string;
    getMyStatus(): CalendarApp.GuestStatus;
    getOriginalCalendarId(): string;
    getPopupReminders(): number[];
    getSmsReminders(): number[];
    getStartTime(): Date;
    getTag(key: string): string;
    getTitle(): string;
    getVisibility(): CalendarApp.Visibility;
    guestsCanInviteOthers(): boolean;
    guestsCanModify(): boolean;
    guestsCanSeeGuests(): boolean;
    isAllDayEvent(): boolean;
    isOwnedByMe(): boolean;
    isRecurringEvent(): boolean;
    removeAllReminders(): CalendarApp.CalendarEvent;
    removeGuest(email: string): CalendarApp.CalendarEvent;
    resetRemindersToDefault(): CalendarApp.CalendarEvent;
    setAllDayDate(date: Date): CalendarApp.CalendarEvent;
    setAnyoneCanAddSelf(anyoneCanAddSelf: boolean): CalendarApp.CalendarEvent;
    setDescription(description: string): CalendarApp.CalendarEvent;
    setGuestsCanInviteOthers(guestsCanInviteOthers: boolean): CalendarApp.CalendarEvent;
    setGuestsCanModify(guestsCanModify: boolean): CalendarApp.CalendarEvent;
    setGuestsCanSeeGuests(guestsCanSeeGuests: boolean): CalendarApp.CalendarEvent;
    setLocation(location: string): CalendarApp.CalendarEvent;
    setMyStatus(status: CalendarApp.GuestStatus): CalendarApp.CalendarEvent;
    setTag(key: string, value: string): CalendarApp.CalendarEvent;
    setTime(startTime: Date, endTime: Date): CalendarApp.CalendarEvent;
    setTitle(title: string): CalendarApp.CalendarEvent;
    setVisibility(visibility: CalendarApp.Visibility): CalendarApp.CalendarEvent;

  }


  export interface CalendarEventSeries {

    addEmailReminder(minutesBefore: number): CalendarApp.CalendarEventSeries;
    addGuest(email: string): CalendarApp.CalendarEventSeries;
    addPopupReminder(minutesBefore: number): CalendarApp.CalendarEventSeries;
    addSmsReminder(minutesBefore: number): CalendarApp.CalendarEventSeries;
    anyoneCanAddSelf(): boolean;
    deleteEventSeries(): void;
    deleteTag(key: string): CalendarApp.CalendarEventSeries;
    getAllTagKeys(): string[];
    getCreators(): string[];
    getDateCreated(): Date;
    getDescription(): string;
    getEmailReminders(): number[];
    getGuestByEmail(email: string): CalendarApp.EventGuest;
    getGuestList(): CalendarApp.EventGuest[];
    getGuestList(includeOwner: boolean): CalendarApp.EventGuest[];
    getId(): string;
    getLastUpdated(): Date;
    getLocation(): string;
    getMyStatus(): CalendarApp.GuestStatus;
    getOriginalCalendarId(): string;
    getPopupReminders(): number[];
    getSmsReminders(): number[];
    getTag(key: string): string;
    getTitle(): string;
    getVisibility(): CalendarApp.Visibility;
    guestsCanInviteOthers(): boolean;
    guestsCanModify(): boolean;
    guestsCanSeeGuests(): boolean;
    isOwnedByMe(): boolean;
    removeAllReminders(): CalendarApp.CalendarEventSeries;
    removeGuest(email: string): CalendarApp.CalendarEventSeries;
    resetRemindersToDefault(): CalendarApp.CalendarEventSeries;
    setAnyoneCanAddSelf(anyoneCanAddSelf: boolean): CalendarApp.CalendarEventSeries;
    setDescription(description: string): CalendarApp.CalendarEventSeries;
    setGuestsCanInviteOthers(guestsCanInviteOthers: boolean): CalendarApp.CalendarEventSeries;
    setGuestsCanModify(guestsCanModify: boolean): CalendarApp.CalendarEventSeries;
    setGuestsCanSeeGuests(guestsCanSeeGuests: boolean): CalendarApp.CalendarEventSeries;
    setLocation(location: string): CalendarApp.CalendarEventSeries;
    setMyStatus(status: CalendarApp.GuestStatus): CalendarApp.CalendarEventSeries;
    setRecurrence(recurrence: CalendarApp.EventRecurrence, startDate: Date): CalendarApp.CalendarEventSeries;
    setRecurrence(recurrence: CalendarApp.EventRecurrence, startTime: Date, endTime: Date): CalendarApp.CalendarEventSeries;
    setTag(key: string, value: string): CalendarApp.CalendarEventSeries;
    setTitle(title: string): CalendarApp.CalendarEventSeries;
    setVisibility(visibility: CalendarApp.Visibility): CalendarApp.CalendarEventSeries;

  }


  export interface EventGuest {

    getAdditionalGuests(): number;
    getEmail(): string;
    getGuestStatus(): CalendarApp.GuestStatus;
    getName(): string;
    getStatus(): string;

  }


  export interface EventRecurrence {

    addDailyExclusion(): CalendarApp.RecurrenceRule;
    addDailyRule(): CalendarApp.RecurrenceRule;
    addDate(date: Date): CalendarApp.EventRecurrence;
    addDateExclusion(date: Date): CalendarApp.EventRecurrence;
    addMonthlyExclusion(): CalendarApp.RecurrenceRule;
    addMonthlyRule(): CalendarApp.RecurrenceRule;
    addWeeklyExclusion(): CalendarApp.RecurrenceRule;
    addWeeklyRule(): CalendarApp.RecurrenceRule;
    addYearlyExclusion(): CalendarApp.RecurrenceRule;
    addYearlyRule(): CalendarApp.RecurrenceRule;
    setTimeZone(timeZone: string): CalendarApp.EventRecurrence;

  }


  export enum GuestStatus {

    INVITED,
    MAYBE,
    NO,
    OWNER,
    YES

  }


  export interface RecurrenceRule {

    addDailyExclusion(): CalendarApp.RecurrenceRule;
    addDailyRule(): CalendarApp.RecurrenceRule;
    addDate(date: Date): CalendarApp.EventRecurrence;
    addDateExclusion(date: Date): CalendarApp.EventRecurrence;
    addMonthlyExclusion(): CalendarApp.RecurrenceRule;
    addMonthlyRule(): CalendarApp.RecurrenceRule;
    addWeeklyExclusion(): CalendarApp.RecurrenceRule;
    addWeeklyRule(): CalendarApp.RecurrenceRule;
    addYearlyExclusion(): CalendarApp.RecurrenceRule;
    addYearlyRule(): CalendarApp.RecurrenceRule;
    interval(interval: number): CalendarApp.RecurrenceRule;
    onlyInMonth(month: CommonModule.Month): CalendarApp.RecurrenceRule;
    onlyInMonths(months: CommonModule.Month[]): CalendarApp.RecurrenceRule;
    onlyOnMonthDay(day: number): CalendarApp.RecurrenceRule;
    onlyOnMonthDays(days: number[]): CalendarApp.RecurrenceRule;
    onlyOnWeek(week: number): CalendarApp.RecurrenceRule;
    onlyOnWeekday(day: CommonModule.Weekday): CalendarApp.RecurrenceRule;
    onlyOnWeekdays(days: CommonModule.Weekday[]): CalendarApp.RecurrenceRule;
    onlyOnWeeks(weeks: number[]): CalendarApp.RecurrenceRule;
    onlyOnYearDay(day: number): CalendarApp.RecurrenceRule;
    onlyOnYearDays(days: number[]): CalendarApp.RecurrenceRule;
    setTimeZone(timeZone: string): CalendarApp.EventRecurrence;
    times(times: number): CalendarApp.RecurrenceRule;
    until(endDate: Date): CalendarApp.RecurrenceRule;
    weekStartsOn(day: CommonModule.Weekday): CalendarApp.RecurrenceRule;

  }


  export enum Visibility {

    CONFIDENTIAL,
    DEFAULT,
    PRIVATE,
    PUBLIC

  }


}