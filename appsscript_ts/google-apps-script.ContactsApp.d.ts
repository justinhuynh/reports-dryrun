/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: ContactsApp.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class ContactsApp {
  static createContact(givenName: string, familyName: string, email: string): ContactsApp.Contact;
  static createContactGroup(name: string): ContactsApp.ContactGroup;
  static deleteContact(contact: ContactsApp.Contact): void;
  static deleteContactGroup(group: ContactsApp.ContactGroup): void;
  static findByEmailAddress(email: string): ContactsApp.Contact;
  static findContactGroup(name: string): ContactsApp.ContactGroup;
  static getAllContacts(): ContactsApp.Contact[];
  static getContact(emailAddress: string): ContactsApp.Contact;
  static getContactById(id: string): ContactsApp.Contact;
  static getContactGroup(name: string): ContactsApp.ContactGroup;
  static getContactGroupById(id: string): ContactsApp.ContactGroup;
  static getContactGroups(): ContactsApp.ContactGroup[];
  static getContacts(): ContactsApp.Contact[];
  static getContactsByAddress(query: string): ContactsApp.Contact[];
  static getContactsByAddress(query: string, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByAddress(query: string, label: string): ContactsApp.Contact[];
  static getContactsByCompany(query: string): ContactsApp.Contact[];
  static getContactsByCustomField(query: any, label: ContactsApp.ExtendedField): ContactsApp.Contact[];
  static getContactsByDate(month: CommonModule.Month, day: number, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByDate(month: CommonModule.Month, day: number, year: number, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByDate(month: CommonModule.Month, day: number, year: number, label: string): ContactsApp.Contact[];
  static getContactsByDate(month: CommonModule.Month, day: number, label: string): ContactsApp.Contact[];
  static getContactsByEmailAddress(query: string): ContactsApp.Contact[];
  static getContactsByEmailAddress(query: string, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByEmailAddress(query: string, label: string): ContactsApp.Contact[];
  static getContactsByGroup(group: ContactsApp.ContactGroup): ContactsApp.Contact[];
  static getContactsByIM(query: string): ContactsApp.Contact[];
  static getContactsByIM(query: string, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByIM(query: string, label: string): ContactsApp.Contact[];
  static getContactsByJobTitle(query: string): ContactsApp.Contact[];
  static getContactsByName(query: string): ContactsApp.Contact[];
  static getContactsByName(query: string, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByNotes(query: string): ContactsApp.Contact[];
  static getContactsByPhone(query: string): ContactsApp.Contact[];
  static getContactsByPhone(query: string, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByPhone(query: string, label: string): ContactsApp.Contact[];
  static getContactsByUrl(query: string): ContactsApp.Contact[];
  static getContactsByUrl(query: string, label: ContactsApp.Field): ContactsApp.Contact[];
  static getContactsByUrl(query: string, label: string): ContactsApp.Contact[];
}

declare namespace ContactsApp {

  export interface AddressField {

    deleteAddressField(): void;
    getAddress(): string;
    getLabel(): any;
    isPrimary(): boolean;
    setAddress(address: string): ContactsApp.AddressField;
    setAsPrimary(): ContactsApp.AddressField;
    setLabel(field: ContactsApp.Field): ContactsApp.AddressField;
    setLabel(label: string): ContactsApp.AddressField;

  }


  export interface CompanyField {

    deleteCompanyField(): void;
    getCompanyName(): string;
    getJobTitle(): string;
    isPrimary(): boolean;
    setAsPrimary(): ContactsApp.CompanyField;
    setCompanyName(company: string): ContactsApp.CompanyField;
    setJobTitle(title: string): ContactsApp.CompanyField;

  }


  export interface Contact {

    addAddress(label: any, address: string): ContactsApp.AddressField;
    addCompany(company: string, title: string): ContactsApp.CompanyField;
    addCustomField(label: any, content: any): ContactsApp.CustomField;
    addDate(label: any, month: CommonModule.Month, day: number, year: number): ContactsApp.DateField;
    addEmail(label: any, address: string): ContactsApp.EmailField;
    addIM(label: any, address: string): ContactsApp.IMField;
    addPhone(label: any, number: string): ContactsApp.PhoneField;
    addToGroup(group: ContactsApp.ContactGroup): ContactsApp.Contact;
    addUrl(label: any, url: string): ContactsApp.UrlField;
    deleteContact(): void;
    getAddresses(): ContactsApp.AddressField[];
    getAddresses(label: any): ContactsApp.AddressField[];
    getCompanies(): ContactsApp.CompanyField[];
    getContactGroups(): ContactsApp.ContactGroup[];
    getCustomFields(): ContactsApp.CustomField[];
    getCustomFields(label: any): ContactsApp.CustomField[];
    getDates(): ContactsApp.DateField[];
    getDates(label: any): ContactsApp.DateField[];
    getEmailAddresses(): string[];
    getEmails(): ContactsApp.EmailField[];
    getEmails(label: any): ContactsApp.EmailField[];
    getFamilyName(): string;
    getFullName(): string;
    getGivenName(): string;
    getHomeAddress(): string;
    getHomeFax(): string;
    getHomePhone(): string;
    getIMs(): ContactsApp.IMField[];
    getIMs(label: any): ContactsApp.IMField[];
    getId(): string;
    getInitials(): string;
    getLastUpdated(): Date;
    getMaidenName(): string;
    getMiddleName(): string;
    getMobilePhone(): string;
    getNickname(): string;
    getNotes(): string;
    getPager(): string;
    getPhones(): ContactsApp.PhoneField[];
    getPhones(label: any): ContactsApp.PhoneField[];
    getPrefix(): string;
    getPrimaryEmail(): string;
    getShortName(): string;
    getSuffix(): string;
    getUrls(): ContactsApp.UrlField[];
    getUrls(label: any): ContactsApp.UrlField[];
    getUserDefinedField(key: string): string;
    getUserDefinedFields(): any;
    getWorkAddress(): string;
    getWorkFax(): string;
    getWorkPhone(): string;
    removeFromGroup(group: ContactsApp.ContactGroup): ContactsApp.Contact;
    setFamilyName(familyName: string): ContactsApp.Contact;
    setFullName(fullName: string): ContactsApp.Contact;
    setGivenName(givenName: string): ContactsApp.Contact;
    setHomeAddress(addr: string): void;
    setHomeFax(phone: string): void;
    setHomePhone(phone: string): void;
    setInitials(initials: string): ContactsApp.Contact;
    setMaidenName(maidenName: string): ContactsApp.Contact;
    setMiddleName(middleName: string): ContactsApp.Contact;
    setMobilePhone(phone: string): void;
    setNickname(nickname: string): ContactsApp.Contact;
    setNotes(notes: string): ContactsApp.Contact;
    setPager(phone: string): void;
    setPrefix(prefix: string): ContactsApp.Contact;
    setPrimaryEmail(primaryEmail: string): void;
    setShortName(shortName: string): ContactsApp.Contact;
    setSuffix(suffix: string): ContactsApp.Contact;
    setUserDefinedField(key: string, value: string): void;
    setUserDefinedFields(o: any): void;
    setWorkAddress(addr: string): void;
    setWorkFax(phone: string): void;
    setWorkPhone(phone: string): void;

  }


  export interface ContactGroup {

    addContact(contact: ContactsApp.Contact): ContactsApp.ContactGroup;
    deleteGroup(): void;
    getContacts(): ContactsApp.Contact[];
    getGroupName(): string;
    getId(): string;
    getName(): string;
    isSystemGroup(): boolean;
    removeContact(contact: ContactsApp.Contact): ContactsApp.ContactGroup;
    setGroupName(name: string): void;
    setName(name: string): ContactsApp.ContactGroup;

  }


  export interface CustomField {

    deleteCustomField(): void;
    getLabel(): any;
    getValue(): any;
    setLabel(field: ContactsApp.ExtendedField): ContactsApp.CustomField;
    setLabel(label: string): ContactsApp.CustomField;
    setValue(value: any): ContactsApp.CustomField;

  }


  export interface DateField {

    deleteDateField(): void;
    getDay(): number;
    getLabel(): any;
    getMonth(): CommonModule.Month;
    getYear(): number;
    setDate(month: CommonModule.Month, day: number): ContactsApp.DateField;
    setDate(month: CommonModule.Month, day: number, year: number): ContactsApp.DateField;
    setLabel(label: ContactsApp.Field): ContactsApp.DateField;
    setLabel(label: string): ContactsApp.DateField;

  }


  export interface EmailField {

    deleteEmailField(): void;
    getAddress(): string;
    getDisplayName(): string;
    getLabel(): any;
    isPrimary(): boolean;
    setAddress(address: string): ContactsApp.EmailField;
    setAsPrimary(): ContactsApp.EmailField;
    setDisplayName(name: string): ContactsApp.EmailField;
    setLabel(field: ContactsApp.Field): ContactsApp.EmailField;
    setLabel(label: string): ContactsApp.EmailField;

  }


  export enum ExtendedField {

    BILLING_INFORMATION,
    DIRECTORY_SERVER,
    GENDER,
    HOBBY,
    HOME,
    LANGUAGE,
    MILEAGE,
    OTHER,
    PRIORITY,
    SENSITIVITY,
    USER,
    WORK

  }


  export enum Field {

    AIM,
    ANNIVERSARY,
    ASSISTANT_PHONE,
    BIRTHDAY,
    BLOG,
    CALLBACK_PHONE,
    COMPANY,
    FAMILY_NAME,
    FTP,
    FULL_NAME,
    GIVEN_NAME,
    GOOGLE_TALK,
    GOOGLE_VOICE,
    HOME_ADDRESS,
    HOME_EMAIL,
    HOME_FAX,
    HOME_PAGE,
    HOME_PHONE,
    HOME_WEBSITE,
    ICQ,
    INITIALS,
    JABBER,
    JOB_TITLE,
    MAIDEN_NAME,
    MAIN_PHONE,
    MIDDLE_NAME,
    MOBILE_PHONE,
    MSN,
    NICKNAME,
    NOTES,
    PAGER,
    PREFIX,
    PROFILE,
    QQ,
    SHORT_NAME,
    SKYPE,
    SUFFIX,
    WORK_ADDRESS,
    WORK_EMAIL,
    WORK_FAX,
    WORK_PHONE,
    WORK_WEBSITE,
    YAHOO

  }


  export enum Gender {

    FEMALE,
    MALE

  }


  export interface IMField {

    deleteIMField(): void;
    getAddress(): string;
    getLabel(): any;
    isPrimary(): boolean;
    setAddress(address: string): ContactsApp.IMField;
    setAsPrimary(): ContactsApp.IMField;
    setLabel(field: ContactsApp.Field): ContactsApp.IMField;
    setLabel(label: string): ContactsApp.IMField;

  }


  export interface PhoneField {

    deletePhoneField(): void;
    getLabel(): any;
    getPhoneNumber(): string;
    isPrimary(): boolean;
    setAsPrimary(): ContactsApp.PhoneField;
    setLabel(field: ContactsApp.Field): ContactsApp.PhoneField;
    setLabel(label: string): ContactsApp.PhoneField;
    setPhoneNumber(number: string): ContactsApp.PhoneField;

  }


  export enum Priority {

    HIGH,
    LOW,
    NORMAL

  }


  export enum Sensitivity {

    CONFIDENTIAL,
    NORMAL,
    PERSONAL,
    PRIVATE

  }


  export interface UrlField {

    deleteUrlField(): void;
    getAddress(): string;
    getLabel(): any;
    isPrimary(): boolean;
    setAddress(address: string): ContactsApp.UrlField;
    setAsPrimary(): ContactsApp.UrlField;
    setLabel(field: ContactsApp.Field): ContactsApp.UrlField;
    setLabel(label: string): ContactsApp.UrlField;

  }


}