/**
 * @fileoverview TypeScript type definitions for Apps Script namespace: Maps.
 * This file was autogenerated by the Apps Script SDK.
 */


declare class Maps {
  static decodePolyline(polyline: string): number[];
  static encodePolyline(points: number[]): string;
  static newDirectionFinder(): Maps.DirectionFinder;
  static newElevationSampler(): Maps.ElevationSampler;
  static newGeocoder(): Maps.Geocoder;
  static newStaticMap(): Maps.StaticMap;
  static setAuthentication(clientId: string, signingKey: string): void;
}

declare namespace Maps {

  export interface DirectionFinder {

    addWaypoint(latitude: number, longitude: number): Maps.DirectionFinder;
    addWaypoint(address: string): Maps.DirectionFinder;
    clearWaypoints(): Maps.DirectionFinder;
    getDirections(): any;
    setAlternatives(useAlternatives: boolean): Maps.DirectionFinder;
    setArrive(time: Date): Maps.DirectionFinder;
    setAvoid(avoid: string): Maps.DirectionFinder;
    setDepart(time: Date): Maps.DirectionFinder;
    setDestination(latitude: number, longitude: number): Maps.DirectionFinder;
    setDestination(address: string): Maps.DirectionFinder;
    setLanguage(language: string): Maps.DirectionFinder;
    setMode(mode: string): Maps.DirectionFinder;
    setOptimizeWaypoints(optimizeOrder: boolean): Maps.DirectionFinder;
    setOrigin(latitude: number, longitude: number): Maps.DirectionFinder;
    setOrigin(address: string): Maps.DirectionFinder;
    setRegion(region: string): Maps.DirectionFinder;

  }


  export enum DirectionFinderEnums {

    Avoid,
    Mode

  }


  export interface ElevationSampler {

    sampleLocation(latitude: number, longitude: number): any;
    sampleLocations(points: number[]): any;
    sampleLocations(encodedPolyline: string): any;
    samplePath(points: number[], numSamples: number): any;
    samplePath(encodedPolyline: string, numSamples: number): any;

  }


  export interface Geocoder {

    geocode(address: string): any;
    reverseGeocode(latitude: number, longitude: number): any;
    reverseGeocode(swLatitude: number, swLongitude: number, neLatitude: number, neLongitude: number): any;
    setBounds(swLatitude: number, swLongitude: number, neLatitude: number, neLongitude: number): Maps.Geocoder;
    setLanguage(language: string): Maps.Geocoder;
    setRegion(region: string): Maps.Geocoder;

  }


  export interface StaticMap {

    addAddress(address: string): Maps.StaticMap;
    addMarker(latitude: number, longitude: number): Maps.StaticMap;
    addMarker(address: string): Maps.StaticMap;
    addPath(points: number[]): Maps.StaticMap;
    addPath(polyline: string): Maps.StaticMap;
    addPoint(latitude: number, longitude: number): Maps.StaticMap;
    addVisible(latitude: number, longitude: number): Maps.StaticMap;
    addVisible(address: string): Maps.StaticMap;
    beginPath(): Maps.StaticMap;
    clearMarkers(): Maps.StaticMap;
    clearPaths(): Maps.StaticMap;
    clearVisibles(): Maps.StaticMap;
    endPath(): Maps.StaticMap;
    getAs(contentType: string): CommonModule.Blob;
    getBlob(): CommonModule.Blob;
    getMapImage(): number[];
    getMapUrl(): string;
    setCenter(latitude: number, longitude: number): Maps.StaticMap;
    setCenter(address: string): Maps.StaticMap;
    setCustomMarkerStyle(imageUrl: string, useShadow: boolean): Maps.StaticMap;
    setFormat(format: string): Maps.StaticMap;
    setLanguage(language: string): Maps.StaticMap;
    setMapType(mapType: string): Maps.StaticMap;
    setMarkerStyle(size: string, color: string, label: string): Maps.StaticMap;
    setMobile(useMobileTiles: boolean): Maps.StaticMap;
    setPathStyle(weight: number, color: string, fillColor: string): Maps.StaticMap;
    setSize(width: number, height: number): Maps.StaticMap;
    setZoom(zoom: number): Maps.StaticMap;

  }


  export enum StaticMapEnums {

    Color,
    Format,
    MarkerSize,
    Type

  }


}